{
	"id": "7dc0956313fd77998e6f3df7a09c0c9d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.17",
	"solcLongVersion": "0.8.17+commit.8df45f5f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/UniversalRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n// Command implementations\nimport {Dispatcher} from './base/Dispatcher.sol';\nimport {RouterParameters, RouterImmutables} from './base/RouterImmutables.sol';\nimport {Commands} from './libraries/Commands.sol';\nimport {IUniversalRouter} from './interfaces/IUniversalRouter.sol';\n\ncontract UniversalRouter is RouterImmutables, IUniversalRouter, Dispatcher {\n    modifier checkDeadline(uint256 deadline) {\n        if (block.timestamp > deadline) revert TransactionDeadlinePassed();\n        _;\n    }\n\n    constructor(RouterParameters memory params) RouterImmutables(params) {}\n\n    /// @inheritdoc IUniversalRouter\n    function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline)\n        external\n        payable\n        checkDeadline(deadline)\n    {\n        execute(commands, inputs);\n    }\n\n    /// @inheritdoc Dispatcher\n    function execute(bytes calldata commands, bytes[] calldata inputs) public payable override isNotLocked {\n        bool success;\n        bytes memory output;\n        uint256 numCommands = commands.length;\n        if (inputs.length != numCommands) revert LengthMismatch();\n\n        // loop through all given commands, execute them and pass along outputs as defined\n        for (uint256 commandIndex = 0; commandIndex < numCommands;) {\n            bytes1 command = commands[commandIndex];\n\n            bytes calldata input = inputs[commandIndex];\n\n            (success, output) = dispatch(command, input);\n\n            if (!success && successRequired(command)) {\n                revert ExecutionFailed({commandIndex: commandIndex, message: output});\n            }\n\n            unchecked {\n                commandIndex++;\n            }\n        }\n    }\n\n    function successRequired(bytes1 command) internal pure returns (bool) {\n        return command & Commands.FLAG_ALLOW_REVERT == 0;\n    }\n\n    /// @notice To receive ETH from WETH and other protocols\n    receive() external payable {}\n}\n"
			},
			"contracts/interfaces/IUniversalRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\ninterface IUniversalRouter {\n    /// @notice Thrown when a required command has failed\n    error ExecutionFailed(uint256 commandIndex, bytes message);\n\n    /// @notice Thrown when attempting to send ETH directly to the contract\n    error ETHNotAccepted();\n\n    /// @notice Thrown when executing commands with an expired deadline\n    error TransactionDeadlinePassed();\n\n    /// @notice Thrown when attempting to execute commands and an incorrect number of inputs are provided\n    error LengthMismatch();\n\n    /// @notice Executes encoded commands along with provided inputs. Reverts if deadline has expired.\n    /// @param commands A set of concatenated commands, each 1 byte in length\n    /// @param inputs An array of byte strings containing abi encoded inputs for each command\n    /// @param deadline The deadline by which the transaction must be executed\n    function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable;\n}\n"
			},
			"contracts/libraries/Commands.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\n/// @title Commands\n/// @notice Command Flags used to decode commands\nlibrary Commands {\n    // Masks to extract certain bits of commands\n    bytes1 internal constant FLAG_ALLOW_REVERT = 0x80;\n    bytes1 internal constant COMMAND_TYPE_MASK = 0x3f;\n\n    // Command Types. Maximum supported command at this moment is 0x3f.\n\n    // Command Types where value<0x08, executed in the first nested-if block\n    uint256 constant V3_SWAP_EXACT_IN = 0x00;\n    uint256 constant V3_SWAP_EXACT_OUT = 0x01;\n    uint256 constant PERMIT2_TRANSFER_FROM = 0x02;\n    uint256 constant PERMIT2_PERMIT_BATCH = 0x03;\n    uint256 constant SWEEP = 0x04;\n    uint256 constant TRANSFER = 0x05;\n    uint256 constant PAY_PORTION = 0x06;\n    // COMMAND_PLACEHOLDER = 0x07;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant FIRST_IF_BOUNDARY = 0x08;\n\n    // Command Types where 0x08<=value<=0x0f, executed in the second nested-if block\n    uint256 constant V2_SWAP_EXACT_IN = 0x08;\n    uint256 constant V2_SWAP_EXACT_OUT = 0x09;\n    uint256 constant PERMIT2_PERMIT = 0x0a;\n    uint256 constant WRAP_ETH = 0x0b;\n    uint256 constant UNWRAP_WETH = 0x0c;\n    uint256 constant PERMIT2_TRANSFER_FROM_BATCH = 0x0d;\n    uint256 constant BALANCE_CHECK_ERC20 = 0x0e;\n    // COMMAND_PLACEHOLDER = 0x0f;\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant SECOND_IF_BOUNDARY = 0x10;\n\n    // Command Types where 0x10<=value<0x18, executed in the third nested-if block\n    // All NFT-related commands removed in this repo\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant THIRD_IF_BOUNDARY = 0x18;\n\n    // Command Types where 0x18<=value<=0x1f, executed in the final nested-if block\n    // All NFT-related commands removed in this repo\n\n    // The commands are executed in nested if blocks to minimise gas consumption\n    // The following constant defines one of the boundaries where the if blocks split commands\n    uint256 constant FOURTH_IF_BOUNDARY = 0x20;\n\n    // Command Types where 0x20<=value\n    // All NFT-related commands removed except meta-ops\n    uint256 constant EXECUTE_SUB_PLAN = 0x21;\n    // COMMAND_PLACEHOLDER for 0x20, 0x22 to 0x3f (unused)\n}\n"
			},
			"contracts/base/RouterImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IAllowanceTransfer} from 'lib/permit2/src/interfaces/IAllowanceTransfer.sol';\nimport {IWETH9} from '../interfaces/external/IWETH9.sol';\n\nstruct RouterParameters {\n    address permit2;\n    address weth9;\n    address v2Factory;\n    address v3Factory;\n    bytes32 pairInitCodeHash;\n    bytes32 poolInitCodeHash;\n}\n\n/// @title Router Immutable Storage (ERC20-only)\ncontract RouterImmutables {\n    /// @dev WETH9 address\n    IWETH9 internal immutable WETH9;\n\n    /// @dev Permit2 address\n    IAllowanceTransfer internal immutable PERMIT2;\n\n    /// @dev The address of UniswapV2Factory\n    address internal immutable UNISWAP_V2_FACTORY;\n\n    /// @dev The UniswapV2Pair initcodehash\n    bytes32 internal immutable UNISWAP_V2_PAIR_INIT_CODE_HASH;\n\n    /// @dev The address of UniswapV3Factory\n    address internal immutable UNISWAP_V3_FACTORY;\n\n    /// @dev The UniswapV3Pool initcodehash\n    bytes32 internal immutable UNISWAP_V3_POOL_INIT_CODE_HASH;\n\n    error InvalidRouterParameters();\n\n    constructor(RouterParameters memory params) {\n        // Basic non-zero checks for critical parameters\n        if (params.permit2 == address(0) || params.weth9 == address(0) || params.v2Factory == address(0)\n            || params.v3Factory == address(0)) revert InvalidRouterParameters();\n\n        if (params.pairInitCodeHash == bytes32(0) || params.poolInitCodeHash == bytes32(0)) {\n            revert InvalidRouterParameters();\n        }\n\n        // Code presence checks for key contracts\n        if (params.permit2.code.length == 0 || params.weth9.code.length == 0) revert InvalidRouterParameters();\n\n        PERMIT2 = IAllowanceTransfer(params.permit2);\n        WETH9 = IWETH9(params.weth9);\n        UNISWAP_V2_FACTORY = params.v2Factory;\n        UNISWAP_V2_PAIR_INIT_CODE_HASH = params.pairInitCodeHash;\n        UNISWAP_V3_FACTORY = params.v3Factory;\n        UNISWAP_V3_POOL_INIT_CODE_HASH = params.poolInitCodeHash;\n    }\n}\n\n"
			},
			"contracts/base/Dispatcher.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {V2SwapRouter} from '../modules/uniswap/v2/V2SwapRouter.sol';\nimport {V3SwapRouter} from '../modules/uniswap/v3/V3SwapRouter.sol';\nimport {BytesLib} from '../modules/uniswap/v3/BytesLib.sol';\nimport {Payments} from '../modules/Payments.sol';\nimport {Commands} from '../libraries/Commands.sol';\nimport {LockAndMsgSender} from './LockAndMsgSender.sol';\nimport {ERC20} from 'solmate/src/tokens/ERC20.sol';\nimport {IAllowanceTransfer} from 'lib/permit2/src/interfaces/IAllowanceTransfer.sol';\n\n/// @title Decodes and Executes Commands (ERC20-only)\n/// @notice Called by the UniversalRouter to efficiently decode and execute a single command\nabstract contract Dispatcher is Payments, V2SwapRouter, V3SwapRouter, LockAndMsgSender {\n    using BytesLib for bytes;\n\n    error InvalidCommandType(uint256 commandType);\n    error ReservedBitSet();\n    error BalanceTooLow();\n\n    /// @notice Decodes and executes the given command with the given inputs\n    /// @param commandType The command type to execute\n    /// @param inputs The inputs to execute the command with\n    function dispatch(bytes1 commandType, bytes calldata inputs) internal returns (bool success, bytes memory output) {\n        // Enforce reserved bit is zero (0x40)\n        if ((commandType & 0x40) != 0) revert ReservedBitSet();\n        uint256 command = uint8(commandType & Commands.COMMAND_TYPE_MASK);\n\n        success = true;\n\n        if (command < Commands.FOURTH_IF_BOUNDARY) {\n            if (command < Commands.SECOND_IF_BOUNDARY) {\n                // 0x00 <= command < 0x08\n                if (command < Commands.FIRST_IF_BOUNDARY) {\n                    if (command == Commands.V3_SWAP_EXACT_IN) {\n                        // equivalent: abi.decode(inputs, (address, uint256, uint256, bytes, bool))\n                        address recipient;\n                        uint256 amountIn;\n                        uint256 amountOutMin;\n                        bool payerIsUser;\n                        assembly {\n                            recipient := calldataload(inputs.offset)\n                            amountIn := calldataload(add(inputs.offset, 0x20))\n                            amountOutMin := calldataload(add(inputs.offset, 0x40))\n                            // 0x60 offset is the path, decoded below\n                            payerIsUser := calldataload(add(inputs.offset, 0x80))\n                        }\n                        bytes calldata path = inputs.toBytes(3);\n                        address payer = payerIsUser ? lockedBy : address(this);\n                        v3SwapExactInput(map(recipient), amountIn, amountOutMin, path, payer);\n                    } else if (command == Commands.V3_SWAP_EXACT_OUT) {\n                        // equivalent: abi.decode(inputs, (address, uint256, uint256, bytes, bool))\n                        address recipient;\n                        uint256 amountOut;\n                        uint256 amountInMax;\n                        bool payerIsUser;\n                        assembly {\n                            recipient := calldataload(inputs.offset)\n                            amountOut := calldataload(add(inputs.offset, 0x20))\n                            amountInMax := calldataload(add(inputs.offset, 0x40))\n                            // 0x60 offset is the path, decoded below\n                            payerIsUser := calldataload(add(inputs.offset, 0x80))\n                        }\n                        bytes calldata path = inputs.toBytes(3);\n                        address payer = payerIsUser ? lockedBy : address(this);\n                        v3SwapExactOutput(map(recipient), amountOut, amountInMax, path, payer);\n                    } else if (command == Commands.PERMIT2_TRANSFER_FROM) {\n                        // equivalent: abi.decode(inputs, (address, address, uint160))\n                        address token;\n                        address recipient;\n                        uint160 amount;\n                        assembly {\n                            token := calldataload(inputs.offset)\n                            recipient := calldataload(add(inputs.offset, 0x20))\n                            amount := calldataload(add(inputs.offset, 0x40))\n                        }\n                        permit2TransferFrom(token, lockedBy, map(recipient), amount);\n                    } else if (command == Commands.PERMIT2_PERMIT_BATCH) {\n                        (IAllowanceTransfer.PermitBatch memory permitBatch,) =\n                            abi.decode(inputs, (IAllowanceTransfer.PermitBatch, bytes));\n                        PERMIT2.permit(lockedBy, permitBatch, \"\");\n                    } else if (command == Commands.SWEEP) {\n                        // equivalent: abi.decode(inputs, (address, address, uint256))\n                        address token;\n                        address recipient;\n                        uint256 amountMin;\n                        assembly {\n                            token := calldataload(inputs.offset)\n                            recipient := calldataload(add(inputs.offset, 0x20))\n                            amountMin := calldataload(add(inputs.offset, 0x40))\n                        }\n                        Payments.sweep(token, map(recipient), amountMin);\n                    } else if (command == Commands.TRANSFER) {\n                        // equivalent: abi.decode(inputs, (address, address, uint256))\n                        address token;\n                        address recipient;\n                        uint256 value;\n                        assembly {\n                            token := calldataload(inputs.offset)\n                            recipient := calldataload(add(inputs.offset, 0x20))\n                            value := calldataload(add(inputs.offset, 0x40))\n                        }\n                        Payments.pay(token, map(recipient), value);\n                    } else if (command == Commands.PAY_PORTION) {\n                        // equivalent: abi.decode(inputs, (address, address, uint256))\n                        address token;\n                        address recipient;\n                        uint256 bips;\n                        assembly {\n                            token := calldataload(inputs.offset)\n                            recipient := calldataload(add(inputs.offset, 0x20))\n                            bips := calldataload(add(inputs.offset, 0x40))\n                        }\n                        Payments.payPortion(token, map(recipient), bips);\n                    } else {\n                        // placeholder area for command 0x07\n                        revert InvalidCommandType(command);\n                    }\n                }\n                // 0x08 <= command <= 0x0f\n                else {\n                    if (command == Commands.V2_SWAP_EXACT_IN) {\n                        // equivalent: abi.decode(inputs, (address, uint256, uint256, address[], bool))\n                        address recipient;\n                        uint256 amountIn;\n                        uint256 amountOutMin;\n                        bool payerIsUser;\n                        assembly {\n                            recipient := calldataload(inputs.offset)\n                            amountIn := calldataload(add(inputs.offset, 0x20))\n                            amountOutMin := calldataload(add(inputs.offset, 0x40))\n                            payerIsUser := calldataload(add(inputs.offset, 0x80))\n                        }\n                        address[] memory path = abi.decode(inputs.toBytes(3), (address[]));\n                        address payer = payerIsUser ? lockedBy : address(this);\n                        v2SwapExactInput(map(recipient), amountIn, amountOutMin, path, payer);\n                    } else if (command == Commands.V2_SWAP_EXACT_OUT) {\n                        // equivalent: abi.decode(inputs, (address, uint256, uint256, address[], bool))\n                        address recipient;\n                        uint256 amountOut;\n                        uint256 amountInMax;\n                        bool payerIsUser;\n                        assembly {\n                            recipient := calldataload(inputs.offset)\n                            amountOut := calldataload(add(inputs.offset, 0x20))\n                            amountInMax := calldataload(add(inputs.offset, 0x40))\n                            payerIsUser := calldataload(add(inputs.offset, 0x80))\n                        }\n                        address[] memory path = abi.decode(inputs.toBytes(3), (address[]));\n                        address payer = payerIsUser ? lockedBy : address(this);\n                        v2SwapExactOutput(map(recipient), amountOut, amountInMax, path, payer);\n                    } else if (command == Commands.PERMIT2_PERMIT) {\n                        (IAllowanceTransfer.PermitSingle memory permitSingle, bytes memory data) =\n                            abi.decode(inputs, (IAllowanceTransfer.PermitSingle, bytes));\n                        PERMIT2.permit(lockedBy, permitSingle, data);\n                    } else if (command == Commands.WRAP_ETH) {\n                        // equivalent: abi.decode(inputs, (address, uint256))\n                        address recipient;\n                        uint256 amountMin;\n                        assembly {\n                            recipient := calldataload(inputs.offset)\n                            amountMin := calldataload(add(inputs.offset, 0x20))\n                        }\n                        Payments.wrapETH(map(recipient), amountMin);\n                    } else if (command == Commands.UNWRAP_WETH) {\n                        // equivalent: abi.decode(inputs, (address, uint256))\n                        address recipient;\n                        uint256 amountMin;\n                        assembly {\n                            recipient := calldataload(inputs.offset)\n                            amountMin := calldataload(add(inputs.offset, 0x20))\n                        }\n                        Payments.unwrapWETH9(map(recipient), amountMin);\n                    } else if (command == Commands.PERMIT2_TRANSFER_FROM_BATCH) {\n                        (IAllowanceTransfer.AllowanceTransferDetails[] memory batchDetails) =\n                            abi.decode(inputs, (IAllowanceTransfer.AllowanceTransferDetails[]));\n                        permit2TransferFrom(batchDetails, lockedBy);\n                    } else if (command == Commands.BALANCE_CHECK_ERC20) {\n                        // equivalent: abi.decode(inputs, (address, address, uint256))\n                        address owner;\n                        address token;\n                        uint256 minBalance;\n                        assembly {\n                            owner := calldataload(inputs.offset)\n                            token := calldataload(add(inputs.offset, 0x20))\n                            minBalance := calldataload(add(inputs.offset, 0x40))\n                        }\n                        success = (ERC20(token).balanceOf(owner) >= minBalance);\n                        if (!success) output = abi.encodePacked(BalanceTooLow.selector);\n                    } else {\n                        // placeholder area for command 0x0f\n                        revert InvalidCommandType(command);\n                    }\n                }\n            } else {\n                // 0x10 <= command < 0x20 are unused (NFT-removed)\n                revert InvalidCommandType(command);\n            }\n        } else {\n            if (command == Commands.EXECUTE_SUB_PLAN) {\n                bytes calldata _commands = inputs.toBytes(0);\n                bytes[] calldata _inputs = inputs.toBytesArray(1);\n                (success, output) =\n                    (address(this)).call(abi.encodeWithSelector(Dispatcher.execute.selector, _commands, _inputs));\n            } else {\n                revert InvalidCommandType(command);\n            }\n        }\n    }\n\n    /// @notice Executes encoded commands along with provided inputs.\n    /// @param commands A set of concatenated commands, each 1 byte in length\n    /// @param inputs An array of byte strings containing abi encoded inputs for each command\n    function execute(bytes calldata commands, bytes[] calldata inputs) external payable virtual;\n}\n"
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n"
			},
			"lib/permit2/src/interfaces/IAllowanceTransfer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/// @title AllowanceTransfer\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\n/// @dev Requires user's token approval on the Permit2 contract\ninterface IAllowanceTransfer {\n    /// @notice Thrown when an allowance on a token has expired.\n    /// @param deadline The timestamp at which the allowed amount is no longer valid\n    error AllowanceExpired(uint256 deadline);\n\n    /// @notice Thrown when an allowance on a token has been depleted.\n    /// @param amount The maximum amount allowed\n    error InsufficientAllowance(uint256 amount);\n\n    /// @notice Thrown when too many nonces are invalidated.\n    error ExcessiveInvalidation();\n\n    /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\n    event NonceInvalidation(\n        address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce\n    );\n\n    /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\n    event Approval(\n        address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration\n    );\n\n    /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\n    event Permit(\n        address indexed owner,\n        address indexed token,\n        address indexed spender,\n        uint160 amount,\n        uint48 expiration,\n        uint48 nonce\n    );\n\n    /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\n    event Lockdown(address indexed owner, address token, address spender);\n\n    /// @notice The permit data for a token\n    struct PermitDetails {\n        // ERC20 token address\n        address token;\n        // the maximum amount allowed to spend\n        uint160 amount;\n        // timestamp at which a spender's token allowances become invalid\n        uint48 expiration;\n        // an incrementing value indexed per owner,token,and spender for each signature\n        uint48 nonce;\n    }\n\n    /// @notice The permit message signed for a single token allownce\n    struct PermitSingle {\n        // the permit data for a single token alownce\n        PermitDetails details;\n        // address permissioned on the allowed tokens\n        address spender;\n        // deadline on the permit signature\n        uint256 sigDeadline;\n    }\n\n    /// @notice The permit message signed for multiple token allowances\n    struct PermitBatch {\n        // the permit data for multiple token allowances\n        PermitDetails[] details;\n        // address permissioned on the allowed tokens\n        address spender;\n        // deadline on the permit signature\n        uint256 sigDeadline;\n    }\n\n    /// @notice The saved permissions\n    /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\n    struct PackedAllowance {\n        // amount allowed\n        uint160 amount;\n        // permission expiry\n        uint48 expiration;\n        // an incrementing value indexed per owner,token,and spender for each signature\n        uint48 nonce;\n    }\n\n    /// @notice A token spender pair.\n    struct TokenSpenderPair {\n        // the token the spender is approved\n        address token;\n        // the spender address\n        address spender;\n    }\n\n    /// @notice Details for a token transfer.\n    struct AllowanceTransferDetails {\n        // the owner of the token\n        address from;\n        // the recipient of the token\n        address to;\n        // the amount of the token\n        uint160 amount;\n        // the token to be transferred\n        address token;\n    }\n\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\n    function allowance(address, address, address) external view returns (uint160, uint48, uint48);\n\n    /// @notice Approves the spender to use up to amount of the specified token up until the expiration\n    /// @param token The token to approve\n    /// @param spender The spender address to approve\n    /// @param amount The approved amount of the token\n    /// @param expiration The timestamp at which the approval is no longer valid\n    /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\n\n    /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n    /// @param owner The owner of the tokens being approved\n    /// @param permitSingle Data signed over by the owner specifying the terms of approval\n    /// @param signature The owner's signature over the permit data\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\n\n    /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n    /// @param owner The owner of the tokens being approved\n    /// @param permitBatch Data signed over by the owner specifying the terms of approval\n    /// @param signature The owner's signature over the permit data\n    function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\n\n    /// @notice Transfer approved tokens from one address to another\n    /// @param from The address to transfer from\n    /// @param to The address of the recipient\n    /// @param amount The amount of the token to transfer\n    /// @param token The token address to transfer\n    /// @dev Requires the from address to have approved at least the desired amount\n    /// of tokens to msg.sender.\n    function transferFrom(address from, address to, uint160 amount, address token) external;\n\n    /// @notice Transfer approved tokens in a batch\n    /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\n    /// @dev Requires the from addresses to have approved at least the desired amount\n    /// of tokens to msg.sender.\n    function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\n\n    /// @notice Enables performing a \"lockdown\" of the sender's Permit2 identity\n    /// by batch revoking approvals\n    /// @param approvals Array of approvals to revoke.\n    function lockdown(TokenSpenderPair[] calldata approvals) external;\n\n    /// @notice Invalidate nonces for a given (token, spender) pair\n    /// @param token The token to invalidate nonces for\n    /// @param spender The spender to invalidate nonces for\n    /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\n    /// @dev Can't invalidate more than 2**16 nonces per transaction.\n    function invalidateNonces(address token, address spender, uint48 newNonce) external;\n}\n"
			},
			"lib/solmate/src/tokens/ERC20.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
			},
			"contracts/base/LockAndMsgSender.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {Constants} from '../libraries/Constants.sol';\n\ncontract LockAndMsgSender {\n    error ContractLocked();\n\n    address internal constant NOT_LOCKED_FLAG = address(1);\n    address internal lockedBy = NOT_LOCKED_FLAG;\n\n    modifier isNotLocked() {\n        if (msg.sender != address(this)) {\n            if (lockedBy != NOT_LOCKED_FLAG) revert ContractLocked();\n            lockedBy = msg.sender;\n            _;\n            lockedBy = NOT_LOCKED_FLAG;\n        } else {\n            _;\n        }\n    }\n\n    /// @notice Calculates the recipient address for a command\n    /// @param recipient The recipient or recipient-flag for the command\n    /// @return output The resultant recipient for the command\n    function map(address recipient) internal view returns (address) {\n        if (recipient == Constants.MSG_SENDER) {\n            return lockedBy;\n        } else if (recipient == Constants.ADDRESS_THIS) {\n            return address(this);\n        } else {\n            return recipient;\n        }\n    }\n}\n"
			},
			"contracts/modules/Payments.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {Constants} from '../libraries/Constants.sol';\nimport {RouterImmutables} from '../base/RouterImmutables.sol';\nimport {SafeTransferLib} from 'solmate/src/utils/SafeTransferLib.sol';\nimport {ERC20} from 'solmate/src/tokens/ERC20.sol';\n// NFT imports removed in ERC20-only build\n\n/// @title Payments contract\n/// @notice Performs various operations around the payment of ETH and tokens\nabstract contract Payments is RouterImmutables {\n    using SafeTransferLib for ERC20;\n    using SafeTransferLib for address;\n\n    error InsufficientToken();\n    error InsufficientETH();\n    error InvalidBips();\n    // error InvalidSpender(); // removed in ERC20-only build\n\n    uint256 internal constant FEE_BIPS_BASE = 10_000;\n\n    /// @notice Pays an amount of ETH or ERC20 to a recipient\n    /// @param token The token to pay (can be ETH using Constants.ETH)\n    /// @param recipient The address that will receive the payment\n    /// @param value The amount to pay\n    function pay(address token, address recipient, uint256 value) internal {\n        if (token == Constants.ETH) {\n            recipient.safeTransferETH(value);\n        } else {\n            if (value == Constants.CONTRACT_BALANCE) {\n                value = ERC20(token).balanceOf(address(this));\n            }\n\n            ERC20(token).safeTransfer(recipient, value);\n        }\n    }\n\n    // Approve/revoke ERC20 for NFT protocols removed in ERC20-only build\n\n    /// @notice Pays a proportion of the contract's ETH or ERC20 to a recipient\n    /// @param token The token to pay (can be ETH using Constants.ETH)\n    /// @param recipient The address that will receive payment\n    /// @param bips Portion in bips of whole balance of the contract\n    function payPortion(address token, address recipient, uint256 bips) internal {\n        if (bips == 0 || bips > FEE_BIPS_BASE) revert InvalidBips();\n        if (token == Constants.ETH) {\n            uint256 balance = address(this).balance;\n            uint256 amount = (balance * bips) / FEE_BIPS_BASE;\n            recipient.safeTransferETH(amount);\n        } else {\n            uint256 balance = ERC20(token).balanceOf(address(this));\n            uint256 amount = (balance * bips) / FEE_BIPS_BASE;\n            ERC20(token).safeTransfer(recipient, amount);\n        }\n    }\n\n    /// @notice Sweeps all of the contract's ERC20 or ETH to an address\n    /// @param token The token to sweep (can be ETH using Constants.ETH)\n    /// @param recipient The address that will receive payment\n    /// @param amountMinimum The minimum desired amount\n    function sweep(address token, address recipient, uint256 amountMinimum) internal {\n        uint256 balance;\n        if (token == Constants.ETH) {\n            balance = address(this).balance;\n            if (balance < amountMinimum) revert InsufficientETH();\n            if (balance > 0) recipient.safeTransferETH(balance);\n        } else {\n            balance = ERC20(token).balanceOf(address(this));\n            if (balance < amountMinimum) revert InsufficientToken();\n            if (balance > 0) ERC20(token).safeTransfer(recipient, balance);\n        }\n    }\n\n    // ERC721/ERC1155 sweep helpers removed in ERC20-only build\n\n    /// @notice Wraps an amount of ETH into WETH\n    /// @param recipient The recipient of the WETH\n    /// @param amount The amount to wrap (can be CONTRACT_BALANCE)\n    function wrapETH(address recipient, uint256 amount) internal {\n        if (amount == Constants.CONTRACT_BALANCE) {\n            amount = address(this).balance;\n        } else if (amount > address(this).balance) {\n            revert InsufficientETH();\n        }\n        if (amount > 0) {\n            WETH9.deposit{value: amount}();\n            if (recipient != address(this)) {\n                WETH9.transfer(recipient, amount);\n            }\n        }\n    }\n\n    /// @notice Unwraps all of the contract's WETH into ETH\n    /// @param recipient The recipient of the ETH\n    /// @param amountMinimum The minimum amount of ETH desired\n    function unwrapWETH9(address recipient, uint256 amountMinimum) internal {\n        uint256 value = WETH9.balanceOf(address(this));\n        if (value < amountMinimum) {\n            revert InsufficientETH();\n        }\n        if (value > 0) {\n            WETH9.withdraw(value);\n            if (recipient != address(this)) {\n                recipient.safeTransferETH(value);\n            }\n        }\n    }\n}\n"
			},
			"contracts/modules/uniswap/v3/BytesLib.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n/// @title Library for Bytes Manipulation\npragma solidity ^0.8.0;\n\nimport {Constants} from '../../../libraries/Constants.sol';\n\nlibrary BytesLib {\n    error SliceOutOfBounds();\n\n    /// @notice Returns the address starting at byte 0\n    /// @dev length and overflow checks must be carried out before calling\n    /// @param _bytes The input bytes string to slice\n    /// @return _address The address starting at byte 0\n    function toAddress(bytes calldata _bytes) internal pure returns (address _address) {\n        if (_bytes.length < Constants.ADDR_SIZE) revert SliceOutOfBounds();\n        assembly {\n            _address := shr(96, calldataload(_bytes.offset))\n        }\n    }\n\n    /// @notice Returns the pool details starting at byte 0\n    /// @dev length and overflow checks must be carried out before calling\n    /// @param _bytes The input bytes string to slice\n    /// @return token0 The address at byte 0\n    /// @return fee The uint24 starting at byte 20\n    /// @return token1 The address at byte 23\n    function toPool(bytes calldata _bytes) internal pure returns (address token0, uint24 fee, address token1) {\n        if (_bytes.length < Constants.V3_POP_OFFSET) revert SliceOutOfBounds();\n        assembly {\n            let firstWord := calldataload(_bytes.offset)\n            token0 := shr(96, firstWord)\n            fee := and(shr(72, firstWord), 0xffffff)\n            token1 := shr(96, calldataload(add(_bytes.offset, 23)))\n        }\n    }\n\n    /// @notice Decode the `_arg`-th element in `_bytes` as a dynamic array\n    /// @dev The decoding of `length` and `offset` is universal,\n    /// whereas the type declaration of `res` instructs the compiler how to read it.\n    /// @param _bytes The input bytes string to slice\n    /// @param _arg The index of the argument to extract\n    /// @return length Length of the array\n    /// @return offset Pointer to the data part of the array\n    function toLengthOffset(bytes calldata _bytes, uint256 _arg)\n        internal\n        pure\n        returns (uint256 length, uint256 offset)\n    {\n        uint256 relativeOffset;\n        assembly {\n            // The offset of the `_arg`-th element is `32 * arg`, which stores the offset of the length pointer.\n            // shl(5, x) is equivalent to mul(32, x)\n            let lengthPtr := add(_bytes.offset, calldataload(add(_bytes.offset, shl(5, _arg))))\n            length := calldataload(lengthPtr)\n            offset := add(lengthPtr, 0x20)\n            relativeOffset := sub(offset, _bytes.offset)\n        }\n        if (_bytes.length < length + relativeOffset) revert SliceOutOfBounds();\n    }\n\n    /// @notice Decode the `_arg`-th element in `_bytes` as `bytes`\n    /// @param _bytes The input bytes string to extract a bytes string from\n    /// @param _arg The index of the argument to extract\n    function toBytes(bytes calldata _bytes, uint256 _arg) internal pure returns (bytes calldata res) {\n        (uint256 length, uint256 offset) = toLengthOffset(_bytes, _arg);\n        assembly {\n            res.length := length\n            res.offset := offset\n        }\n    }\n\n    /// @notice Decode the `_arg`-th element in `_bytes` as `address[]`\n    /// @param _bytes The input bytes string to extract an address array from\n    /// @param _arg The index of the argument to extract\n    function toAddressArray(bytes calldata _bytes, uint256 _arg) internal pure returns (address[] calldata res) {\n        (uint256 length, uint256 offset) = toLengthOffset(_bytes, _arg);\n        assembly {\n            res.length := length\n            res.offset := offset\n        }\n    }\n\n    /// @notice Decode the `_arg`-th element in `_bytes` as `bytes[]`\n    /// @param _bytes The input bytes string to extract a bytes array from\n    /// @param _arg The index of the argument to extract\n    function toBytesArray(bytes calldata _bytes, uint256 _arg) internal pure returns (bytes[] calldata res) {\n        (uint256 length, uint256 offset) = toLengthOffset(_bytes, _arg);\n        assembly {\n            res.length := length\n            res.offset := offset\n        }\n    }\n}\n"
			},
			"contracts/modules/uniswap/v3/V3SwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {V3Path} from './V3Path.sol';\nimport {BytesLib} from './BytesLib.sol';\nimport {SafeCast} from '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\nimport {IUniswapV3Pool} from '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport {IUniswapV3SwapCallback} from '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\nimport {Constants} from '../../../libraries/Constants.sol';\nimport {RouterImmutables} from '../../../base/RouterImmutables.sol';\nimport {Permit2Payments} from '../../Permit2Payments.sol';\nimport {ERC20} from 'solmate/src/tokens/ERC20.sol';\n\n/// @title Router for Uniswap v3 Trades\nabstract contract V3SwapRouter is RouterImmutables, Permit2Payments, IUniswapV3SwapCallback {\n    using V3Path for bytes;\n    using BytesLib for bytes;\n    using SafeCast for uint256;\n\n    error V3InvalidSwap();\n    error V3TooLittleReceived();\n    error V3TooMuchRequested();\n    error V3InvalidAmountOut();\n    error V3InvalidCaller();\n\n    /// @dev Used as the placeholder value for maxAmountIn, because the computed amount in for an exact output swap\n    /// can never actually be this value\n    uint256 private constant DEFAULT_MAX_AMOUNT_IN = type(uint256).max;\n\n    /// @dev Transient storage variable used for checking slippage\n    uint256 private maxAmountInCached = DEFAULT_MAX_AMOUNT_IN;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        if (amount0Delta <= 0 && amount1Delta <= 0) revert V3InvalidSwap(); // swaps entirely within 0-liquidity regions are not supported\n        (, address payer) = abi.decode(data, (bytes, address));\n        bytes calldata path = data.toBytes(0);\n\n        // because exact output swaps are executed in reverse order, in this case tokenOut is actually tokenIn\n        (address tokenIn, uint24 fee, address tokenOut) = path.decodeFirstPool();\n\n        if (computePoolAddress(tokenIn, tokenOut, fee) != msg.sender) revert V3InvalidCaller();\n\n        (bool isExactInput, uint256 amountToPay) =\n            amount0Delta > 0 ? (tokenIn < tokenOut, uint256(amount0Delta)) : (tokenOut < tokenIn, uint256(amount1Delta));\n\n        if (isExactInput) {\n            // Pay the pool (msg.sender)\n            payOrPermit2Transfer(tokenIn, payer, msg.sender, amountToPay);\n        } else {\n            // either initiate the next swap or pay\n            if (path.hasMultiplePools()) {\n                // this is an intermediate step so the payer is actually this contract\n                path = path.skipToken();\n                _swap(-amountToPay.toInt256(), msg.sender, path, payer, false);\n            } else {\n                if (amountToPay > maxAmountInCached) revert V3TooMuchRequested();\n                // note that because exact output swaps are executed in reverse order, tokenOut is actually tokenIn\n                payOrPermit2Transfer(tokenOut, payer, msg.sender, amountToPay);\n            }\n        }\n    }\n\n    /// @notice Performs a Uniswap v3 exact input swap\n    /// @param recipient The recipient of the output tokens\n    /// @param amountIn The amount of input tokens for the trade\n    /// @param amountOutMinimum The minimum desired amount of output tokens\n    /// @param path The path of the trade as a bytes string\n    /// @param payer The address that will be paying the input\n    function v3SwapExactInput(\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMinimum,\n        bytes calldata path,\n        address payer\n    ) internal {\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n        if (amountIn == Constants.CONTRACT_BALANCE) {\n            address tokenIn = path.decodeFirstToken();\n            amountIn = ERC20(tokenIn).balanceOf(address(this));\n        }\n\n        uint256 amountOut;\n        while (true) {\n            bool hasMultiplePools = path.hasMultiplePools();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            (int256 amount0Delta, int256 amount1Delta, bool zeroForOne) = _swap(\n                amountIn.toInt256(),\n                hasMultiplePools ? address(this) : recipient, // for intermediate swaps, this contract custodies\n                path.getFirstPool(), // only the first pool is needed\n                payer, // for intermediate swaps, this contract custodies\n                true\n            );\n\n            amountIn = uint256(-(zeroForOne ? amount1Delta : amount0Delta));\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                payer = address(this);\n                path = path.skipToken();\n            } else {\n                amountOut = amountIn;\n                break;\n            }\n        }\n\n        if (amountOut < amountOutMinimum) revert V3TooLittleReceived();\n    }\n\n    /// @notice Performs a Uniswap v3 exact output swap\n    /// @param recipient The recipient of the output tokens\n    /// @param amountOut The amount of output tokens to receive for the trade\n    /// @param amountInMaximum The maximum desired amount of input tokens\n    /// @param path The path of the trade as a bytes string\n    /// @param payer The address that will be paying the input\n    function v3SwapExactOutput(\n        address recipient,\n        uint256 amountOut,\n        uint256 amountInMaximum,\n        bytes calldata path,\n        address payer\n    ) internal {\n        maxAmountInCached = amountInMaximum;\n        (int256 amount0Delta, int256 amount1Delta, bool zeroForOne) =\n            _swap(-amountOut.toInt256(), recipient, path, payer, false);\n\n        uint256 amountOutReceived = zeroForOne ? uint256(-amount1Delta) : uint256(-amount0Delta);\n\n        if (amountOutReceived != amountOut) revert V3InvalidAmountOut();\n\n        maxAmountInCached = DEFAULT_MAX_AMOUNT_IN;\n    }\n\n    /// @dev Performs a single swap for both exactIn and exactOut\n    /// For exactIn, `amount` is `amountIn`. For exactOut, `amount` is `-amountOut`\n    function _swap(int256 amount, address recipient, bytes calldata path, address payer, bool isExactIn)\n        private\n        returns (int256 amount0Delta, int256 amount1Delta, bool zeroForOne)\n    {\n        (address tokenIn, uint24 fee, address tokenOut) = path.decodeFirstPool();\n\n        zeroForOne = isExactIn ? tokenIn < tokenOut : tokenOut < tokenIn;\n\n        (amount0Delta, amount1Delta) = IUniswapV3Pool(computePoolAddress(tokenIn, tokenOut, fee)).swap(\n            recipient,\n            zeroForOne,\n            amount,\n            (zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1),\n            abi.encode(path, payer)\n        );\n    }\n\n    function computePoolAddress(address tokenA, address tokenB, uint24 fee) private view returns (address pool) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        pool = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex'ff',\n                            UNISWAP_V3_FACTORY,\n                            keccak256(abi.encode(tokenA, tokenB, fee)),\n                            UNISWAP_V3_POOL_INIT_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"
			},
			"contracts/modules/uniswap/v2/V2SwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IUniswapV2Pair} from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\nimport {UniswapV2Library} from './UniswapV2Library.sol';\nimport {RouterImmutables} from '../../../base/RouterImmutables.sol';\nimport {Payments} from '../../Payments.sol';\nimport {Permit2Payments} from '../../Permit2Payments.sol';\nimport {Constants} from '../../../libraries/Constants.sol';\nimport {ERC20} from 'solmate/src/tokens/ERC20.sol';\n\n/// @title Router for Uniswap v2 Trades\nabstract contract V2SwapRouter is RouterImmutables, Permit2Payments {\n    error V2TooLittleReceived();\n    error V2TooMuchRequested();\n    error V2InvalidPath();\n\n    function _v2Swap(address[] memory path, address recipient, address pair) private {\n        unchecked {\n            if (path.length < 2) revert V2InvalidPath();\n\n            // cached to save on duplicate operations\n            (address token0,) = UniswapV2Library.sortTokens(path[0], path[1]);\n            uint256 finalPairIndex = path.length - 1;\n            uint256 penultimatePairIndex = finalPairIndex - 1;\n            for (uint256 i; i < finalPairIndex; i++) {\n                (address input, address output) = (path[i], path[i + 1]);\n                (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) =\n                    input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n                uint256 amountInput = ERC20(input).balanceOf(pair) - reserveInput;\n                uint256 amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\n                (uint256 amount0Out, uint256 amount1Out) =\n                    input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n                address nextPair;\n                (nextPair, token0) = i < penultimatePairIndex\n                    ? UniswapV2Library.pairAndToken0For(\n                        UNISWAP_V2_FACTORY, UNISWAP_V2_PAIR_INIT_CODE_HASH, output, path[i + 2]\n                    )\n                    : (recipient, address(0));\n                IUniswapV2Pair(pair).swap(amount0Out, amount1Out, nextPair, new bytes(0));\n                pair = nextPair;\n            }\n        }\n    }\n\n    /// @notice Performs a Uniswap v2 exact input swap\n    /// @param recipient The recipient of the output tokens\n    /// @param amountIn The amount of input tokens for the trade\n    /// @param amountOutMinimum The minimum desired amount of output tokens\n    /// @param path The path of the trade as an array of token addresses\n    /// @param payer The address that will be paying the input\n    function v2SwapExactInput(\n        address recipient,\n        uint256 amountIn,\n        uint256 amountOutMinimum,\n        address[] memory path,\n        address payer\n    ) internal {\n        address firstPair =\n            UniswapV2Library.pairFor(UNISWAP_V2_FACTORY, UNISWAP_V2_PAIR_INIT_CODE_HASH, path[0], path[1]);\n        if (\n            amountIn != Constants.ALREADY_PAID // amountIn of 0 to signal that the pair already has the tokens\n        ) {\n            payOrPermit2Transfer(path[0], payer, firstPair, amountIn);\n        }\n\n        ERC20 tokenOut = ERC20(path[path.length - 1]);\n        uint256 balanceBefore = tokenOut.balanceOf(recipient);\n\n        _v2Swap(path, recipient, firstPair);\n\n        uint256 amountOut = tokenOut.balanceOf(recipient) - balanceBefore;\n        if (amountOut < amountOutMinimum) revert V2TooLittleReceived();\n    }\n\n    /// @notice Performs a Uniswap v2 exact output swap\n    /// @param recipient The recipient of the output tokens\n    /// @param amountOut The amount of output tokens to receive for the trade\n    /// @param amountInMaximum The maximum desired amount of input tokens\n    /// @param path The path of the trade as an array of token addresses\n    /// @param payer The address that will be paying the input\n    function v2SwapExactOutput(\n        address recipient,\n        uint256 amountOut,\n        uint256 amountInMaximum,\n        address[] memory path,\n        address payer\n    ) internal {\n        (uint256 amountIn, address firstPair) =\n            UniswapV2Library.getAmountInMultihop(UNISWAP_V2_FACTORY, UNISWAP_V2_PAIR_INIT_CODE_HASH, amountOut, path);\n        if (amountIn > amountInMaximum) revert V2TooMuchRequested();\n\n        payOrPermit2Transfer(path[0], payer, firstPair, amountIn);\n        _v2Swap(path, recipient, firstPair);\n    }\n}\n"
			},
			"contracts/modules/Permit2Payments.sol": {
				"content": "pragma solidity ^0.8.17;\n\nimport {IAllowanceTransfer} from 'lib/permit2/src/interfaces/IAllowanceTransfer.sol';\nimport {SafeCast160} from 'lib/permit2/src/libraries/SafeCast160.sol';\nimport {Payments} from './Payments.sol';\nimport {Constants} from '../libraries/Constants.sol';\nimport {RouterImmutables} from '../base/RouterImmutables.sol';\n\n/// @title Payments through Permit2\n/// @notice Performs interactions with Permit2 to transfer tokens\nabstract contract Permit2Payments is Payments {\n    using SafeCast160 for uint256;\n\n    error FromAddressIsNotOwner();\n\n    /// @notice Performs a transferFrom on Permit2\n    /// @param token The token to transfer\n    /// @param from The address to transfer from\n    /// @param to The recipient of the transfer\n    /// @param amount The amount to transfer\n    function permit2TransferFrom(address token, address from, address to, uint160 amount) internal {\n        PERMIT2.transferFrom(from, to, amount, token);\n    }\n\n    /// @notice Performs a batch transferFrom on Permit2\n    /// @param batchDetails An array detailing each of the transfers that should occur\n    function permit2TransferFrom(IAllowanceTransfer.AllowanceTransferDetails[] memory batchDetails, address owner)\n        internal\n    {\n        uint256 batchLength = batchDetails.length;\n        for (uint256 i = 0; i < batchLength; ++i) {\n            if (batchDetails[i].from != owner) revert FromAddressIsNotOwner();\n        }\n        PERMIT2.transferFrom(batchDetails);\n    }\n\n    /// @notice Either performs a regular payment or transferFrom on Permit2, depending on the payer address\n    /// @param token The token to transfer\n    /// @param payer The address to pay for the transfer\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount to transfer\n    function payOrPermit2Transfer(address token, address payer, address recipient, uint256 amount) internal {\n        if (payer == address(this)) pay(token, recipient, amount);\n        else permit2TransferFrom(token, payer, recipient, amount.toUint160());\n    }\n}\n"
			},
			"contracts/libraries/Constants.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.17;\n\nimport {IWETH9} from '../interfaces/external/IWETH9.sol';\n\n/// @title Constant state\n/// @notice Constant state used by the Universal Router\nlibrary Constants {\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used as an input\n    /// This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit.\n    uint256 internal constant CONTRACT_BALANCE = 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n    /// @dev Used for identifying cases when a v2 pair has already received input tokens\n    uint256 internal constant ALREADY_PAID = 0;\n\n    /// @dev Used as a flag for identifying the transfer of ETH instead of a token\n    address internal constant ETH = address(0);\n\n    /// @dev Used as a flag for identifying that msg.sender should be used, saves gas by sending more 0 bytes\n    address internal constant MSG_SENDER = address(1);\n\n    /// @dev Used as a flag for identifying address(this) should be used, saves gas by sending more 0 bytes\n    address internal constant ADDRESS_THIS = address(2);\n\n    /// @dev The length of the bytes encoded address\n    uint256 internal constant ADDR_SIZE = 20;\n\n    /// @dev The length of the bytes encoded fee\n    uint256 internal constant V3_FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address (20) and pool fee (3)\n    uint256 internal constant NEXT_V3_POOL_OFFSET = ADDR_SIZE + V3_FEE_SIZE;\n\n    /// @dev The offset of an encoded pool key\n    /// Token (20) + Fee (3) + Token (20) = 43\n    uint256 internal constant V3_POP_OFFSET = NEXT_V3_POOL_OFFSET + ADDR_SIZE;\n\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 internal constant MULTIPLE_V3_POOLS_MIN_LENGTH = V3_POP_OFFSET + NEXT_V3_POOL_OFFSET;\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
			},
			"contracts/modules/uniswap/v3/V3Path.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.6.0;\n\nimport {BytesLib} from './BytesLib.sol';\nimport {Constants} from '../../../libraries/Constants.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary V3Path {\n    using BytesLib for bytes;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes calldata path) internal pure returns (bool) {\n        return path.length >= Constants.MULTIPLE_V3_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return fee The fee level of the pool\n    /// @return tokenB The second token of the given pool\n    function decodeFirstPool(bytes calldata path) internal pure returns (address, uint24, address) {\n        return path.toPool();\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes calldata path) internal pure returns (bytes calldata) {\n        return path[:Constants.V3_POP_OFFSET];\n    }\n\n    function decodeFirstToken(bytes calldata path) internal pure returns (address tokenA) {\n        tokenA = path.toAddress();\n    }\n\n    /// @notice Skips a token + fee element\n    /// @param path The swap path\n    function skipToken(bytes calldata path) internal pure returns (bytes calldata) {\n        return path[Constants.NEXT_V3_POOL_OFFSET:];\n    }\n}\n"
			},
			"contracts/modules/uniswap/v2/UniswapV2Library.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.0;\n\nimport {IUniswapV2Pair} from '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\n\n/// @title Uniswap v2 Helper Library\n/// @notice Calculates the recipient address for a command\nlibrary UniswapV2Library {\n    error InvalidReserves();\n    error InvalidPath();\n\n    /// @notice Calculates the v2 address for a pair without making any external calls\n    /// @param factory The address of the v2 factory\n    /// @param initCodeHash The hash of the pair initcode\n    /// @param tokenA One of the tokens in the pair\n    /// @param tokenB The other token in the pair\n    /// @return pair The resultant v2 pair address\n    function pairFor(address factory, bytes32 initCodeHash, address tokenA, address tokenB)\n        internal\n        pure\n        returns (address pair)\n    {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = pairForPreSorted(factory, initCodeHash, token0, token1);\n    }\n\n    /// @notice Calculates the v2 address for a pair and the pair's token0\n    /// @param factory The address of the v2 factory\n    /// @param initCodeHash The hash of the pair initcode\n    /// @param tokenA One of the tokens in the pair\n    /// @param tokenB The other token in the pair\n    /// @return pair The resultant v2 pair address\n    /// @return token0 The token considered token0 in this pair\n    function pairAndToken0For(address factory, bytes32 initCodeHash, address tokenA, address tokenB)\n        internal\n        pure\n        returns (address pair, address token0)\n    {\n        address token1;\n        (token0, token1) = sortTokens(tokenA, tokenB);\n        pair = pairForPreSorted(factory, initCodeHash, token0, token1);\n    }\n\n    /// @notice Calculates the v2 address for a pair assuming the input tokens are pre-sorted\n    /// @param factory The address of the v2 factory\n    /// @param initCodeHash The hash of the pair initcode\n    /// @param token0 The pair's token0\n    /// @param token1 The pair's token1\n    /// @return pair The resultant v2 pair address\n    function pairForPreSorted(address factory, bytes32 initCodeHash, address token0, address token1)\n        private\n        pure\n        returns (address pair)\n    {\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), initCodeHash)\n                    )\n                )\n            )\n        );\n    }\n\n    /// @notice Calculates the v2 address for a pair and fetches the reserves for each token\n    /// @param factory The address of the v2 factory\n    /// @param initCodeHash The hash of the pair initcode\n    /// @param tokenA One of the tokens in the pair\n    /// @param tokenB The other token in the pair\n    /// @return pair The resultant v2 pair address\n    /// @return reserveA The reserves for tokenA\n    /// @return reserveB The reserves for tokenB\n    function pairAndReservesFor(address factory, bytes32 initCodeHash, address tokenA, address tokenB)\n        private\n        view\n        returns (address pair, uint256 reserveA, uint256 reserveB)\n    {\n        address token0;\n        (pair, token0) = pairAndToken0For(factory, initCodeHash, tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    /// @notice Given an input asset amount returns the maximum output amount of the other asset\n    /// @param amountIn The token input amount\n    /// @param reserveIn The reserves available of the input token\n    /// @param reserveOut The reserves available of the output token\n    /// @return amountOut The output amount of the output token\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\n        internal\n        pure\n        returns (uint256 amountOut)\n    {\n        if (reserveIn == 0 || reserveOut == 0) revert InvalidReserves();\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    /// @notice Returns the input amount needed for a desired output amount in a single-hop trade\n    /// @param amountOut The desired output amount\n    /// @param reserveIn The reserves available of the input token\n    /// @param reserveOut The reserves available of the output token\n    /// @return amountIn The input amount of the input token\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\n        internal\n        pure\n        returns (uint256 amountIn)\n    {\n        if (reserveIn == 0 || reserveOut == 0) revert InvalidReserves();\n        uint256 numerator = reserveIn * amountOut * 1000;\n        uint256 denominator = (reserveOut - amountOut) * 997;\n        amountIn = (numerator / denominator) + 1;\n    }\n\n    /// @notice Returns the input amount needed for a desired output amount in a multi-hop trade\n    /// @param factory The address of the v2 factory\n    /// @param initCodeHash The hash of the pair initcode\n    /// @param amountOut The desired output amount\n    /// @param path The path of the multi-hop trade\n    /// @return amount The input amount of the input token\n    /// @return pair The first pair in the trade\n    function getAmountInMultihop(address factory, bytes32 initCodeHash, uint256 amountOut, address[] memory path)\n        internal\n        view\n        returns (uint256 amount, address pair)\n    {\n        if (path.length < 2) revert InvalidPath();\n        amount = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            uint256 reserveIn;\n            uint256 reserveOut;\n\n            (pair, reserveIn, reserveOut) = pairAndReservesFor(factory, initCodeHash, path[i - 1], path[i]);\n            amount = getAmountIn(amount, reserveIn, reserveOut);\n        }\n    }\n\n    /// @notice Sorts two tokens to return token0 and token1\n    /// @param tokenA The first token to sort\n    /// @param tokenB The other token to sort\n    /// @return token0 The smaller token by address value\n    /// @return token1 The larger token by address value\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n}\n"
			},
			"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
				"content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
			},
			"lib/solmate/src/utils/SafeTransferLib.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			},
			"lib/permit2/src/libraries/SafeCast160.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nlibrary SafeCast160 {\n    /// @notice Thrown when a valude greater than type(uint160).max is cast to uint160\n    error UnsafeCast();\n\n    /// @notice Safely casts uint256 to uint160\n    /// @param value The uint256 to be cast\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) revert UnsafeCast();\n        return uint160(value);\n    }\n}\n"
			}
		},
		"settings": {
			"remappings": [
				"@openzeppelin/=node_modules/@openzeppelin/",
				"@uniswap/=node_modules/@uniswap/",
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/",
				"forge-std/=lib/forge-std/src/",
				"openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/",
				"permit2/=lib/permit2/",
				"solmate/=lib/solmate/"
			],
			"optimizer": {
				"enabled": true,
				"runs": 1000000
			},
			"viaIR": true,
			"evmVersion": "london",
			"metadata": {
				"bytecodeHash": "ipfs"
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode",
						"evm.deployedBytecode",
						"devdoc",
						"userdoc",
						"metadata"
					]
				}
			},
			"libraries": {}
		}
	},
	"output": {
		"contracts": {
			"contracts/UniversalRouter.sol": {
				"UniversalRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "permit2",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "weth9",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "v2Factory",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "v3Factory",
											"type": "address"
										},
										{
											"internalType": "bytes32",
											"name": "pairInitCodeHash",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "poolInitCodeHash",
											"type": "bytes32"
										}
									],
									"internalType": "struct RouterParameters",
									"name": "params",
									"type": "tuple"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "BalanceTooLow",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ContractLocked",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ETHNotAccepted",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "commandIndex",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "message",
									"type": "bytes"
								}
							],
							"name": "ExecutionFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FromAddressIsNotOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientETH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidBips",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "commandType",
									"type": "uint256"
								}
							],
							"name": "InvalidCommandType",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPath",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidReserves",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidRouterParameters",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "LengthMismatch",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReservedBitSet",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SliceOutOfBounds",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransactionDeadlinePassed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UnsafeCast",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2InvalidPath",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2TooLittleReceived",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2TooMuchRequested",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidAmountOut",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidSwap",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3TooLittleReceived",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3TooMuchRequested",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "commands",
									"type": "bytes"
								},
								{
									"internalType": "bytes[]",
									"name": "inputs",
									"type": "bytes[]"
								}
							],
							"name": "execute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "commands",
									"type": "bytes"
								},
								{
									"internalType": "bytes[]",
									"name": "inputs",
									"type": "bytes[]"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "execute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"execute(bytes,bytes[])": {
								"params": {
									"commands": "A set of concatenated commands, each 1 byte in length",
									"inputs": "An array of byte strings containing abi encoded inputs for each command"
								}
							},
							"execute(bytes,bytes[],uint256)": {
								"params": {
									"commands": "A set of concatenated commands, each 1 byte in length",
									"deadline": "The deadline by which the transaction must be executed",
									"inputs": "An array of byte strings containing abi encoded inputs for each command"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {
								"abi_decode_address_fromMemory": {
									"entryPoint": 590,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "610140346200024957601f6200383938819003918201601f19168301916001600160401b03918284118585101762000233578160c09286926040968752833981010312620002495781519060c08201908111828210176200023357825262000067836200024e565b80825262000078602085016200024e565b9360208301928584526200008e8583016200024e565b9385820191858352620000a4606085016200024e565b97606082019589875260a06080870151966080850197885201519960a084019a8b5260018060a01b0398898093161593841562000227575b5083156200021b575b5082156200020f575b5050620001e757835115801562000205575b620001e757858151163b158015620001f8575b620001e75751851660a05251841660805251831660c0525160e05251166101009081529151610120908152600019600055600180546001600160a01b0319168117905590516135d59290919083620002648439608051838181611bd601528181611d8f01528181611df90152611e69015260a051838181610dc601528181610ec001528181611a7001528181611fe60152612a00015260c05183818161137c015281816117570152612edd015260e05183818161135b015281816117360152612ebc015251826133cb015251816133a90152f35b865163af68366360e01b8152600490fd5b50858251163b1562000113565b5087511562000100565b161590508638620000ee565b821615925038620000e5565b831615935038620000dc565b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b0382168203620002495756fe604060c0815260048036101561001f575b5050361561001d57600080fd5b005b600091823560e01c806324856bc3146103fe5780633593564c146102c35763fa461e331461004d5750610010565b346102bf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bf57813590602435926044359067ffffffffffffffff918281116102bb576100a590369083016104c5565b919092878613908115806102b1575b610289578385018686820312610285578535918211610285576100d89186016127b3565b5060208401359373ffffffffffffffffffffffffffffffffffffffff938486168096036102855761010891613126565b959097602b891061025d5786359260178460601c98019561013762ffffff883560601c9660481c16868b613314565b33911603610235571561022b57508186105b15610161575050505061015e93503391612acc565b80f35b939594509192909190604287106101e557505050836017116101e1577f80000000000000000000000000000000000000000000000000000000000000008210156101e1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96101db9401916101d63391613164565b613191565b50505080f35b8480fd5b919695509293915084548411610203575061015e9394503391612acc565b8590517f739dbe52000000000000000000000000000000000000000000000000000000008152fd5b9650858210610149565b8483517f32b13d91000000000000000000000000000000000000000000000000000000008152fd5b8382517f3b99b53d000000000000000000000000000000000000000000000000000000008152fd5b8980fd5b8286517f316cf0eb000000000000000000000000000000000000000000000000000000008152fd5b50888813156100b4565b8680fd5b8280fd5b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bf5767ffffffffffffffff82358181116101e15761030d90369085016104c5565b916024359081116103fa5761032590369086016104f8565b92909160443542116103d2573330146103c3576001958654958773ffffffffffffffffffffffffffffffffffffffff88160361039d5750509185949391610394937fffffffffffffffffffffffff00000000000000000000000000000000000000009586339116178755610587565b81541617905580f35b517f6f5ffb7e000000000000000000000000000000000000000000000000000000008152fd5b909192935061015e9450610587565b8585517f5bf6f916000000000000000000000000000000000000000000000000000000008152fd5b8580fd5b50807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bf5767ffffffffffffffff82358181116101e15761044790369085016104c5565b916024359081116103fa5761045f90369086016104f8565b9290913330146103c3576001958654958773ffffffffffffffffffffffffffffffffffffffff88160361039d5750509185949391610394937fffffffffffffffffffffffff00000000000000000000000000000000000000009586339116178755610587565b9181601f840112156104f35782359167ffffffffffffffff83116104f357602083818601950101116104f357565b600080fd5b9181601f840112156104f35782359167ffffffffffffffff83116104f3576020808501948460051b0101116104f357565b919082519283825260005b8481106105735750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610534565b9392918160805260a05281036125df579160005b6080518110156125d957838110156125aa5760a051917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1833603018260051b84013512156104f3578160051b8301358301803567ffffffffffffffff81116104f35760209036039101136104f3576060927f40000000000000000000000000000000000000000000000000000000000000008383013516612580576001908284013560f81c603f1660208110156123275760108110156122f6576008808210156112a4575080610afe575061067f8460051b82013560a05101602081359101613147565b90978560051b83013560a051019760a0890135600014610af75773ffffffffffffffffffffffffffffffffffffffff60015416995b60406106c360208c013561287c565b9a01359084819c917f80000000000000000000000000000000000000000000000000000000000000008414610a3d575b50949b9450905b7f80000000000000000000000000000000000000000000000000000000000000008110156104f35760428510610a3757305b85602b116104f3578c90601782013560601c9262ffffff8335958660601c9661077173ffffffffffffffffffffffffffffffffffffffff93849260481c16888a613314565b169286881015610a1b57826401000276a4925b602b60405198604060208b01528160608b015260808a0137600060ab89015216604087015260a086528560c081011067ffffffffffffffff60c0880111176109ec578260409560c0880187527f128acb080000000000000000000000000000000000000000000000000000000060c08901521660c487015286881060e48701526101048601521661012484015260a061014484015260c08301907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408461084e610164820182610529565b030190600060c08601915af19182156109e0576000918293610998575b5061087c9310156109915750613164565b604284106108be57309a846017116104f3576017019a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe99490940193906106fa565b9197959950975060609150918560051b013560a05101013511610967575b158061093a575b6108f3575060010192909261059b565b9061093660409283519384937f2c4029e9000000000000000000000000000000000000000000000000000000008552600485015260248401526044830190610529565b0390fd5b507f80000000000000000000000000000000000000000000000000000000000000008286013516156108e3565b60046040517f39d35496000000000000000000000000000000000000000000000000000000008152fd5b9050613164565b9250906040833d6040116109d8575b816109b760409360c08401612694565b810103126109d5575060c082015160e090920151919061087c61086b565b80fd5b3d91506109a7565b6040513d6000823e3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8273fffd8963efd1fc6a506488495d951d5263988d2592610784565b8a61072c565b60149192935010610acd576020602491604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301523560601c5afa9081156109e057600091610a9b575b509038806106f3565b906020823d602011610ac5575b81610ab560209383612694565b810103126109d557505138610a92565b3d9150610aa8565b60046040517f3b99b53d000000000000000000000000000000000000000000000000000000008152fd5b30996106b4565b9296949260018103610c2b57508360051b81013560a05101604091610b2c8383013592602081359101613147565b90918760051b013560a051019160a0830135600014610c245773ffffffffffffffffffffffffffffffffffffffff60015416915b6060610b6f602086013561287c565b9401356000557f80000000000000000000000000000000000000000000000000000000000000008510156104f357610baa936101d686613164565b90919015610c155750610bbc90613164565b03610bec57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000555b6108dc565b600490517fd4e0248e000000000000000000000000000000000000000000000000000000008152fd5b610c1f9150613164565b610bbc565b3091610b60565b60028103610c7a5750610be79073ffffffffffffffffffffffffffffffffffffffff60015416908560051b013560a0510190610c6a604083013561287c565b90602060608401359301356129e5565b60038103610f8557508360051b81013560a051019081358201906040838303126104f357602083013567ffffffffffffffff81116104f35760608185018403126104f35760405193610ccb85612678565b6020828201013567ffffffffffffffff81116104f3578282010160208501603f820112156104f3576020810135610d018161270f565b91610d0f6040519384612694565b81835260208301906020880160408460071b830101116104f35760408101915b60408460071b8301018310610f69575050505090606092918652610d57604083830101612727565b602087015201013560408401528560051b013560a0510160408101359167ffffffffffffffff83116104f357610d949260208092019201016127b3565b5073ffffffffffffffffffffffffffffffffffffffff600154169073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156104f357604051917f2a2d80d10000000000000000000000000000000000000000000000000000000083526004830152606060248301528160c48101825190606060648401528151809152602060e484019201906000905b808210610f025750505060209060408473ffffffffffffffffffffffffffffffffffffffff846000970151166084860152015160a484015283838203917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc830160448601525201818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156109e057610ef3575b506108dc565b610efc90612664565b38610eed565b91949350916020608082610f5a600194895160609073ffffffffffffffffffffffffffffffffffffffff80825116845260208201511660208401528165ffffffffffff91826040820151166040860152015116910152565b01950192018593949291610e40565b6020608091610f7a828c018661275b565b815201920191610d2f565b600491908281036110f157508460051b013560a0510190606082013590604073ffffffffffffffffffffffffffffffffffffffff6020610fc78387013561287c565b950135168061101e575047928310610ff857505080610fe8575b50506108dc565b610ff191613480565b3880610fe1565b517f6a12f104000000000000000000000000000000000000000000000000000000008152fd5b9391908051937f70a082310000000000000000000000000000000000000000000000000000000085523083860152602085602481895afa9485156110e6576000956110b2575b50841061108c5750508161107b575b5050506108dc565b611084926134ee565b388080611073565b517f675cae38000000000000000000000000000000000000000000000000000000008152fd5b90946020823d6020116110de575b816110cd60209383612694565b810103126109d55750519338611064565b3d91506110c0565b82513d6000823e3d90fd5b600581036111255750610be791508460051b013560a05101611116604082013561287c565b602060608301359201356128b8565b6006810361127457508460051b81013560a0510160608101359061114d60408092013561287c565b9282158015611269575b61124157602073ffffffffffffffffffffffffffffffffffffffff918960051b013560a051010135169384156000146111a5575050610be7925061119e6127109147612999565b0490613480565b8151907f70a082310000000000000000000000000000000000000000000000000000000082523090820152602081602481885afa9182156112375750600091611203575b506111fc610be794939261271092612999565b04916134ee565b906020823d60201161122f575b8161121d60209383612694565b810103126109d55750516111fc6111e9565b3d9150611210565b513d6000823e3d90fd5b8482517fdeaa01e6000000000000000000000000000000000000000000000000000000008152fd5b506127108311611157565b82602491604051917fd76a1e9e000000000000000000000000000000000000000000000000000000008352820152fd5b93979593810361158657508360051b81013560a05101906040906112dd6112d48385013594602081359101613147565b908101906127fa565b908660051b81013560a051019060a082013560001461157a5761131d602073ffffffffffffffffffffffffffffffffffffffff60015416935b013561287c565b9473ffffffffffffffffffffffffffffffffffffffff926113a06113588561134488612a8e565b51168661135089612a9b565b511690612c3e565b907f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612b36565b91828161155d575b50505083517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161152e576113e2849186612aab565b5116938551937f70a082310000000000000000000000000000000000000000000000000000000090818652881692600498848a88015260249360208886818c5afa978815611523576000986114ed575b509161144391602096959493612cb7565b8751968793849283528a8301525afa9283156114e2576000936114ad575b5090606061147b928960051b013560a05101013592612abf565b106114875750506108dc565b517f849eaf98000000000000000000000000000000000000000000000000000000008152fd5b90926020823d6020116114da575b816114c860209383612694565b810103126109d5575051916060611461565b3d91506114bb565b84513d6000823e3d90fd5b90976020823d60201161151b575b8161150860209383612694565b810103126109d557505196611443611432565b3d91506114fb565b8a513d6000823e3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b611572928661156b89612a8e565b5116612acc565b3880826113a8565b61131d60203093611316565b600981036119a057506115ab6112d48560051b83013560a05101602081359101613147565b8460051b82013560a051019060a0820135600014611994576115e9602073ffffffffffffffffffffffffffffffffffffffff6001541693013561287c565b90600092600282511061196a5760408860051b86013560a051010135948251807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81011161152e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01805b6116c557506060908960051b013560a051010135851161169b57610be794846116969273ffffffffffffffffffffffffffffffffffffffff61156b86612a8e565b612cb7565b60046040517f8ab0bc16000000000000000000000000000000000000000000000000000000008152fd5b9594507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860186811161152e5761177b956117189173ffffffffffffffffffffffffffffffffffffffff92839187612aab565b511690611731836117298b89612aab565b511683612c3e565b8199917f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612b36565b91604051907f0902f1ac00000000000000000000000000000000000000000000000000000000825260049460608387818489165afa9283156109e0576000908194611936575b506dffffffffffffffffffffffffffff80911693169a16146000146119305797915b9780158015611928575b6118ff57816117fb91612999565b916103e8928381029381850414901517156118d1579061181a91612abf565b906103e5918281029281840414901517156118a35790611839916129ac565b9060018201809211611875575095801561152e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180611655565b6011907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6011837f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b836040517f7b9c8916000000000000000000000000000000000000000000000000000000008152fd5b5082156117ed565b916117e3565b905061195a91935060603d8111611963575b6119528183612694565b810190612c81565b509290386117c1565b503d611948565b60046040517f20db8267000000000000000000000000000000000000000000000000000000008152fd5b6115e960203093611316565b600a8103611b5d57508360051b81013560a0510180358101906020820191039060e0918281126104f35760c08091126104f3576040928351926119e284612678565b6119f98160208b60051b89013560a051010161275b565b8452611a1060a08a60051b88013581510101612727565b9560208501968752858501938a60051b82013560a05101013584528960051b013560a05101918201359167ffffffffffffffff83116104f357611a5692016020016127b3565b9073ffffffffffffffffffffffffffffffffffffffff92837f000000000000000000000000000000000000000000000000000000000000000016918460015416833b156104f357611b47611b27956000979388948a519b8c998a9889977f2b67b570000000000000000000000000000000000000000000000000000000008952600489015260248801905160609073ffffffffffffffffffffffffffffffffffffffff80825116845260208201511660208401528165ffffffffffff91826040820151166040860152015116910152565b511660a48501525160c484015261010060e4840152610104830190610529565b03925af19081156112375750610ef357506108dc565b600b8103611d2457508360051b013560a051016040611b8360208284013593013561287c565b91807f80000000000000000000000000000000000000000000000000000000000000008103611cf157505047915b82611bbe575050506108dc565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690813b156104f3578351927fd0e30db000000000000000000000000000000000000000000000000000000000845260049360008186818a885af18015611ce657611cd7575b501690308203611c4d575b5050611073565b6020926000604492865197889586947fa9059cbb00000000000000000000000000000000000000000000000000000000865285015260248401525af19081156112375750611c9f575b80808080611c46565b6020813d602011611ccf575b81611cb860209383612694565b810103126104f35751801515036104f35738611c96565b3d9150611cab565b611ce090612664565b38611c3b565b86513d6000823e3d90fd5b929092471015611bb157600482517f6a12f104000000000000000000000000000000000000000000000000000000008152fd5b600c8103611f2b5750611d4460208560051b83013560a05101013561287c565b90604051907f70a0823100000000000000000000000000000000000000000000000000000000825230600483015260208260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156109e057600092611ef6575b506040908660051b013560a0510101358110611ecc5780611de25750506108dc565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156104f3576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081528160048201526000816024818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156109e057611ebd575b5073ffffffffffffffffffffffffffffffffffffffff82163014610fe157610ff191613480565b611ec690612664565b38611e96565b60046040517f6a12f104000000000000000000000000000000000000000000000000000000008152fd5b90916020823d602011611f23575b81611f1160209383612694565b810103126109d5575051906040611dc0565b3d9150611f04565b600d810361218a57508360051b013560a051018035810160208101916020818303126104f35760208101359067ffffffffffffffff82116104f3570182603f820112156104f357602081013590611f818261270f565b93604093611f9185519687612694565b838652602086019285849560071b8201019283116104f3578501925b828410612128575050505073ffffffffffffffffffffffffffffffffffffffff90816001541684519060005b8281106120bc57505050817f00000000000000000000000000000000000000000000000000000000000000001691823b156104f35783517f0d58b1db000000000000000000000000000000000000000000000000000000008152602060048201529451602486018190528592604484019290916000915b81831061207857505050509181600081819503925af19081156112375750610ef357506108dc565b91938395506080602091846060600195975182815116845282868201511686850152828d820151168d85015201511660608201520195019301909187949392612050565b81856120c8838a612aab565b515116036120ff577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461152e57600101611fd9565b600486517fe7002877000000000000000000000000000000000000000000000000000000008152fd5b6080602085840301126104f3576020608091875161214581612648565b61214e87612727565b815261215b838801612727565b8382015261216a898801612727565b8982015261217a60608801612727565b6060820152815201930192611fad565b909150600e81036122f657506040908151907f70a082310000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff9160208284828a60051b85013560a0510101351694600495868301526024968791898c60051b87013560a051010135165afa9182156122eb576000926122b6575b506060908760051b013560a0510101351192831593612237575050506108dc565b80517fa328167200000000000000000000000000000000000000000000000000000000602082015282815293945083810192909167ffffffffffffffff84118585101761228a5750505290388080611073565b6041907f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b90916020823d6020116122e3575b816122d160209383612694565b810103126109d5575051906060612216565b3d91506122c4565b85513d6000823e3d90fd5b602490604051907fd76a1e9e0000000000000000000000000000000000000000000000000000000082526004820152fd5b91969395949291602181036122f657506123508660051b82013560a05101602081359101613126565b6123778860059993991b84013560a051016020806040830135830192830301910135613119565b8260051b84013560a051013510610acd576123ca90604097949751987f24856bc30000000000000000000000000000000000000000000000000000000060208b0152604060248b015260648a0191612609565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc88820301604489015260208260051b84013560a051016040810135010135815260208101968260051b84013560a05101946040602080828901358901013560051b85010196818101350101906000965b60208660051b88013560a0510160408101350101358810156124fd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858203018b528560051b87013560a0510160408101350183357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1823603018112156104f3570189810191906040013567ffffffffffffffff81116104f35780360383136104f3578e9260209283926124ef92612609565b94019b01970196999161243b565b9150999397985083919a50600095508594506125409250037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612694565b60208151910182305af1903d1561257b57503d61255c816126d5565b9061256a6040519283612694565b81523d6000602083013e5b906108dc565b612575565b60046040517fe68ec04c000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b50509050565b60046040517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b6080810190811067ffffffffffffffff8211176109ec57604052565b67ffffffffffffffff81116109ec57604052565b6060810190811067ffffffffffffffff8211176109ec57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109ec57604052565b67ffffffffffffffff81116109ec57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b67ffffffffffffffff81116109ec5760051b60200190565b359073ffffffffffffffffffffffffffffffffffffffff821682036104f357565b359065ffffffffffff821682036104f357565b91908260809103126104f35760405161277381612648565b60606127ae81839561278481612727565b855261279260208201612727565b60208601526127a360408201612748565b604086015201612748565b910152565b81601f820112156104f3578035906127ca826126d5565b926127d86040519485612694565b828452602083830101116104f357816000926020809301838601378301015290565b60209081818403126104f35780359067ffffffffffffffff82116104f357019180601f840112156104f35782356128308161270f565b9361283e6040519586612694565b818552838086019260051b8201019283116104f3578301905b828210612865575050505090565b83809161287184612727565b815201910190612857565b73ffffffffffffffffffffffffffffffffffffffff90808216600181036128a65750506001541690565b9091506002036128b557503090565b90565b9092919073ffffffffffffffffffffffffffffffffffffffff16806128e457506128e29192613480565b565b7f80000000000000000000000000000000000000000000000000000000000000008214612917575b926128e292936134ee565b9050604051927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152602084602481855afa9384156109e057600094612966575b50929061290c565b6020813d8211612991575b8161297e60209383612694565b810103126101e1575193506128e261295e565b3d9150612971565b8181029291811591840414171561152e57565b81156129b6570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b919273ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001693843b156104f35760009484869281608496816040519b8c9a8b997f36c78516000000000000000000000000000000000000000000000000000000008b521660048a01521660248801521660448601521660648401525af180156109e057612a855750565b6128e290612664565b8051156125aa5760200190565b8051600110156125aa5760400190565b80518210156125aa5760209160051b010190565b9190820391821161152e57565b92919073ffffffffffffffffffffffffffffffffffffffff8082163003612af85750506128e2926128b8565b8084959411612b0c576128e29416926129e5565b60046040517fc4bd89a9000000000000000000000000000000000000000000000000000000008152fd5b9173ffffffffffffffffffffffffffffffffffffffff93612c37916040519060208201927fffffffffffffffffffffffffffffffffffffffff000000000000000000000000809260601b16845260601b16603482015260288152612b9981612678565b519020612c0b604051938492602084019687917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000605594927fff00000000000000000000000000000000000000000000000000000000000000855260601b166001840152601583015260358201520190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612694565b5190201690565b73ffffffffffffffffffffffffffffffffffffffff8281169082161015612c625791565b9091565b51906dffffffffffffffffffffffffffff821682036104f357565b908160609103126104f357612c9581612c66565b916040612ca460208401612c66565b92015163ffffffff811681036104f35790565b91909160028151106130ef578051156125aa579073ffffffffffffffffffffffffffffffffffffffff602092612cf68285830151168361135084612a9b565b50938151937ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86019501916000965b868810612d5857505050505050505050565b85612d638987612aab565b5116928680612d7560018c0189612aab565b51169116916040918251957f0902f1ac000000000000000000000000000000000000000000000000000000008752606092600493808986818a5afa988915611ce657908c91600091829b6130c4575b5050911682149787949392916dffffffffffffffffffffffffffff918216911689156130be575b8651958680947f70a082310000000000000000000000000000000000000000000000000000000082528a8883015260249889915afa9283156130b357600093613084575b508083039181159384801561307c575b61305457826103e5808602958604149114171561302757612e609083612999565b926103e8808302928304141715612ffa5791612e858f979695949392612e8b93613119565b906129ac565b9715612ff0578a8a600099965b8b811015612fe35791611350612f019994926002612eb7950190612aab565b8197917f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612b36565b955b8451909867ffffffffffffffff9289830184811184821017612fb657875260008352803b156104f3578d9760008a93612f8282968b519c8d97889687957f022c0d9f0000000000000000000000000000000000000000000000000000000087528d8701528d860152166044840152608060648401526084830190610529565b03925af180156114e257612fa2575b505050505060019097019691612d46565b841161228a57505052600138808080612f91565b866041877f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b505050508c946000612f03565b8a8a600096612e98565b856011867f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b866011877f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b8689517f7b9c8916000000000000000000000000000000000000000000000000000000008152fd5b508115612e3f565b90928982813d83116130ac575b61309b8183612694565b810103126109d55750519138612e2f565b503d613091565b87513d6000823e3d90fd5b90612deb565b8a97969594939b506130e29250803d10611963576119528183612694565b5099919293949538612dc4565b60046040517fae52ad0c000000000000000000000000000000000000000000000000000000008152fd5b9190820180921161152e57565b918235830191613140602084359581860195030185613119565b11610acd57565b916060830135830191613140602084359581860195030185613119565b7f8000000000000000000000000000000000000000000000000000000000000000811461152e5760000390565b939193602b8410610acd578462ffffff60006132169461329d6132489935988960601c9a8b9a6131ea601789013560601c9d8e109c73ffffffffffffffffffffffffffffffffffffffff9e8f998a9460481c1691613314565b16968b86146132f9576401000276a49a5b60409d8e9b8c93845196879560208701526060860191612609565b91168b830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612694565b848851998a98899788967f128acb080000000000000000000000000000000000000000000000000000000088521660048701528c6024870152604486015216606484015260a0608484015260a4830190610529565b03925af19081156132ee5760009384926132b8575b50509192565b9080949250813d83116132e7575b6132d08183612694565b810103126109d557506020825192015138806132b2565b503d6132c6565b83513d6000823e3d90fd5b73fffd8963efd1fc6a506488495d951d5263988d259a6131fb565b73ffffffffffffffffffffffffffffffffffffffff9283831684831611613478575b62ffffff90846040519481602087019516855216604085015216606083015260608252608082019082821067ffffffffffffffff8311176109ec577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80612c379183604052845190209361344b60a08201957f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000088917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000605594927fff00000000000000000000000000000000000000000000000000000000000000855260601b166001840152601583015260358201520190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60810184520182612694565b909190613336565b600080809381935af11561349057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152fd5b60009182604492602095604051937fa9059cbb000000000000000000000000000000000000000000000000000000008552600485015260248401525af13d15601f3d116001600051141617161561354157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152fdfea26469706673582212206cf4a60fdc5d1cc8f6b091352295b3eb59aa71c70869c4c7fc64b3c2ceb304ae64736f6c63430008110033",
							"opcodes": "PUSH2 0x140 CALLVALUE PUSH3 0x249 JUMPI PUSH1 0x1F PUSH3 0x3839 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 DUP5 GT DUP6 DUP6 LT OR PUSH3 0x233 JUMPI DUP2 PUSH1 0xC0 SWAP3 DUP7 SWAP3 PUSH1 0x40 SWAP7 DUP8 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x249 JUMPI DUP2 MLOAD SWAP1 PUSH1 0xC0 DUP3 ADD SWAP1 DUP2 GT DUP3 DUP3 LT OR PUSH3 0x233 JUMPI DUP3 MSTORE PUSH3 0x67 DUP4 PUSH3 0x24E JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH3 0x78 PUSH1 0x20 DUP6 ADD PUSH3 0x24E JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP4 ADD SWAP3 DUP6 DUP5 MSTORE PUSH3 0x8E DUP6 DUP4 ADD PUSH3 0x24E JUMP JUMPDEST SWAP4 DUP6 DUP3 ADD SWAP2 DUP6 DUP4 MSTORE PUSH3 0xA4 PUSH1 0x60 DUP6 ADD PUSH3 0x24E JUMP JUMPDEST SWAP8 PUSH1 0x60 DUP3 ADD SWAP6 DUP10 DUP8 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP8 ADD MLOAD SWAP7 PUSH1 0x80 DUP6 ADD SWAP8 DUP9 MSTORE ADD MLOAD SWAP10 PUSH1 0xA0 DUP5 ADD SWAP11 DUP12 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 DUP1 SWAP4 AND ISZERO SWAP4 DUP5 ISZERO PUSH3 0x227 JUMPI JUMPDEST POP DUP4 ISZERO PUSH3 0x21B JUMPI JUMPDEST POP DUP3 ISZERO PUSH3 0x20F JUMPI JUMPDEST POP POP PUSH3 0x1E7 JUMPI DUP4 MLOAD ISZERO DUP1 ISZERO PUSH3 0x205 JUMPI JUMPDEST PUSH3 0x1E7 JUMPI DUP6 DUP2 MLOAD AND EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1F8 JUMPI JUMPDEST PUSH3 0x1E7 JUMPI MLOAD DUP6 AND PUSH1 0xA0 MSTORE MLOAD DUP5 AND PUSH1 0x80 MSTORE MLOAD DUP4 AND PUSH1 0xC0 MSTORE MLOAD PUSH1 0xE0 MSTORE MLOAD AND PUSH2 0x100 SWAP1 DUP2 MSTORE SWAP2 MLOAD PUSH2 0x120 SWAP1 DUP2 MSTORE PUSH1 0x0 NOT PUSH1 0x0 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP2 OR SWAP1 SSTORE SWAP1 MLOAD PUSH2 0x35D5 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 PUSH3 0x264 DUP5 CODECOPY PUSH1 0x80 MLOAD DUP4 DUP2 DUP2 PUSH2 0x1BD6 ADD MSTORE DUP2 DUP2 PUSH2 0x1D8F ADD MSTORE DUP2 DUP2 PUSH2 0x1DF9 ADD MSTORE PUSH2 0x1E69 ADD MSTORE PUSH1 0xA0 MLOAD DUP4 DUP2 DUP2 PUSH2 0xDC6 ADD MSTORE DUP2 DUP2 PUSH2 0xEC0 ADD MSTORE DUP2 DUP2 PUSH2 0x1A70 ADD MSTORE DUP2 DUP2 PUSH2 0x1FE6 ADD MSTORE PUSH2 0x2A00 ADD MSTORE PUSH1 0xC0 MLOAD DUP4 DUP2 DUP2 PUSH2 0x137C ADD MSTORE DUP2 DUP2 PUSH2 0x1757 ADD MSTORE PUSH2 0x2EDD ADD MSTORE PUSH1 0xE0 MLOAD DUP4 DUP2 DUP2 PUSH2 0x135B ADD MSTORE DUP2 DUP2 PUSH2 0x1736 ADD MSTORE PUSH2 0x2EBC ADD MSTORE MLOAD DUP3 PUSH2 0x33CB ADD MSTORE MLOAD DUP2 PUSH2 0x33A9 ADD MSTORE RETURN JUMPDEST DUP7 MLOAD PUSH4 0xAF683663 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP6 DUP3 MLOAD AND EXTCODESIZE ISZERO PUSH3 0x113 JUMP JUMPDEST POP DUP8 MLOAD ISZERO PUSH3 0x100 JUMP JUMPDEST AND ISZERO SWAP1 POP DUP7 CODESIZE PUSH3 0xEE JUMP JUMPDEST DUP3 AND ISZERO SWAP3 POP CODESIZE PUSH3 0xE5 JUMP JUMPDEST DUP4 AND ISZERO SWAP4 POP CODESIZE PUSH3 0xDC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x249 JUMPI JUMP INVALID PUSH1 0x40 PUSH1 0xC0 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x1F JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x24856BC3 EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x3593564C EQ PUSH2 0x2C3 JUMPI PUSH4 0xFA461E33 EQ PUSH2 0x4D JUMPI POP PUSH2 0x10 JUMP JUMPDEST CALLVALUE PUSH2 0x2BF JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x2BF JUMPI DUP2 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP3 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP2 GT PUSH2 0x2BB JUMPI PUSH2 0xA5 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x4C5 JUMP JUMPDEST SWAP2 SWAP1 SWAP3 DUP8 DUP7 SGT SWAP1 DUP2 ISZERO DUP1 PUSH2 0x2B1 JUMPI JUMPDEST PUSH2 0x289 JUMPI DUP4 DUP6 ADD DUP7 DUP7 DUP3 SUB SLT PUSH2 0x285 JUMPI DUP6 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x285 JUMPI PUSH2 0xD8 SWAP2 DUP7 ADD PUSH2 0x27B3 JUMP JUMPDEST POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP7 AND DUP1 SWAP7 SUB PUSH2 0x285 JUMPI PUSH2 0x108 SWAP2 PUSH2 0x3126 JUMP JUMPDEST SWAP6 SWAP1 SWAP8 PUSH1 0x2B DUP10 LT PUSH2 0x25D JUMPI DUP7 CALLDATALOAD SWAP3 PUSH1 0x17 DUP5 PUSH1 0x60 SHR SWAP9 ADD SWAP6 PUSH2 0x137 PUSH3 0xFFFFFF DUP9 CALLDATALOAD PUSH1 0x60 SHR SWAP7 PUSH1 0x48 SHR AND DUP7 DUP12 PUSH2 0x3314 JUMP JUMPDEST CALLER SWAP2 AND SUB PUSH2 0x235 JUMPI ISZERO PUSH2 0x22B JUMPI POP DUP2 DUP7 LT JUMPDEST ISZERO PUSH2 0x161 JUMPI POP POP POP POP PUSH2 0x15E SWAP4 POP CALLER SWAP2 PUSH2 0x2ACC JUMP JUMPDEST DUP1 RETURN JUMPDEST SWAP4 SWAP6 SWAP5 POP SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x42 DUP8 LT PUSH2 0x1E5 JUMPI POP POP POP DUP4 PUSH1 0x17 GT PUSH2 0x1E1 JUMPI PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 LT ISZERO PUSH2 0x1E1 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9 PUSH2 0x1DB SWAP5 ADD SWAP2 PUSH2 0x1D6 CALLER SWAP2 PUSH2 0x3164 JUMP JUMPDEST PUSH2 0x3191 JUMP JUMPDEST POP POP POP DUP1 RETURN JUMPDEST DUP5 DUP1 REVERT JUMPDEST SWAP2 SWAP7 SWAP6 POP SWAP3 SWAP4 SWAP2 POP DUP5 SLOAD DUP5 GT PUSH2 0x203 JUMPI POP PUSH2 0x15E SWAP4 SWAP5 POP CALLER SWAP2 PUSH2 0x2ACC JUMP JUMPDEST DUP6 SWAP1 MLOAD PUSH32 0x739DBE5200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP7 POP DUP6 DUP3 LT PUSH2 0x149 JUMP JUMPDEST DUP5 DUP4 MLOAD PUSH32 0x32B13D9100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP4 DUP3 MLOAD PUSH32 0x3B99B53D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP3 DUP7 MLOAD PUSH32 0x316CF0EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP9 DUP9 SGT ISZERO PUSH2 0xB4 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x2BF JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x1E1 JUMPI PUSH2 0x30D SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x4C5 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x325 SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x4F8 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0x44 CALLDATALOAD TIMESTAMP GT PUSH2 0x3D2 JUMPI CALLER ADDRESS EQ PUSH2 0x3C3 JUMPI PUSH1 0x1 SWAP6 DUP7 SLOAD SWAP6 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SUB PUSH2 0x39D JUMPI POP POP SWAP2 DUP6 SWAP5 SWAP4 SWAP2 PUSH2 0x394 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP6 DUP7 CALLER SWAP2 AND OR DUP8 SSTORE PUSH2 0x587 JUMP JUMPDEST DUP2 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST MLOAD PUSH32 0x6F5FFB7E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 POP PUSH2 0x15E SWAP5 POP PUSH2 0x587 JUMP JUMPDEST DUP6 DUP6 MLOAD PUSH32 0x5BF6F91600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x2BF JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x1E1 JUMPI PUSH2 0x447 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x4C5 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x45F SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x4F8 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 CALLER ADDRESS EQ PUSH2 0x3C3 JUMPI PUSH1 0x1 SWAP6 DUP7 SLOAD SWAP6 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SUB PUSH2 0x39D JUMPI POP POP SWAP2 DUP6 SWAP5 SWAP4 SWAP2 PUSH2 0x394 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP6 DUP7 CALLER SWAP2 AND OR DUP8 SSTORE PUSH2 0x587 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x4F3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x4F3 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x4F3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x4F3 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x573 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x534 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 DUP2 PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE DUP2 SUB PUSH2 0x25DF JUMPI SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x80 MLOAD DUP2 LT ISZERO PUSH2 0x25D9 JUMPI DUP4 DUP2 LT ISZERO PUSH2 0x25AA JUMPI PUSH1 0xA0 MLOAD SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP4 CALLDATASIZE SUB ADD DUP3 PUSH1 0x5 SHL DUP5 ADD CALLDATALOAD SLT ISZERO PUSH2 0x4F3 JUMPI DUP2 PUSH1 0x5 SHL DUP4 ADD CALLDATALOAD DUP4 ADD DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH1 0x20 SWAP1 CALLDATASIZE SUB SWAP2 ADD SGT PUSH2 0x4F3 JUMPI PUSH1 0x60 SWAP3 PUSH32 0x4000000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD CALLDATALOAD AND PUSH2 0x2580 JUMPI PUSH1 0x1 SWAP1 DUP3 DUP5 ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0x3F AND PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2327 JUMPI PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x22F6 JUMPI PUSH1 0x8 DUP1 DUP3 LT ISZERO PUSH2 0x12A4 JUMPI POP DUP1 PUSH2 0xAFE JUMPI POP PUSH2 0x67F DUP5 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3147 JUMP JUMPDEST SWAP1 SWAP8 DUP6 PUSH1 0x5 SHL DUP4 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP8 PUSH1 0xA0 DUP10 ADD CALLDATALOAD PUSH1 0x0 EQ PUSH2 0xAF7 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP10 JUMPDEST PUSH1 0x40 PUSH2 0x6C3 PUSH1 0x20 DUP13 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP11 ADD CALLDATALOAD SWAP1 DUP5 DUP2 SWAP13 SWAP2 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP5 EQ PUSH2 0xA3D JUMPI JUMPDEST POP SWAP5 SWAP12 SWAP5 POP SWAP1 JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 LT ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x42 DUP6 LT PUSH2 0xA37 JUMPI ADDRESS JUMPDEST DUP6 PUSH1 0x2B GT PUSH2 0x4F3 JUMPI DUP13 SWAP1 PUSH1 0x17 DUP3 ADD CALLDATALOAD PUSH1 0x60 SHR SWAP3 PUSH3 0xFFFFFF DUP4 CALLDATALOAD SWAP6 DUP7 PUSH1 0x60 SHR SWAP7 PUSH2 0x771 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 SWAP3 PUSH1 0x48 SHR AND DUP9 DUP11 PUSH2 0x3314 JUMP JUMPDEST AND SWAP3 DUP7 DUP9 LT ISZERO PUSH2 0xA1B JUMPI DUP3 PUSH5 0x1000276A4 SWAP3 JUMPDEST PUSH1 0x2B PUSH1 0x40 MLOAD SWAP9 PUSH1 0x40 PUSH1 0x20 DUP12 ADD MSTORE DUP2 PUSH1 0x60 DUP12 ADD MSTORE PUSH1 0x80 DUP11 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0xAB DUP10 ADD MSTORE AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0xA0 DUP7 MSTORE DUP6 PUSH1 0xC0 DUP2 ADD LT PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xC0 DUP9 ADD GT OR PUSH2 0x9EC JUMPI DUP3 PUSH1 0x40 SWAP6 PUSH1 0xC0 DUP9 ADD DUP8 MSTORE PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 PUSH1 0xC0 DUP10 ADD MSTORE AND PUSH1 0xC4 DUP8 ADD MSTORE DUP7 DUP9 LT PUSH1 0xE4 DUP8 ADD MSTORE PUSH2 0x104 DUP7 ADD MSTORE AND PUSH2 0x124 DUP5 ADD MSTORE PUSH1 0xA0 PUSH2 0x144 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF40 DUP5 PUSH2 0x84E PUSH2 0x164 DUP3 ADD DUP3 PUSH2 0x529 JUMP JUMPDEST SUB ADD SWAP1 PUSH1 0x0 PUSH1 0xC0 DUP7 ADD SWAP2 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP2 DUP3 SWAP4 PUSH2 0x998 JUMPI JUMPDEST POP PUSH2 0x87C SWAP4 LT ISZERO PUSH2 0x991 JUMPI POP PUSH2 0x3164 JUMP JUMPDEST PUSH1 0x42 DUP5 LT PUSH2 0x8BE JUMPI ADDRESS SWAP11 DUP5 PUSH1 0x17 GT PUSH2 0x4F3 JUMPI PUSH1 0x17 ADD SWAP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 PUSH2 0x6FA JUMP JUMPDEST SWAP2 SWAP8 SWAP6 SWAP10 POP SWAP8 POP PUSH1 0x60 SWAP2 POP SWAP2 DUP6 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD GT PUSH2 0x967 JUMPI JUMPDEST ISZERO DUP1 PUSH2 0x93A JUMPI JUMPDEST PUSH2 0x8F3 JUMPI POP PUSH1 0x1 ADD SWAP3 SWAP1 SWAP3 PUSH2 0x59B JUMP JUMPDEST SWAP1 PUSH2 0x936 PUSH1 0x40 SWAP3 DUP4 MLOAD SWAP4 DUP5 SWAP4 PUSH32 0x2C4029E900000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x529 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 DUP7 ADD CALLDATALOAD AND ISZERO PUSH2 0x8E3 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x39D3549600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 POP PUSH2 0x3164 JUMP JUMPDEST SWAP3 POP SWAP1 PUSH1 0x40 DUP4 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x9D8 JUMPI JUMPDEST DUP2 PUSH2 0x9B7 PUSH1 0x40 SWAP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP3 ADD MLOAD SWAP2 SWAP1 PUSH2 0x87C PUSH2 0x86B JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x9A7 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP3 PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 SWAP3 PUSH2 0x784 JUMP JUMPDEST DUP11 PUSH2 0x72C JUMP JUMPDEST PUSH1 0x14 SWAP2 SWAP3 SWAP4 POP LT PUSH2 0xACD JUMPI PUSH1 0x20 PUSH1 0x24 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE ADDRESS PUSH1 0x4 DUP4 ADD MSTORE CALLDATALOAD PUSH1 0x60 SHR GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xA9B JUMPI JUMPDEST POP SWAP1 CODESIZE DUP1 PUSH2 0x6F3 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xAC5 JUMPI JUMPDEST DUP2 PUSH2 0xAB5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD CODESIZE PUSH2 0xA92 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xAA8 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x3B99B53D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST ADDRESS SWAP10 PUSH2 0x6B4 JUMP JUMPDEST SWAP3 SWAP7 SWAP5 SWAP3 PUSH1 0x1 DUP2 SUB PUSH2 0xC2B JUMPI POP DUP4 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 SWAP2 PUSH2 0xB2C DUP4 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3147 JUMP JUMPDEST SWAP1 SWAP2 DUP8 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP2 PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0x0 EQ PUSH2 0xC24 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP2 JUMPDEST PUSH1 0x60 PUSH2 0xB6F PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP5 ADD CALLDATALOAD PUSH1 0x0 SSTORE PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP6 LT ISZERO PUSH2 0x4F3 JUMPI PUSH2 0xBAA SWAP4 PUSH2 0x1D6 DUP7 PUSH2 0x3164 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0xC15 JUMPI POP PUSH2 0xBBC SWAP1 PUSH2 0x3164 JUMP JUMPDEST SUB PUSH2 0xBEC JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SSTORE JUMPDEST PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x4 SWAP1 MLOAD PUSH32 0xD4E0248E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH2 0xC1F SWAP2 POP PUSH2 0x3164 JUMP JUMPDEST PUSH2 0xBBC JUMP JUMPDEST ADDRESS SWAP2 PUSH2 0xB60 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xC7A JUMPI POP PUSH2 0xBE7 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP1 DUP6 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH2 0xC6A PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP4 ADD CALLDATALOAD PUSH2 0x29E5 JUMP JUMPDEST PUSH1 0x3 DUP2 SUB PUSH2 0xF85 JUMPI POP DUP4 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 DUP2 CALLDATALOAD DUP3 ADD SWAP1 PUSH1 0x40 DUP4 DUP4 SUB SLT PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH1 0x60 DUP2 DUP6 ADD DUP5 SUB SLT PUSH2 0x4F3 JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0xCCB DUP6 PUSH2 0x2678 JUMP JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI DUP3 DUP3 ADD ADD PUSH1 0x20 DUP6 ADD PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH2 0xD01 DUP2 PUSH2 0x270F JUMP JUMPDEST SWAP2 PUSH2 0xD0F PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2694 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH1 0x20 DUP9 ADD PUSH1 0x40 DUP5 PUSH1 0x7 SHL DUP4 ADD ADD GT PUSH2 0x4F3 JUMPI PUSH1 0x40 DUP2 ADD SWAP2 JUMPDEST PUSH1 0x40 DUP5 PUSH1 0x7 SHL DUP4 ADD ADD DUP4 LT PUSH2 0xF69 JUMPI POP POP POP POP SWAP1 PUSH1 0x60 SWAP3 SWAP2 DUP7 MSTORE PUSH2 0xD57 PUSH1 0x40 DUP4 DUP4 ADD ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE ADD ADD CALLDATALOAD PUSH1 0x40 DUP5 ADD MSTORE DUP6 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x4F3 JUMPI PUSH2 0xD94 SWAP3 PUSH1 0x20 DUP1 SWAP3 ADD SWAP3 ADD ADD PUSH2 0x27B3 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH32 0x2A2D80D100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x24 DUP4 ADD MSTORE DUP2 PUSH1 0xC4 DUP2 ADD DUP3 MLOAD SWAP1 PUSH1 0x60 PUSH1 0x64 DUP5 ADD MSTORE DUP2 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x20 PUSH1 0xE4 DUP5 ADD SWAP3 ADD SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0xF02 JUMPI POP POP POP PUSH1 0x20 SWAP1 PUSH1 0x40 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 PUSH1 0x0 SWAP8 ADD MLOAD AND PUSH1 0x84 DUP7 ADD MSTORE ADD MLOAD PUSH1 0xA4 DUP5 ADD MSTORE DUP4 DUP4 DUP3 SUB SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC DUP4 ADD PUSH1 0x44 DUP7 ADD MSTORE MSTORE ADD DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x9E0 JUMPI PUSH2 0xEF3 JUMPI JUMPDEST POP PUSH2 0x8DC JUMP JUMPDEST PUSH2 0xEFC SWAP1 PUSH2 0x2664 JUMP JUMPDEST CODESIZE PUSH2 0xEED JUMP JUMPDEST SWAP2 SWAP5 SWAP4 POP SWAP2 PUSH1 0x20 PUSH1 0x80 DUP3 PUSH2 0xF5A PUSH1 0x1 SWAP5 DUP10 MLOAD PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 PUSH6 0xFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST ADD SWAP6 ADD SWAP3 ADD DUP6 SWAP4 SWAP5 SWAP3 SWAP2 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x80 SWAP2 PUSH2 0xF7A DUP3 DUP13 ADD DUP7 PUSH2 0x275B JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0xD2F JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP1 DUP3 DUP2 SUB PUSH2 0x10F1 JUMPI POP DUP5 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH1 0x60 DUP3 ADD CALLDATALOAD SWAP1 PUSH1 0x40 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 PUSH2 0xFC7 DUP4 DUP8 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP6 ADD CALLDATALOAD AND DUP1 PUSH2 0x101E JUMPI POP SELFBALANCE SWAP3 DUP4 LT PUSH2 0xFF8 JUMPI POP POP DUP1 PUSH2 0xFE8 JUMPI JUMPDEST POP POP PUSH2 0x8DC JUMP JUMPDEST PUSH2 0xFF1 SWAP2 PUSH2 0x3480 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0xFE1 JUMP JUMPDEST MLOAD PUSH32 0x6A12F10400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP4 SWAP2 SWAP1 DUP1 MLOAD SWAP4 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP6 MSTORE ADDRESS DUP4 DUP7 ADD MSTORE PUSH1 0x20 DUP6 PUSH1 0x24 DUP2 DUP10 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x0 SWAP6 PUSH2 0x10B2 JUMPI JUMPDEST POP DUP5 LT PUSH2 0x108C JUMPI POP POP DUP2 PUSH2 0x107B JUMPI JUMPDEST POP POP POP PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x1084 SWAP3 PUSH2 0x34EE JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x1073 JUMP JUMPDEST MLOAD PUSH32 0x675CAE3800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 SWAP5 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x10DE JUMPI JUMPDEST DUP2 PUSH2 0x10CD PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP4 CODESIZE PUSH2 0x1064 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x10C0 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 SUB PUSH2 0x1125 JUMPI POP PUSH2 0xBE7 SWAP2 POP DUP5 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH2 0x1116 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x60 DUP4 ADD CALLDATALOAD SWAP3 ADD CALLDATALOAD PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x6 DUP2 SUB PUSH2 0x1274 JUMPI POP DUP5 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x114D PUSH1 0x40 DUP1 SWAP3 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP3 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1269 JUMPI JUMPDEST PUSH2 0x1241 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP10 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD AND SWAP4 DUP5 ISZERO PUSH1 0x0 EQ PUSH2 0x11A5 JUMPI POP POP PUSH2 0xBE7 SWAP3 POP PUSH2 0x119E PUSH2 0x2710 SWAP2 SELFBALANCE PUSH2 0x2999 JUMP JUMPDEST DIV SWAP1 PUSH2 0x3480 JUMP JUMPDEST DUP2 MLOAD SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE ADDRESS SWAP1 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP9 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1237 JUMPI POP PUSH1 0x0 SWAP2 PUSH2 0x1203 JUMPI JUMPDEST POP PUSH2 0x11FC PUSH2 0xBE7 SWAP5 SWAP4 SWAP3 PUSH2 0x2710 SWAP3 PUSH2 0x2999 JUMP JUMPDEST DIV SWAP2 PUSH2 0x34EE JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x122F JUMPI JUMPDEST DUP2 PUSH2 0x121D PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD PUSH2 0x11FC PUSH2 0x11E9 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1210 JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP3 MLOAD PUSH32 0xDEAA01E600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP PUSH2 0x2710 DUP4 GT PUSH2 0x1157 JUMP JUMPDEST DUP3 PUSH1 0x24 SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH32 0xD76A1E9E00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST SWAP4 SWAP8 SWAP6 SWAP4 DUP2 SUB PUSH2 0x1586 JUMPI POP DUP4 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH1 0x40 SWAP1 PUSH2 0x12DD PUSH2 0x12D4 DUP4 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3147 JUMP JUMPDEST SWAP1 DUP2 ADD SWAP1 PUSH2 0x27FA JUMP JUMPDEST SWAP1 DUP7 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0x0 EQ PUSH2 0x157A JUMPI PUSH2 0x131D PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP4 JUMPDEST ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 PUSH2 0x13A0 PUSH2 0x1358 DUP6 PUSH2 0x1344 DUP9 PUSH2 0x2A8E JUMP JUMPDEST MLOAD AND DUP7 PUSH2 0x1350 DUP10 PUSH2 0x2A9B JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0x2C3E JUMP JUMPDEST SWAP1 PUSH32 0x0 PUSH32 0x0 PUSH2 0x2B36 JUMP JUMPDEST SWAP2 DUP3 DUP2 PUSH2 0x155D JUMPI JUMPDEST POP POP POP DUP4 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 GT PUSH2 0x152E JUMPI PUSH2 0x13E2 DUP5 SWAP2 DUP7 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND SWAP4 DUP6 MLOAD SWAP4 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 DUP7 MSTORE DUP9 AND SWAP3 PUSH1 0x4 SWAP9 DUP5 DUP11 DUP9 ADD MSTORE PUSH1 0x24 SWAP4 PUSH1 0x20 DUP9 DUP7 DUP2 DUP13 GAS STATICCALL SWAP8 DUP9 ISZERO PUSH2 0x1523 JUMPI PUSH1 0x0 SWAP9 PUSH2 0x14ED JUMPI JUMPDEST POP SWAP2 PUSH2 0x1443 SWAP2 PUSH1 0x20 SWAP7 SWAP6 SWAP5 SWAP4 PUSH2 0x2CB7 JUMP JUMPDEST DUP8 MLOAD SWAP7 DUP8 SWAP4 DUP5 SWAP3 DUP4 MSTORE DUP11 DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x14E2 JUMPI PUSH1 0x0 SWAP4 PUSH2 0x14AD JUMPI JUMPDEST POP SWAP1 PUSH1 0x60 PUSH2 0x147B SWAP3 DUP10 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD SWAP3 PUSH2 0x2ABF JUMP JUMPDEST LT PUSH2 0x1487 JUMPI POP POP PUSH2 0x8DC JUMP JUMPDEST MLOAD PUSH32 0x849EAF9800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 SWAP3 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x14DA JUMPI JUMPDEST DUP2 PUSH2 0x14C8 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP2 PUSH1 0x60 PUSH2 0x1461 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x14BB JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP8 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x151B JUMPI JUMPDEST DUP2 PUSH2 0x1508 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP7 PUSH2 0x1443 PUSH2 0x1432 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x14FB JUMP JUMPDEST DUP11 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1572 SWAP3 DUP7 PUSH2 0x156B DUP10 PUSH2 0x2A8E JUMP JUMPDEST MLOAD AND PUSH2 0x2ACC JUMP JUMPDEST CODESIZE DUP1 DUP3 PUSH2 0x13A8 JUMP JUMPDEST PUSH2 0x131D PUSH1 0x20 ADDRESS SWAP4 PUSH2 0x1316 JUMP JUMPDEST PUSH1 0x9 DUP2 SUB PUSH2 0x19A0 JUMPI POP PUSH2 0x15AB PUSH2 0x12D4 DUP6 PUSH1 0x5 SHL DUP4 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3147 JUMP JUMPDEST DUP5 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0x0 EQ PUSH2 0x1994 JUMPI PUSH2 0x15E9 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP4 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 PUSH1 0x2 DUP3 MLOAD LT PUSH2 0x196A JUMPI PUSH1 0x40 DUP9 PUSH1 0x5 SHL DUP7 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD SWAP5 DUP3 MLOAD DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD GT PUSH2 0x152E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 JUMPDEST PUSH2 0x16C5 JUMPI POP PUSH1 0x60 SWAP1 DUP10 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD DUP6 GT PUSH2 0x169B JUMPI PUSH2 0xBE7 SWAP5 DUP5 PUSH2 0x1696 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x156B DUP7 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x8AB0BC1600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP6 SWAP5 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 ADD DUP7 DUP2 GT PUSH2 0x152E JUMPI PUSH2 0x177B SWAP6 PUSH2 0x1718 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 SWAP2 DUP8 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0x1731 DUP4 PUSH2 0x1729 DUP12 DUP10 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND DUP4 PUSH2 0x2C3E JUMP JUMPDEST DUP2 SWAP10 SWAP2 PUSH32 0x0 PUSH32 0x0 PUSH2 0x2B36 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x902F1AC00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 SWAP5 PUSH1 0x60 DUP4 DUP8 DUP2 DUP5 DUP10 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP1 DUP2 SWAP5 PUSH2 0x1936 JUMPI JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP4 AND SWAP11 AND EQ PUSH1 0x0 EQ PUSH2 0x1930 JUMPI SWAP8 SWAP2 JUMPDEST SWAP8 DUP1 ISZERO DUP1 ISZERO PUSH2 0x1928 JUMPI JUMPDEST PUSH2 0x18FF JUMPI DUP2 PUSH2 0x17FB SWAP2 PUSH2 0x2999 JUMP JUMPDEST SWAP2 PUSH2 0x3E8 SWAP3 DUP4 DUP2 MUL SWAP4 DUP2 DUP6 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x18D1 JUMPI SWAP1 PUSH2 0x181A SWAP2 PUSH2 0x2ABF JUMP JUMPDEST SWAP1 PUSH2 0x3E5 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x18A3 JUMPI SWAP1 PUSH2 0x1839 SWAP2 PUSH2 0x29AC JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1875 JUMPI POP SWAP6 DUP1 ISZERO PUSH2 0x152E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 PUSH2 0x1655 JUMP JUMPDEST PUSH1 0x11 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x11 DUP4 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x11 DUP5 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x7B9C891600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP3 ISZERO PUSH2 0x17ED JUMP JUMPDEST SWAP2 PUSH2 0x17E3 JUMP JUMPDEST SWAP1 POP PUSH2 0x195A SWAP2 SWAP4 POP PUSH1 0x60 RETURNDATASIZE DUP2 GT PUSH2 0x1963 JUMPI JUMPDEST PUSH2 0x1952 DUP2 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2C81 JUMP JUMPDEST POP SWAP3 SWAP1 CODESIZE PUSH2 0x17C1 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1948 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x20DB826700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH2 0x15E9 PUSH1 0x20 ADDRESS SWAP4 PUSH2 0x1316 JUMP JUMPDEST PUSH1 0xA DUP2 SUB PUSH2 0x1B5D JUMPI POP DUP4 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD DUP1 CALLDATALOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP3 ADD SWAP2 SUB SWAP1 PUSH1 0xE0 SWAP2 DUP3 DUP2 SLT PUSH2 0x4F3 JUMPI PUSH1 0xC0 DUP1 SWAP2 SLT PUSH2 0x4F3 JUMPI PUSH1 0x40 SWAP3 DUP4 MLOAD SWAP3 PUSH2 0x19E2 DUP5 PUSH2 0x2678 JUMP JUMPDEST PUSH2 0x19F9 DUP2 PUSH1 0x20 DUP12 PUSH1 0x5 SHL DUP10 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD PUSH2 0x275B JUMP JUMPDEST DUP5 MSTORE PUSH2 0x1A10 PUSH1 0xA0 DUP11 PUSH1 0x5 SHL DUP9 ADD CALLDATALOAD DUP2 MLOAD ADD ADD PUSH2 0x2727 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD SWAP7 DUP8 MSTORE DUP6 DUP6 ADD SWAP4 DUP11 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD DUP5 MSTORE DUP10 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP2 DUP3 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x4F3 JUMPI PUSH2 0x1A56 SWAP3 ADD PUSH1 0x20 ADD PUSH2 0x27B3 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 PUSH32 0x0 AND SWAP2 DUP5 PUSH1 0x1 SLOAD AND DUP4 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI PUSH2 0x1B47 PUSH2 0x1B27 SWAP6 PUSH1 0x0 SWAP8 SWAP4 DUP9 SWAP5 DUP11 MLOAD SWAP12 DUP13 SWAP10 DUP11 SWAP9 DUP10 SWAP8 PUSH32 0x2B67B57000000000000000000000000000000000000000000000000000000000 DUP10 MSTORE PUSH1 0x4 DUP10 ADD MSTORE PUSH1 0x24 DUP9 ADD SWAP1 MLOAD PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 PUSH6 0xFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST MLOAD AND PUSH1 0xA4 DUP6 ADD MSTORE MLOAD PUSH1 0xC4 DUP5 ADD MSTORE PUSH2 0x100 PUSH1 0xE4 DUP5 ADD MSTORE PUSH2 0x104 DUP4 ADD SWAP1 PUSH2 0x529 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x1237 JUMPI POP PUSH2 0xEF3 JUMPI POP PUSH2 0x8DC JUMP JUMPDEST PUSH1 0xB DUP2 SUB PUSH2 0x1D24 JUMPI POP DUP4 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 PUSH2 0x1B83 PUSH1 0x20 DUP3 DUP5 ADD CALLDATALOAD SWAP4 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP2 DUP1 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 SUB PUSH2 0x1CF1 JUMPI POP POP SELFBALANCE SWAP2 JUMPDEST DUP3 PUSH2 0x1BBE JUMPI POP POP POP PUSH2 0x8DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH32 0x0 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI DUP4 MLOAD SWAP3 PUSH32 0xD0E30DB000000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 SWAP4 PUSH1 0x0 DUP2 DUP7 DUP2 DUP11 DUP9 GAS CALL DUP1 ISZERO PUSH2 0x1CE6 JUMPI PUSH2 0x1CD7 JUMPI JUMPDEST POP AND SWAP1 ADDRESS DUP3 SUB PUSH2 0x1C4D JUMPI JUMPDEST POP POP PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x44 SWAP3 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x1237 JUMPI POP PUSH2 0x1C9F JUMPI JUMPDEST DUP1 DUP1 DUP1 DUP1 PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1CCF JUMPI JUMPDEST DUP2 PUSH2 0x1CB8 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4F3 JUMPI MLOAD DUP1 ISZERO ISZERO SUB PUSH2 0x4F3 JUMPI CODESIZE PUSH2 0x1C96 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1CAB JUMP JUMPDEST PUSH2 0x1CE0 SWAP1 PUSH2 0x2664 JUMP JUMPDEST CODESIZE PUSH2 0x1C3B JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP1 SWAP3 SELFBALANCE LT ISZERO PUSH2 0x1BB1 JUMPI PUSH1 0x4 DUP3 MLOAD PUSH32 0x6A12F10400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0xC DUP2 SUB PUSH2 0x1F2B JUMPI POP PUSH2 0x1D44 PUSH1 0x20 DUP6 PUSH1 0x5 SHL DUP4 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE ADDRESS PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0x24 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1EF6 JUMPI JUMPDEST POP PUSH1 0x40 SWAP1 DUP7 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD DUP2 LT PUSH2 0x1ECC JUMPI DUP1 PUSH2 0x1DE2 JUMPI POP POP PUSH2 0x8DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 DUP2 PUSH1 0x24 DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x9E0 JUMPI PUSH2 0x1EBD JUMPI JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ADDRESS EQ PUSH2 0xFE1 JUMPI PUSH2 0xFF1 SWAP2 PUSH2 0x3480 JUMP JUMPDEST PUSH2 0x1EC6 SWAP1 PUSH2 0x2664 JUMP JUMPDEST CODESIZE PUSH2 0x1E96 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x6A12F10400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1F23 JUMPI JUMPDEST DUP2 PUSH2 0x1F11 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP1 PUSH1 0x40 PUSH2 0x1DC0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0xD DUP2 SUB PUSH2 0x218A JUMPI POP DUP4 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD DUP1 CALLDATALOAD DUP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x4F3 JUMPI ADD DUP3 PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x1F81 DUP3 PUSH2 0x270F JUMP JUMPDEST SWAP4 PUSH1 0x40 SWAP4 PUSH2 0x1F91 DUP6 MLOAD SWAP7 DUP8 PUSH2 0x2694 JUMP JUMPDEST DUP4 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP3 DUP6 DUP5 SWAP6 PUSH1 0x7 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x4F3 JUMPI DUP6 ADD SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x2128 JUMPI POP POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x1 SLOAD AND DUP5 MLOAD SWAP1 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x20BC JUMPI POP POP POP DUP2 PUSH32 0x0 AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI DUP4 MLOAD PUSH32 0xD58B1DB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP5 MLOAD PUSH1 0x24 DUP7 ADD DUP2 SWAP1 MSTORE DUP6 SWAP3 PUSH1 0x44 DUP5 ADD SWAP3 SWAP1 SWAP2 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x2078 JUMPI POP POP POP POP SWAP2 DUP2 PUSH1 0x0 DUP2 DUP2 SWAP6 SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x1237 JUMPI POP PUSH2 0xEF3 JUMPI POP PUSH2 0x8DC JUMP JUMPDEST SWAP2 SWAP4 DUP4 SWAP6 POP PUSH1 0x80 PUSH1 0x20 SWAP2 DUP5 PUSH1 0x60 PUSH1 0x1 SWAP6 SWAP8 MLOAD DUP3 DUP2 MLOAD AND DUP5 MSTORE DUP3 DUP7 DUP3 ADD MLOAD AND DUP7 DUP6 ADD MSTORE DUP3 DUP14 DUP3 ADD MLOAD AND DUP14 DUP6 ADD MSTORE ADD MLOAD AND PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 SWAP2 DUP8 SWAP5 SWAP4 SWAP3 PUSH2 0x2050 JUMP JUMPDEST DUP2 DUP6 PUSH2 0x20C8 DUP4 DUP11 PUSH2 0x2AAB JUMP JUMPDEST MLOAD MLOAD AND SUB PUSH2 0x20FF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x152E JUMPI PUSH1 0x1 ADD PUSH2 0x1FD9 JUMP JUMPDEST PUSH1 0x4 DUP7 MLOAD PUSH32 0xE700287700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x80 PUSH1 0x20 DUP6 DUP5 SUB ADD SLT PUSH2 0x4F3 JUMPI PUSH1 0x20 PUSH1 0x80 SWAP2 DUP8 MLOAD PUSH2 0x2145 DUP2 PUSH2 0x2648 JUMP JUMPDEST PUSH2 0x214E DUP8 PUSH2 0x2727 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x215B DUP4 DUP9 ADD PUSH2 0x2727 JUMP JUMPDEST DUP4 DUP3 ADD MSTORE PUSH2 0x216A DUP10 DUP9 ADD PUSH2 0x2727 JUMP JUMPDEST DUP10 DUP3 ADD MSTORE PUSH2 0x217A PUSH1 0x60 DUP9 ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x1FAD JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0xE DUP2 SUB PUSH2 0x22F6 JUMPI POP PUSH1 0x40 SWAP1 DUP2 MLOAD SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x20 DUP3 DUP5 DUP3 DUP11 PUSH1 0x5 SHL DUP6 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD AND SWAP5 PUSH1 0x4 SWAP6 DUP7 DUP4 ADD MSTORE PUSH1 0x24 SWAP7 DUP8 SWAP2 DUP10 DUP13 PUSH1 0x5 SHL DUP8 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x22EB JUMPI PUSH1 0x0 SWAP3 PUSH2 0x22B6 JUMPI JUMPDEST POP PUSH1 0x60 SWAP1 DUP8 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD GT SWAP3 DUP4 ISZERO SWAP4 PUSH2 0x2237 JUMPI POP POP POP PUSH2 0x8DC JUMP JUMPDEST DUP1 MLOAD PUSH32 0xA328167200000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 DUP2 ADD SWAP3 SWAP1 SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP6 DUP6 LT OR PUSH2 0x228A JUMPI POP POP MSTORE SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x41 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x22E3 JUMPI JUMPDEST DUP2 PUSH2 0x22D1 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP1 PUSH1 0x60 PUSH2 0x2216 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x22C4 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xD76A1E9E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP7 SWAP4 SWAP6 SWAP5 SWAP3 SWAP2 PUSH1 0x21 DUP2 SUB PUSH2 0x22F6 JUMPI POP PUSH2 0x2350 DUP7 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3126 JUMP JUMPDEST PUSH2 0x2377 DUP9 PUSH1 0x5 SWAP10 SWAP4 SWAP10 SHL DUP5 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x20 DUP1 PUSH1 0x40 DUP4 ADD CALLDATALOAD DUP4 ADD SWAP3 DUP4 SUB ADD SWAP2 ADD CALLDATALOAD PUSH2 0x3119 JUMP JUMPDEST DUP3 PUSH1 0x5 SHL DUP5 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD CALLDATALOAD LT PUSH2 0xACD JUMPI PUSH2 0x23CA SWAP1 PUSH1 0x40 SWAP8 SWAP5 SWAP8 MLOAD SWAP9 PUSH32 0x24856BC300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP12 ADD MSTORE PUSH1 0x64 DUP11 ADD SWAP2 PUSH2 0x2609 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC DUP9 DUP3 SUB ADD PUSH1 0x44 DUP10 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 DUP2 ADD CALLDATALOAD ADD ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP7 DUP3 PUSH1 0x5 SHL DUP5 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP5 PUSH1 0x40 PUSH1 0x20 DUP1 DUP3 DUP10 ADD CALLDATALOAD DUP10 ADD ADD CALLDATALOAD PUSH1 0x5 SHL DUP6 ADD ADD SWAP7 DUP2 DUP2 ADD CALLDATALOAD ADD ADD SWAP1 PUSH1 0x0 SWAP7 JUMPDEST PUSH1 0x20 DUP7 PUSH1 0x5 SHL DUP9 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 DUP2 ADD CALLDATALOAD ADD ADD CALLDATALOAD DUP9 LT ISZERO PUSH2 0x24FD JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 DUP3 SUB ADD DUP12 MSTORE DUP6 PUSH1 0x5 SHL DUP8 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 DUP2 ADD CALLDATALOAD ADD DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA1 DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x4F3 JUMPI ADD DUP10 DUP2 ADD SWAP2 SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI DUP1 CALLDATASIZE SUB DUP4 SGT PUSH2 0x4F3 JUMPI DUP15 SWAP3 PUSH1 0x20 SWAP3 DUP4 SWAP3 PUSH2 0x24EF SWAP3 PUSH2 0x2609 JUMP JUMPDEST SWAP5 ADD SWAP12 ADD SWAP8 ADD SWAP7 SWAP10 SWAP2 PUSH2 0x243B JUMP JUMPDEST SWAP2 POP SWAP10 SWAP4 SWAP8 SWAP9 POP DUP4 SWAP2 SWAP11 POP PUSH1 0x0 SWAP6 POP DUP6 SWAP5 POP PUSH2 0x2540 SWAP3 POP SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x2694 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP3 ADDRESS GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x257B JUMPI POP RETURNDATASIZE PUSH2 0x255C DUP2 PUSH2 0x26D5 JUMP JUMPDEST SWAP1 PUSH2 0x256A PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY JUMPDEST SWAP1 PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x2575 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xE68EC04C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP POP SWAP1 POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xFF633A3800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x1F DUP3 PUSH1 0x20 SWAP5 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP4 DUP2 DUP7 MSTORE DUP7 DUP7 ADD CALLDATACOPY PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9EC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9EC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9EC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9EC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9EC JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9EC JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x4F3 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH6 0xFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x4F3 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x4F3 JUMPI PUSH1 0x40 MLOAD PUSH2 0x2773 DUP2 PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x27AE DUP2 DUP4 SWAP6 PUSH2 0x2784 DUP2 PUSH2 0x2727 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x2792 PUSH1 0x20 DUP3 ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x27A3 PUSH1 0x40 DUP3 ADD PUSH2 0x2748 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE ADD PUSH2 0x2748 JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x4F3 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x27CA DUP3 PUSH2 0x26D5 JUMP JUMPDEST SWAP3 PUSH2 0x27D8 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x2694 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x4F3 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x4F3 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x4F3 JUMPI ADD SWAP2 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x4F3 JUMPI DUP3 CALLDATALOAD PUSH2 0x2830 DUP2 PUSH2 0x270F JUMP JUMPDEST SWAP4 PUSH2 0x283E PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x2694 JUMP JUMPDEST DUP2 DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x4F3 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2865 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 DUP1 SWAP2 PUSH2 0x2871 DUP5 PUSH2 0x2727 JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x2857 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP1 DUP3 AND PUSH1 0x1 DUP2 SUB PUSH2 0x28A6 JUMPI POP POP PUSH1 0x1 SLOAD AND SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x2 SUB PUSH2 0x28B5 JUMPI POP ADDRESS SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x28E4 JUMPI POP PUSH2 0x28E2 SWAP2 SWAP3 PUSH2 0x3480 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ PUSH2 0x2917 JUMPI JUMPDEST SWAP3 PUSH2 0x28E2 SWAP3 SWAP4 PUSH2 0x34EE JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD SWAP3 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP5 MSTORE ADDRESS PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 DUP5 PUSH1 0x24 DUP2 DUP6 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP5 PUSH2 0x2966 JUMPI JUMPDEST POP SWAP3 SWAP1 PUSH2 0x290C JUMP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x2991 JUMPI JUMPDEST DUP2 PUSH2 0x297E PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1E1 JUMPI MLOAD SWAP4 POP PUSH2 0x28E2 PUSH2 0x295E JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2971 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x152E JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x29B6 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 PUSH32 0x0 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 SWAP5 DUP5 DUP7 SWAP3 DUP2 PUSH1 0x84 SWAP7 DUP2 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP11 DUP12 SWAP10 PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP12 MSTORE AND PUSH1 0x4 DUP11 ADD MSTORE AND PUSH1 0x24 DUP9 ADD MSTORE AND PUSH1 0x44 DUP7 ADD MSTORE AND PUSH1 0x64 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x9E0 JUMPI PUSH2 0x2A85 JUMPI POP JUMP JUMPDEST PUSH2 0x28E2 SWAP1 PUSH2 0x2664 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x25AA JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0x25AA JUMPI PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x25AA JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x152E JUMPI JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND ADDRESS SUB PUSH2 0x2AF8 JUMPI POP POP PUSH2 0x28E2 SWAP3 PUSH2 0x28B8 JUMP JUMPDEST DUP1 DUP5 SWAP6 SWAP5 GT PUSH2 0x2B0C JUMPI PUSH2 0x28E2 SWAP5 AND SWAP3 PUSH2 0x29E5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xC4BD89A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH2 0x2C37 SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP1 SWAP3 PUSH1 0x60 SHL AND DUP5 MSTORE PUSH1 0x60 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x28 DUP2 MSTORE PUSH2 0x2B99 DUP2 PUSH2 0x2678 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0x2C0B PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP7 DUP8 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x55 SWAP5 SWAP3 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x60 SHL AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x2694 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x2C62 JUMPI SWAP2 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST MLOAD SWAP1 PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x4F3 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x60 SWAP2 SUB SLT PUSH2 0x4F3 JUMPI PUSH2 0x2C95 DUP2 PUSH2 0x2C66 JUMP JUMPDEST SWAP2 PUSH1 0x40 PUSH2 0x2CA4 PUSH1 0x20 DUP5 ADD PUSH2 0x2C66 JUMP JUMPDEST SWAP3 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x4F3 JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x2 DUP2 MLOAD LT PUSH2 0x30EF JUMPI DUP1 MLOAD ISZERO PUSH2 0x25AA JUMPI SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 SWAP3 PUSH2 0x2CF6 DUP3 DUP6 DUP4 ADD MLOAD AND DUP4 PUSH2 0x1350 DUP5 PUSH2 0x2A9B JUMP JUMPDEST POP SWAP4 DUP2 MLOAD SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 ADD SWAP6 ADD SWAP2 PUSH1 0x0 SWAP7 JUMPDEST DUP7 DUP9 LT PUSH2 0x2D58 JUMPI POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP6 PUSH2 0x2D63 DUP10 DUP8 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND SWAP3 DUP7 DUP1 PUSH2 0x2D75 PUSH1 0x1 DUP13 ADD DUP10 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND SWAP2 AND SWAP2 PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP6 PUSH32 0x902F1AC00000000000000000000000000000000000000000000000000000000 DUP8 MSTORE PUSH1 0x60 SWAP3 PUSH1 0x4 SWAP4 DUP1 DUP10 DUP7 DUP2 DUP11 GAS STATICCALL SWAP9 DUP10 ISZERO PUSH2 0x1CE6 JUMPI SWAP1 DUP13 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP12 PUSH2 0x30C4 JUMPI JUMPDEST POP POP SWAP2 AND DUP3 EQ SWAP8 DUP8 SWAP5 SWAP4 SWAP3 SWAP2 PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 AND DUP10 ISZERO PUSH2 0x30BE JUMPI JUMPDEST DUP7 MLOAD SWAP6 DUP7 DUP1 SWAP5 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP11 DUP9 DUP4 ADD MSTORE PUSH1 0x24 SWAP9 DUP10 SWAP2 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x30B3 JUMPI PUSH1 0x0 SWAP4 PUSH2 0x3084 JUMPI JUMPDEST POP DUP1 DUP4 SUB SWAP2 DUP2 ISZERO SWAP4 DUP5 DUP1 ISZERO PUSH2 0x307C JUMPI JUMPDEST PUSH2 0x3054 JUMPI DUP3 PUSH2 0x3E5 DUP1 DUP7 MUL SWAP6 DUP7 DIV EQ SWAP2 EQ OR ISZERO PUSH2 0x3027 JUMPI PUSH2 0x2E60 SWAP1 DUP4 PUSH2 0x2999 JUMP JUMPDEST SWAP3 PUSH2 0x3E8 DUP1 DUP4 MUL SWAP3 DUP4 DIV EQ OR ISZERO PUSH2 0x2FFA JUMPI SWAP2 PUSH2 0x2E85 DUP16 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH2 0x2E8B SWAP4 PUSH2 0x3119 JUMP JUMPDEST SWAP1 PUSH2 0x29AC JUMP JUMPDEST SWAP8 ISZERO PUSH2 0x2FF0 JUMPI DUP11 DUP11 PUSH1 0x0 SWAP10 SWAP7 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0x2FE3 JUMPI SWAP2 PUSH2 0x1350 PUSH2 0x2F01 SWAP10 SWAP5 SWAP3 PUSH1 0x2 PUSH2 0x2EB7 SWAP6 ADD SWAP1 PUSH2 0x2AAB JUMP JUMPDEST DUP2 SWAP8 SWAP2 PUSH32 0x0 PUSH32 0x0 PUSH2 0x2B36 JUMP JUMPDEST SWAP6 JUMPDEST DUP5 MLOAD SWAP1 SWAP9 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP10 DUP4 ADD DUP5 DUP2 GT DUP5 DUP3 LT OR PUSH2 0x2FB6 JUMPI DUP8 MSTORE PUSH1 0x0 DUP4 MSTORE DUP1 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI DUP14 SWAP8 PUSH1 0x0 DUP11 SWAP4 PUSH2 0x2F82 DUP3 SWAP7 DUP12 MLOAD SWAP13 DUP14 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH32 0x22C0D9F00000000000000000000000000000000000000000000000000000000 DUP8 MSTORE DUP14 DUP8 ADD MSTORE DUP14 DUP7 ADD MSTORE AND PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x84 DUP4 ADD SWAP1 PUSH2 0x529 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x14E2 JUMPI PUSH2 0x2FA2 JUMPI JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 SWAP8 ADD SWAP7 SWAP2 PUSH2 0x2D46 JUMP JUMPDEST DUP5 GT PUSH2 0x228A JUMPI POP POP MSTORE PUSH1 0x1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x2F91 JUMP JUMPDEST DUP7 PUSH1 0x41 DUP8 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP13 SWAP5 PUSH1 0x0 PUSH2 0x2F03 JUMP JUMPDEST DUP11 DUP11 PUSH1 0x0 SWAP7 PUSH2 0x2E98 JUMP JUMPDEST DUP6 PUSH1 0x11 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST DUP7 PUSH1 0x11 DUP8 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST DUP7 DUP10 MLOAD PUSH32 0x7B9C891600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP2 ISZERO PUSH2 0x2E3F JUMP JUMPDEST SWAP1 SWAP3 DUP10 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x30AC JUMPI JUMPDEST PUSH2 0x309B DUP2 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP2 CODESIZE PUSH2 0x2E2F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3091 JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x2DEB JUMP JUMPDEST DUP11 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP12 POP PUSH2 0x30E2 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x1963 JUMPI PUSH2 0x1952 DUP2 DUP4 PUSH2 0x2694 JUMP JUMPDEST POP SWAP10 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 CODESIZE PUSH2 0x2DC4 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xAE52AD0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x152E JUMPI JUMP JUMPDEST SWAP2 DUP3 CALLDATALOAD DUP4 ADD SWAP2 PUSH2 0x3140 PUSH1 0x20 DUP5 CALLDATALOAD SWAP6 DUP2 DUP7 ADD SWAP6 SUB ADD DUP6 PUSH2 0x3119 JUMP JUMPDEST GT PUSH2 0xACD JUMPI JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP4 ADD SWAP2 PUSH2 0x3140 PUSH1 0x20 DUP5 CALLDATALOAD SWAP6 DUP2 DUP7 ADD SWAP6 SUB ADD DUP6 PUSH2 0x3119 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 EQ PUSH2 0x152E JUMPI PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST SWAP4 SWAP2 SWAP4 PUSH1 0x2B DUP5 LT PUSH2 0xACD JUMPI DUP5 PUSH3 0xFFFFFF PUSH1 0x0 PUSH2 0x3216 SWAP5 PUSH2 0x329D PUSH2 0x3248 SWAP10 CALLDATALOAD SWAP9 DUP10 PUSH1 0x60 SHR SWAP11 DUP12 SWAP11 PUSH2 0x31EA PUSH1 0x17 DUP10 ADD CALLDATALOAD PUSH1 0x60 SHR SWAP14 DUP15 LT SWAP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP15 DUP16 SWAP10 DUP11 SWAP5 PUSH1 0x48 SHR AND SWAP2 PUSH2 0x3314 JUMP JUMPDEST AND SWAP7 DUP12 DUP7 EQ PUSH2 0x32F9 JUMPI PUSH5 0x1000276A4 SWAP11 JUMPDEST PUSH1 0x40 SWAP14 DUP15 SWAP12 DUP13 SWAP4 DUP5 MLOAD SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP2 PUSH2 0x2609 JUMP JUMPDEST SWAP2 AND DUP12 DUP4 ADD MSTORE SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x2694 JUMP JUMPDEST DUP5 DUP9 MLOAD SWAP10 DUP11 SWAP9 DUP10 SWAP8 DUP9 SWAP7 PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP9 MSTORE AND PUSH1 0x4 DUP8 ADD MSTORE DUP13 PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE AND PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0xA4 DUP4 ADD SWAP1 PUSH2 0x529 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x32EE JUMPI PUSH1 0x0 SWAP4 DUP5 SWAP3 PUSH2 0x32B8 JUMPI JUMPDEST POP POP SWAP2 SWAP3 JUMP JUMPDEST SWAP1 DUP1 SWAP5 SWAP3 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x32E7 JUMPI JUMPDEST PUSH2 0x32D0 DUP2 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP PUSH1 0x20 DUP3 MLOAD SWAP3 ADD MLOAD CODESIZE DUP1 PUSH2 0x32B2 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x32C6 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 SWAP11 PUSH2 0x31FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP4 AND DUP5 DUP4 AND GT PUSH2 0x3478 JUMPI JUMPDEST PUSH3 0xFFFFFF SWAP1 DUP5 PUSH1 0x40 MLOAD SWAP5 DUP2 PUSH1 0x20 DUP8 ADD SWAP6 AND DUP6 MSTORE AND PUSH1 0x40 DUP6 ADD MSTORE AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x9EC JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 PUSH2 0x2C37 SWAP2 DUP4 PUSH1 0x40 MSTORE DUP5 MLOAD SWAP1 KECCAK256 SWAP4 PUSH2 0x344B PUSH1 0xA0 DUP3 ADD SWAP6 PUSH32 0x0 SWAP1 PUSH32 0x0 DUP9 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x55 SWAP5 SWAP3 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x60 SHL AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF60 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x2694 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 PUSH2 0x3336 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SWAP4 DUP2 SWAP4 GAS CALL ISZERO PUSH2 0x3490 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4554485F5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 PUSH1 0x44 SWAP3 PUSH1 0x20 SWAP6 PUSH1 0x40 MLOAD SWAP4 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE GAS CALL RETURNDATASIZE ISZERO PUSH1 0x1F RETURNDATASIZE GT PUSH1 0x1 PUSH1 0x0 MLOAD EQ AND OR AND ISZERO PUSH2 0x3541 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0xF4A60FDC5D1CC8F6B091352295 0xB3 0xEB MSIZE 0xAA PUSH18 0xC70869C4C7FC64B3C2CEB304AE64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "348:1654:0:-:0;;;;;;;;;;;;;-1:-1:-1;;348:1654:0;;;;-1:-1:-1;;;;;348:1654:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1181:28:3;:58;;;;;-1:-1:-1;1181:92:3;;;;;-1:-1:-1;1181:138:3;;;;;-1:-1:-1;1177:176:3;;;;348:1654:0;;1368:37:3;:78;;;;-1:-1:-1;1364:141:3;;348:1654:0;;;;1569:26:3;:31;:64;;;;-1:-1:-1;1565:102:3;;348:1654:0;;;;1678:44:3;348:1654:0;;;;1732:28:3;348:1654:0;;;;1770:37:3;348:1654:0;1817:56:3;;348:1654:0;;1883:37:3;;;;348:1654:0;;1930:56:3;;;;-1:-1:-1;;1258:17:14;;348:1654:0;231:10:2;;-1:-1:-1;;;;;;231:10:2;;;;;348:1654:0;;;;;;1930:56:3;348:1654:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1817:56:3;348:1654:0;;;;;;;;;;;;;;;;;;;;;;;;;;1565:102:3;348:1654:0;;-1:-1:-1;;;1642:25:3;;;;;1569:64;348:1654:0;;;;;1604:24:3;:29;1569:64;;1368:78;348:1654:0;;;1409:37:3;1368:78;;1181:138;348:1654:0;1289:30:3;;-1:-1:-1;1181:138:3;;;;:92;348:1654:0;;1243:30:3;;-1:-1:-1;1181:92:3;;;:58;348:1654:0;;1213:26:3;;-1:-1:-1;1181:58:3;;;348:1654:0;;;;-1:-1:-1;348:1654:0;;;;;-1:-1:-1;348:1654:0;;-1:-1:-1;348:1654:0;;;;;-1:-1:-1;;;;;348:1654:0;;;;;;:::o"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 10023,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_array_address_dyn": {
									"entryPoint": 10234,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_array_bytes_calldata_dyn_calldata": {
									"entryPoint": 1272,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_bytes": {
									"entryPoint": 10163,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_bytes_calldata": {
									"entryPoint": 1221,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_struct_PermitDetails": {
									"entryPoint": 10075,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_uint112_fromMemory": {
									"entryPoint": 11366,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_uint112t_uint112t_uint32_fromMemory": {
									"entryPoint": 11393,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_uint48": {
									"entryPoint": 10056,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_bytes": {
									"entryPoint": 1321,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_bytes_calldata": {
									"entryPoint": 9737,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_packed_stringliteral_8b1a_address_bytes32_bytes32": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_struct_PermitDetails": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"array_allocation_size_array_struct_AllowanceTransferDetails_dyn": {
									"entryPoint": 9999,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_allocation_size_bytes": {
									"entryPoint": 9941,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 12569,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_uint256": {
									"entryPoint": 10668,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_uint256": {
									"entryPoint": 10649,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_uint256": {
									"entryPoint": 10943,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 9876,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_19571": {
									"entryPoint": 9800,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"finalize_allocation_19572": {
									"entryPoint": 9828,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"finalize_allocation_19575": {
									"entryPoint": 9848,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_computePoolAddress": {
									"entryPoint": 13076,
									"id": 3153,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_execute_inner": {
									"entryPoint": 1415,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_map": {
									"entryPoint": 10364,
									"id": 881,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_pairForPreSorted": {
									"entryPoint": 11062,
									"id": 1810,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"fun_pay": {
									"entryPoint": 10424,
									"id": 1293,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_payOrPermit2Transfer": {
									"entryPoint": 10956,
									"id": 1687,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_permit2TransferFrom": {
									"entryPoint": 10725,
									"id": 1608,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_safeTransfer": {
									"entryPoint": 13550,
									"id": 3839,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_safeTransferETH": {
									"entryPoint": 13440,
									"id": 3797,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_sortTokens": {
									"entryPoint": 11326,
									"id": 2073,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_swap": {
									"entryPoint": 12689,
									"id": 3101,
									"parameterSlots": 5,
									"returnSlots": 3
								},
								"fun_toLengthOffset": {
									"entryPoint": 12615,
									"id": 2495,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_toLengthOffset_19565": {
									"entryPoint": 12582,
									"id": 2495,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_v2Swap": {
									"entryPoint": 11447,
									"id": 2283,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"memory_array_index_access_struct_AllowanceTransferDetails_dyn": {
									"entryPoint": 10923,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"memory_array_index_access_struct_AllowanceTransferDetails_dyn_19578": {
									"entryPoint": 10894,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"memory_array_index_access_struct_AllowanceTransferDetails_dyn_19581": {
									"entryPoint": 10907,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"negate_int256": {
									"entryPoint": 12644,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"906": [
									{
										"length": 32,
										"start": 7126
									},
									{
										"length": 32,
										"start": 7567
									},
									{
										"length": 32,
										"start": 7673
									},
									{
										"length": 32,
										"start": 7785
									}
								],
								"910": [
									{
										"length": 32,
										"start": 3526
									},
									{
										"length": 32,
										"start": 3776
									},
									{
										"length": 32,
										"start": 6768
									},
									{
										"length": 32,
										"start": 8166
									},
									{
										"length": 32,
										"start": 10752
									}
								],
								"913": [
									{
										"length": 32,
										"start": 4988
									},
									{
										"length": 32,
										"start": 5975
									},
									{
										"length": 32,
										"start": 11997
									}
								],
								"916": [
									{
										"length": 32,
										"start": 4955
									},
									{
										"length": 32,
										"start": 5942
									},
									{
										"length": 32,
										"start": 11964
									}
								],
								"919": [
									{
										"length": 32,
										"start": 13259
									}
								],
								"922": [
									{
										"length": 32,
										"start": 13225
									}
								]
							},
							"linkReferences": {},
							"object": "604060c0815260048036101561001f575b5050361561001d57600080fd5b005b600091823560e01c806324856bc3146103fe5780633593564c146102c35763fa461e331461004d5750610010565b346102bf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bf57813590602435926044359067ffffffffffffffff918281116102bb576100a590369083016104c5565b919092878613908115806102b1575b610289578385018686820312610285578535918211610285576100d89186016127b3565b5060208401359373ffffffffffffffffffffffffffffffffffffffff938486168096036102855761010891613126565b959097602b891061025d5786359260178460601c98019561013762ffffff883560601c9660481c16868b613314565b33911603610235571561022b57508186105b15610161575050505061015e93503391612acc565b80f35b939594509192909190604287106101e557505050836017116101e1577f80000000000000000000000000000000000000000000000000000000000000008210156101e1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96101db9401916101d63391613164565b613191565b50505080f35b8480fd5b919695509293915084548411610203575061015e9394503391612acc565b8590517f739dbe52000000000000000000000000000000000000000000000000000000008152fd5b9650858210610149565b8483517f32b13d91000000000000000000000000000000000000000000000000000000008152fd5b8382517f3b99b53d000000000000000000000000000000000000000000000000000000008152fd5b8980fd5b8286517f316cf0eb000000000000000000000000000000000000000000000000000000008152fd5b50888813156100b4565b8680fd5b8280fd5b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bf5767ffffffffffffffff82358181116101e15761030d90369085016104c5565b916024359081116103fa5761032590369086016104f8565b92909160443542116103d2573330146103c3576001958654958773ffffffffffffffffffffffffffffffffffffffff88160361039d5750509185949391610394937fffffffffffffffffffffffff00000000000000000000000000000000000000009586339116178755610587565b81541617905580f35b517f6f5ffb7e000000000000000000000000000000000000000000000000000000008152fd5b909192935061015e9450610587565b8585517f5bf6f916000000000000000000000000000000000000000000000000000000008152fd5b8580fd5b50807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bf5767ffffffffffffffff82358181116101e15761044790369085016104c5565b916024359081116103fa5761045f90369086016104f8565b9290913330146103c3576001958654958773ffffffffffffffffffffffffffffffffffffffff88160361039d5750509185949391610394937fffffffffffffffffffffffff00000000000000000000000000000000000000009586339116178755610587565b9181601f840112156104f35782359167ffffffffffffffff83116104f357602083818601950101116104f357565b600080fd5b9181601f840112156104f35782359167ffffffffffffffff83116104f3576020808501948460051b0101116104f357565b919082519283825260005b8481106105735750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610534565b9392918160805260a05281036125df579160005b6080518110156125d957838110156125aa5760a051917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1833603018260051b84013512156104f3578160051b8301358301803567ffffffffffffffff81116104f35760209036039101136104f3576060927f40000000000000000000000000000000000000000000000000000000000000008383013516612580576001908284013560f81c603f1660208110156123275760108110156122f6576008808210156112a4575080610afe575061067f8460051b82013560a05101602081359101613147565b90978560051b83013560a051019760a0890135600014610af75773ffffffffffffffffffffffffffffffffffffffff60015416995b60406106c360208c013561287c565b9a01359084819c917f80000000000000000000000000000000000000000000000000000000000000008414610a3d575b50949b9450905b7f80000000000000000000000000000000000000000000000000000000000000008110156104f35760428510610a3757305b85602b116104f3578c90601782013560601c9262ffffff8335958660601c9661077173ffffffffffffffffffffffffffffffffffffffff93849260481c16888a613314565b169286881015610a1b57826401000276a4925b602b60405198604060208b01528160608b015260808a0137600060ab89015216604087015260a086528560c081011067ffffffffffffffff60c0880111176109ec578260409560c0880187527f128acb080000000000000000000000000000000000000000000000000000000060c08901521660c487015286881060e48701526101048601521661012484015260a061014484015260c08301907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408461084e610164820182610529565b030190600060c08601915af19182156109e0576000918293610998575b5061087c9310156109915750613164565b604284106108be57309a846017116104f3576017019a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe99490940193906106fa565b9197959950975060609150918560051b013560a05101013511610967575b158061093a575b6108f3575060010192909261059b565b9061093660409283519384937f2c4029e9000000000000000000000000000000000000000000000000000000008552600485015260248401526044830190610529565b0390fd5b507f80000000000000000000000000000000000000000000000000000000000000008286013516156108e3565b60046040517f39d35496000000000000000000000000000000000000000000000000000000008152fd5b9050613164565b9250906040833d6040116109d8575b816109b760409360c08401612694565b810103126109d5575060c082015160e090920151919061087c61086b565b80fd5b3d91506109a7565b6040513d6000823e3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8273fffd8963efd1fc6a506488495d951d5263988d2592610784565b8a61072c565b60149192935010610acd576020602491604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301523560601c5afa9081156109e057600091610a9b575b509038806106f3565b906020823d602011610ac5575b81610ab560209383612694565b810103126109d557505138610a92565b3d9150610aa8565b60046040517f3b99b53d000000000000000000000000000000000000000000000000000000008152fd5b30996106b4565b9296949260018103610c2b57508360051b81013560a05101604091610b2c8383013592602081359101613147565b90918760051b013560a051019160a0830135600014610c245773ffffffffffffffffffffffffffffffffffffffff60015416915b6060610b6f602086013561287c565b9401356000557f80000000000000000000000000000000000000000000000000000000000000008510156104f357610baa936101d686613164565b90919015610c155750610bbc90613164565b03610bec57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000555b6108dc565b600490517fd4e0248e000000000000000000000000000000000000000000000000000000008152fd5b610c1f9150613164565b610bbc565b3091610b60565b60028103610c7a5750610be79073ffffffffffffffffffffffffffffffffffffffff60015416908560051b013560a0510190610c6a604083013561287c565b90602060608401359301356129e5565b60038103610f8557508360051b81013560a051019081358201906040838303126104f357602083013567ffffffffffffffff81116104f35760608185018403126104f35760405193610ccb85612678565b6020828201013567ffffffffffffffff81116104f3578282010160208501603f820112156104f3576020810135610d018161270f565b91610d0f6040519384612694565b81835260208301906020880160408460071b830101116104f35760408101915b60408460071b8301018310610f69575050505090606092918652610d57604083830101612727565b602087015201013560408401528560051b013560a0510160408101359167ffffffffffffffff83116104f357610d949260208092019201016127b3565b5073ffffffffffffffffffffffffffffffffffffffff600154169073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156104f357604051917f2a2d80d10000000000000000000000000000000000000000000000000000000083526004830152606060248301528160c48101825190606060648401528151809152602060e484019201906000905b808210610f025750505060209060408473ffffffffffffffffffffffffffffffffffffffff846000970151166084860152015160a484015283838203917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc830160448601525201818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156109e057610ef3575b506108dc565b610efc90612664565b38610eed565b91949350916020608082610f5a600194895160609073ffffffffffffffffffffffffffffffffffffffff80825116845260208201511660208401528165ffffffffffff91826040820151166040860152015116910152565b01950192018593949291610e40565b6020608091610f7a828c018661275b565b815201920191610d2f565b600491908281036110f157508460051b013560a0510190606082013590604073ffffffffffffffffffffffffffffffffffffffff6020610fc78387013561287c565b950135168061101e575047928310610ff857505080610fe8575b50506108dc565b610ff191613480565b3880610fe1565b517f6a12f104000000000000000000000000000000000000000000000000000000008152fd5b9391908051937f70a082310000000000000000000000000000000000000000000000000000000085523083860152602085602481895afa9485156110e6576000956110b2575b50841061108c5750508161107b575b5050506108dc565b611084926134ee565b388080611073565b517f675cae38000000000000000000000000000000000000000000000000000000008152fd5b90946020823d6020116110de575b816110cd60209383612694565b810103126109d55750519338611064565b3d91506110c0565b82513d6000823e3d90fd5b600581036111255750610be791508460051b013560a05101611116604082013561287c565b602060608301359201356128b8565b6006810361127457508460051b81013560a0510160608101359061114d60408092013561287c565b9282158015611269575b61124157602073ffffffffffffffffffffffffffffffffffffffff918960051b013560a051010135169384156000146111a5575050610be7925061119e6127109147612999565b0490613480565b8151907f70a082310000000000000000000000000000000000000000000000000000000082523090820152602081602481885afa9182156112375750600091611203575b506111fc610be794939261271092612999565b04916134ee565b906020823d60201161122f575b8161121d60209383612694565b810103126109d55750516111fc6111e9565b3d9150611210565b513d6000823e3d90fd5b8482517fdeaa01e6000000000000000000000000000000000000000000000000000000008152fd5b506127108311611157565b82602491604051917fd76a1e9e000000000000000000000000000000000000000000000000000000008352820152fd5b93979593810361158657508360051b81013560a05101906040906112dd6112d48385013594602081359101613147565b908101906127fa565b908660051b81013560a051019060a082013560001461157a5761131d602073ffffffffffffffffffffffffffffffffffffffff60015416935b013561287c565b9473ffffffffffffffffffffffffffffffffffffffff926113a06113588561134488612a8e565b51168661135089612a9b565b511690612c3e565b907f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612b36565b91828161155d575b50505083517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161152e576113e2849186612aab565b5116938551937f70a082310000000000000000000000000000000000000000000000000000000090818652881692600498848a88015260249360208886818c5afa978815611523576000986114ed575b509161144391602096959493612cb7565b8751968793849283528a8301525afa9283156114e2576000936114ad575b5090606061147b928960051b013560a05101013592612abf565b106114875750506108dc565b517f849eaf98000000000000000000000000000000000000000000000000000000008152fd5b90926020823d6020116114da575b816114c860209383612694565b810103126109d5575051916060611461565b3d91506114bb565b84513d6000823e3d90fd5b90976020823d60201161151b575b8161150860209383612694565b810103126109d557505196611443611432565b3d91506114fb565b8a513d6000823e3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b611572928661156b89612a8e565b5116612acc565b3880826113a8565b61131d60203093611316565b600981036119a057506115ab6112d48560051b83013560a05101602081359101613147565b8460051b82013560a051019060a0820135600014611994576115e9602073ffffffffffffffffffffffffffffffffffffffff6001541693013561287c565b90600092600282511061196a5760408860051b86013560a051010135948251807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81011161152e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01805b6116c557506060908960051b013560a051010135851161169b57610be794846116969273ffffffffffffffffffffffffffffffffffffffff61156b86612a8e565b612cb7565b60046040517f8ab0bc16000000000000000000000000000000000000000000000000000000008152fd5b9594507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860186811161152e5761177b956117189173ffffffffffffffffffffffffffffffffffffffff92839187612aab565b511690611731836117298b89612aab565b511683612c3e565b8199917f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612b36565b91604051907f0902f1ac00000000000000000000000000000000000000000000000000000000825260049460608387818489165afa9283156109e0576000908194611936575b506dffffffffffffffffffffffffffff80911693169a16146000146119305797915b9780158015611928575b6118ff57816117fb91612999565b916103e8928381029381850414901517156118d1579061181a91612abf565b906103e5918281029281840414901517156118a35790611839916129ac565b9060018201809211611875575095801561152e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180611655565b6011907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6011837f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b836040517f7b9c8916000000000000000000000000000000000000000000000000000000008152fd5b5082156117ed565b916117e3565b905061195a91935060603d8111611963575b6119528183612694565b810190612c81565b509290386117c1565b503d611948565b60046040517f20db8267000000000000000000000000000000000000000000000000000000008152fd5b6115e960203093611316565b600a8103611b5d57508360051b81013560a0510180358101906020820191039060e0918281126104f35760c08091126104f3576040928351926119e284612678565b6119f98160208b60051b89013560a051010161275b565b8452611a1060a08a60051b88013581510101612727565b9560208501968752858501938a60051b82013560a05101013584528960051b013560a05101918201359167ffffffffffffffff83116104f357611a5692016020016127b3565b9073ffffffffffffffffffffffffffffffffffffffff92837f000000000000000000000000000000000000000000000000000000000000000016918460015416833b156104f357611b47611b27956000979388948a519b8c998a9889977f2b67b570000000000000000000000000000000000000000000000000000000008952600489015260248801905160609073ffffffffffffffffffffffffffffffffffffffff80825116845260208201511660208401528165ffffffffffff91826040820151166040860152015116910152565b511660a48501525160c484015261010060e4840152610104830190610529565b03925af19081156112375750610ef357506108dc565b600b8103611d2457508360051b013560a051016040611b8360208284013593013561287c565b91807f80000000000000000000000000000000000000000000000000000000000000008103611cf157505047915b82611bbe575050506108dc565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690813b156104f3578351927fd0e30db000000000000000000000000000000000000000000000000000000000845260049360008186818a885af18015611ce657611cd7575b501690308203611c4d575b5050611073565b6020926000604492865197889586947fa9059cbb00000000000000000000000000000000000000000000000000000000865285015260248401525af19081156112375750611c9f575b80808080611c46565b6020813d602011611ccf575b81611cb860209383612694565b810103126104f35751801515036104f35738611c96565b3d9150611cab565b611ce090612664565b38611c3b565b86513d6000823e3d90fd5b929092471015611bb157600482517f6a12f104000000000000000000000000000000000000000000000000000000008152fd5b600c8103611f2b5750611d4460208560051b83013560a05101013561287c565b90604051907f70a0823100000000000000000000000000000000000000000000000000000000825230600483015260208260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156109e057600092611ef6575b506040908660051b013560a0510101358110611ecc5780611de25750506108dc565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156104f3576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081528160048201526000816024818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156109e057611ebd575b5073ffffffffffffffffffffffffffffffffffffffff82163014610fe157610ff191613480565b611ec690612664565b38611e96565b60046040517f6a12f104000000000000000000000000000000000000000000000000000000008152fd5b90916020823d602011611f23575b81611f1160209383612694565b810103126109d5575051906040611dc0565b3d9150611f04565b600d810361218a57508360051b013560a051018035810160208101916020818303126104f35760208101359067ffffffffffffffff82116104f3570182603f820112156104f357602081013590611f818261270f565b93604093611f9185519687612694565b838652602086019285849560071b8201019283116104f3578501925b828410612128575050505073ffffffffffffffffffffffffffffffffffffffff90816001541684519060005b8281106120bc57505050817f00000000000000000000000000000000000000000000000000000000000000001691823b156104f35783517f0d58b1db000000000000000000000000000000000000000000000000000000008152602060048201529451602486018190528592604484019290916000915b81831061207857505050509181600081819503925af19081156112375750610ef357506108dc565b91938395506080602091846060600195975182815116845282868201511686850152828d820151168d85015201511660608201520195019301909187949392612050565b81856120c8838a612aab565b515116036120ff577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461152e57600101611fd9565b600486517fe7002877000000000000000000000000000000000000000000000000000000008152fd5b6080602085840301126104f3576020608091875161214581612648565b61214e87612727565b815261215b838801612727565b8382015261216a898801612727565b8982015261217a60608801612727565b6060820152815201930192611fad565b909150600e81036122f657506040908151907f70a082310000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff9160208284828a60051b85013560a0510101351694600495868301526024968791898c60051b87013560a051010135165afa9182156122eb576000926122b6575b506060908760051b013560a0510101351192831593612237575050506108dc565b80517fa328167200000000000000000000000000000000000000000000000000000000602082015282815293945083810192909167ffffffffffffffff84118585101761228a5750505290388080611073565b6041907f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b90916020823d6020116122e3575b816122d160209383612694565b810103126109d5575051906060612216565b3d91506122c4565b85513d6000823e3d90fd5b602490604051907fd76a1e9e0000000000000000000000000000000000000000000000000000000082526004820152fd5b91969395949291602181036122f657506123508660051b82013560a05101602081359101613126565b6123778860059993991b84013560a051016020806040830135830192830301910135613119565b8260051b84013560a051013510610acd576123ca90604097949751987f24856bc30000000000000000000000000000000000000000000000000000000060208b0152604060248b015260648a0191612609565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc88820301604489015260208260051b84013560a051016040810135010135815260208101968260051b84013560a05101946040602080828901358901013560051b85010196818101350101906000965b60208660051b88013560a0510160408101350101358810156124fd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858203018b528560051b87013560a0510160408101350183357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1823603018112156104f3570189810191906040013567ffffffffffffffff81116104f35780360383136104f3578e9260209283926124ef92612609565b94019b01970196999161243b565b9150999397985083919a50600095508594506125409250037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612694565b60208151910182305af1903d1561257b57503d61255c816126d5565b9061256a6040519283612694565b81523d6000602083013e5b906108dc565b612575565b60046040517fe68ec04c000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b50509050565b60046040517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b6080810190811067ffffffffffffffff8211176109ec57604052565b67ffffffffffffffff81116109ec57604052565b6060810190811067ffffffffffffffff8211176109ec57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109ec57604052565b67ffffffffffffffff81116109ec57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b67ffffffffffffffff81116109ec5760051b60200190565b359073ffffffffffffffffffffffffffffffffffffffff821682036104f357565b359065ffffffffffff821682036104f357565b91908260809103126104f35760405161277381612648565b60606127ae81839561278481612727565b855261279260208201612727565b60208601526127a360408201612748565b604086015201612748565b910152565b81601f820112156104f3578035906127ca826126d5565b926127d86040519485612694565b828452602083830101116104f357816000926020809301838601378301015290565b60209081818403126104f35780359067ffffffffffffffff82116104f357019180601f840112156104f35782356128308161270f565b9361283e6040519586612694565b818552838086019260051b8201019283116104f3578301905b828210612865575050505090565b83809161287184612727565b815201910190612857565b73ffffffffffffffffffffffffffffffffffffffff90808216600181036128a65750506001541690565b9091506002036128b557503090565b90565b9092919073ffffffffffffffffffffffffffffffffffffffff16806128e457506128e29192613480565b565b7f80000000000000000000000000000000000000000000000000000000000000008214612917575b926128e292936134ee565b9050604051927f70a08231000000000000000000000000000000000000000000000000000000008452306004850152602084602481855afa9384156109e057600094612966575b50929061290c565b6020813d8211612991575b8161297e60209383612694565b810103126101e1575193506128e261295e565b3d9150612971565b8181029291811591840414171561152e57565b81156129b6570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b919273ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001693843b156104f35760009484869281608496816040519b8c9a8b997f36c78516000000000000000000000000000000000000000000000000000000008b521660048a01521660248801521660448601521660648401525af180156109e057612a855750565b6128e290612664565b8051156125aa5760200190565b8051600110156125aa5760400190565b80518210156125aa5760209160051b010190565b9190820391821161152e57565b92919073ffffffffffffffffffffffffffffffffffffffff8082163003612af85750506128e2926128b8565b8084959411612b0c576128e29416926129e5565b60046040517fc4bd89a9000000000000000000000000000000000000000000000000000000008152fd5b9173ffffffffffffffffffffffffffffffffffffffff93612c37916040519060208201927fffffffffffffffffffffffffffffffffffffffff000000000000000000000000809260601b16845260601b16603482015260288152612b9981612678565b519020612c0b604051938492602084019687917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000605594927fff00000000000000000000000000000000000000000000000000000000000000855260601b166001840152601583015260358201520190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612694565b5190201690565b73ffffffffffffffffffffffffffffffffffffffff8281169082161015612c625791565b9091565b51906dffffffffffffffffffffffffffff821682036104f357565b908160609103126104f357612c9581612c66565b916040612ca460208401612c66565b92015163ffffffff811681036104f35790565b91909160028151106130ef578051156125aa579073ffffffffffffffffffffffffffffffffffffffff602092612cf68285830151168361135084612a9b565b50938151937ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86019501916000965b868810612d5857505050505050505050565b85612d638987612aab565b5116928680612d7560018c0189612aab565b51169116916040918251957f0902f1ac000000000000000000000000000000000000000000000000000000008752606092600493808986818a5afa988915611ce657908c91600091829b6130c4575b5050911682149787949392916dffffffffffffffffffffffffffff918216911689156130be575b8651958680947f70a082310000000000000000000000000000000000000000000000000000000082528a8883015260249889915afa9283156130b357600093613084575b508083039181159384801561307c575b61305457826103e5808602958604149114171561302757612e609083612999565b926103e8808302928304141715612ffa5791612e858f979695949392612e8b93613119565b906129ac565b9715612ff0578a8a600099965b8b811015612fe35791611350612f019994926002612eb7950190612aab565b8197917f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612b36565b955b8451909867ffffffffffffffff9289830184811184821017612fb657875260008352803b156104f3578d9760008a93612f8282968b519c8d97889687957f022c0d9f0000000000000000000000000000000000000000000000000000000087528d8701528d860152166044840152608060648401526084830190610529565b03925af180156114e257612fa2575b505050505060019097019691612d46565b841161228a57505052600138808080612f91565b866041877f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b505050508c946000612f03565b8a8a600096612e98565b856011867f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b866011877f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b8689517f7b9c8916000000000000000000000000000000000000000000000000000000008152fd5b508115612e3f565b90928982813d83116130ac575b61309b8183612694565b810103126109d55750519138612e2f565b503d613091565b87513d6000823e3d90fd5b90612deb565b8a97969594939b506130e29250803d10611963576119528183612694565b5099919293949538612dc4565b60046040517fae52ad0c000000000000000000000000000000000000000000000000000000008152fd5b9190820180921161152e57565b918235830191613140602084359581860195030185613119565b11610acd57565b916060830135830191613140602084359581860195030185613119565b7f8000000000000000000000000000000000000000000000000000000000000000811461152e5760000390565b939193602b8410610acd578462ffffff60006132169461329d6132489935988960601c9a8b9a6131ea601789013560601c9d8e109c73ffffffffffffffffffffffffffffffffffffffff9e8f998a9460481c1691613314565b16968b86146132f9576401000276a49a5b60409d8e9b8c93845196879560208701526060860191612609565b91168b830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612694565b848851998a98899788967f128acb080000000000000000000000000000000000000000000000000000000088521660048701528c6024870152604486015216606484015260a0608484015260a4830190610529565b03925af19081156132ee5760009384926132b8575b50509192565b9080949250813d83116132e7575b6132d08183612694565b810103126109d557506020825192015138806132b2565b503d6132c6565b83513d6000823e3d90fd5b73fffd8963efd1fc6a506488495d951d5263988d259a6131fb565b73ffffffffffffffffffffffffffffffffffffffff9283831684831611613478575b62ffffff90846040519481602087019516855216604085015216606083015260608252608082019082821067ffffffffffffffff8311176109ec577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80612c379183604052845190209361344b60a08201957f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000088917fffffffffffffffffffffffffffffffffffffffff000000000000000000000000605594927fff00000000000000000000000000000000000000000000000000000000000000855260601b166001840152601583015260358201520190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60810184520182612694565b909190613336565b600080809381935af11561349057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152fd5b60009182604492602095604051937fa9059cbb000000000000000000000000000000000000000000000000000000008552600485015260248401525af13d15601f3d116001600051141617161561354157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152fdfea26469706673582212206cf4a60fdc5d1cc8f6b091352295b3eb59aa71c70869c4c7fc64b3c2ceb304ae64736f6c63430008110033",
							"opcodes": "PUSH1 0x40 PUSH1 0xC0 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x1F JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x24856BC3 EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x3593564C EQ PUSH2 0x2C3 JUMPI PUSH4 0xFA461E33 EQ PUSH2 0x4D JUMPI POP PUSH2 0x10 JUMP JUMPDEST CALLVALUE PUSH2 0x2BF JUMPI PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x2BF JUMPI DUP2 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP3 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP2 GT PUSH2 0x2BB JUMPI PUSH2 0xA5 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x4C5 JUMP JUMPDEST SWAP2 SWAP1 SWAP3 DUP8 DUP7 SGT SWAP1 DUP2 ISZERO DUP1 PUSH2 0x2B1 JUMPI JUMPDEST PUSH2 0x289 JUMPI DUP4 DUP6 ADD DUP7 DUP7 DUP3 SUB SLT PUSH2 0x285 JUMPI DUP6 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x285 JUMPI PUSH2 0xD8 SWAP2 DUP7 ADD PUSH2 0x27B3 JUMP JUMPDEST POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 DUP7 AND DUP1 SWAP7 SUB PUSH2 0x285 JUMPI PUSH2 0x108 SWAP2 PUSH2 0x3126 JUMP JUMPDEST SWAP6 SWAP1 SWAP8 PUSH1 0x2B DUP10 LT PUSH2 0x25D JUMPI DUP7 CALLDATALOAD SWAP3 PUSH1 0x17 DUP5 PUSH1 0x60 SHR SWAP9 ADD SWAP6 PUSH2 0x137 PUSH3 0xFFFFFF DUP9 CALLDATALOAD PUSH1 0x60 SHR SWAP7 PUSH1 0x48 SHR AND DUP7 DUP12 PUSH2 0x3314 JUMP JUMPDEST CALLER SWAP2 AND SUB PUSH2 0x235 JUMPI ISZERO PUSH2 0x22B JUMPI POP DUP2 DUP7 LT JUMPDEST ISZERO PUSH2 0x161 JUMPI POP POP POP POP PUSH2 0x15E SWAP4 POP CALLER SWAP2 PUSH2 0x2ACC JUMP JUMPDEST DUP1 RETURN JUMPDEST SWAP4 SWAP6 SWAP5 POP SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x42 DUP8 LT PUSH2 0x1E5 JUMPI POP POP POP DUP4 PUSH1 0x17 GT PUSH2 0x1E1 JUMPI PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 LT ISZERO PUSH2 0x1E1 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9 PUSH2 0x1DB SWAP5 ADD SWAP2 PUSH2 0x1D6 CALLER SWAP2 PUSH2 0x3164 JUMP JUMPDEST PUSH2 0x3191 JUMP JUMPDEST POP POP POP DUP1 RETURN JUMPDEST DUP5 DUP1 REVERT JUMPDEST SWAP2 SWAP7 SWAP6 POP SWAP3 SWAP4 SWAP2 POP DUP5 SLOAD DUP5 GT PUSH2 0x203 JUMPI POP PUSH2 0x15E SWAP4 SWAP5 POP CALLER SWAP2 PUSH2 0x2ACC JUMP JUMPDEST DUP6 SWAP1 MLOAD PUSH32 0x739DBE5200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP7 POP DUP6 DUP3 LT PUSH2 0x149 JUMP JUMPDEST DUP5 DUP4 MLOAD PUSH32 0x32B13D9100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP4 DUP3 MLOAD PUSH32 0x3B99B53D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP3 DUP7 MLOAD PUSH32 0x316CF0EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP9 DUP9 SGT ISZERO PUSH2 0xB4 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x2BF JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x1E1 JUMPI PUSH2 0x30D SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x4C5 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x325 SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x4F8 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0x44 CALLDATALOAD TIMESTAMP GT PUSH2 0x3D2 JUMPI CALLER ADDRESS EQ PUSH2 0x3C3 JUMPI PUSH1 0x1 SWAP6 DUP7 SLOAD SWAP6 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SUB PUSH2 0x39D JUMPI POP POP SWAP2 DUP6 SWAP5 SWAP4 SWAP2 PUSH2 0x394 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP6 DUP7 CALLER SWAP2 AND OR DUP8 SSTORE PUSH2 0x587 JUMP JUMPDEST DUP2 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST MLOAD PUSH32 0x6F5FFB7E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 POP PUSH2 0x15E SWAP5 POP PUSH2 0x587 JUMP JUMPDEST DUP6 DUP6 MLOAD PUSH32 0x5BF6F91600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x2BF JUMPI PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x1E1 JUMPI PUSH2 0x447 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x4C5 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x3FA JUMPI PUSH2 0x45F SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x4F8 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 CALLER ADDRESS EQ PUSH2 0x3C3 JUMPI PUSH1 0x1 SWAP6 DUP7 SLOAD SWAP6 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SUB PUSH2 0x39D JUMPI POP POP SWAP2 DUP6 SWAP5 SWAP4 SWAP2 PUSH2 0x394 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP6 DUP7 CALLER SWAP2 AND OR DUP8 SSTORE PUSH2 0x587 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x4F3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x4F3 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x4F3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x4F3 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x573 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP7 SWAP8 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x534 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 DUP2 PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE DUP2 SUB PUSH2 0x25DF JUMPI SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x80 MLOAD DUP2 LT ISZERO PUSH2 0x25D9 JUMPI DUP4 DUP2 LT ISZERO PUSH2 0x25AA JUMPI PUSH1 0xA0 MLOAD SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP4 CALLDATASIZE SUB ADD DUP3 PUSH1 0x5 SHL DUP5 ADD CALLDATALOAD SLT ISZERO PUSH2 0x4F3 JUMPI DUP2 PUSH1 0x5 SHL DUP4 ADD CALLDATALOAD DUP4 ADD DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH1 0x20 SWAP1 CALLDATASIZE SUB SWAP2 ADD SGT PUSH2 0x4F3 JUMPI PUSH1 0x60 SWAP3 PUSH32 0x4000000000000000000000000000000000000000000000000000000000000000 DUP4 DUP4 ADD CALLDATALOAD AND PUSH2 0x2580 JUMPI PUSH1 0x1 SWAP1 DUP3 DUP5 ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0x3F AND PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2327 JUMPI PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x22F6 JUMPI PUSH1 0x8 DUP1 DUP3 LT ISZERO PUSH2 0x12A4 JUMPI POP DUP1 PUSH2 0xAFE JUMPI POP PUSH2 0x67F DUP5 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3147 JUMP JUMPDEST SWAP1 SWAP8 DUP6 PUSH1 0x5 SHL DUP4 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP8 PUSH1 0xA0 DUP10 ADD CALLDATALOAD PUSH1 0x0 EQ PUSH2 0xAF7 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP10 JUMPDEST PUSH1 0x40 PUSH2 0x6C3 PUSH1 0x20 DUP13 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP11 ADD CALLDATALOAD SWAP1 DUP5 DUP2 SWAP13 SWAP2 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP5 EQ PUSH2 0xA3D JUMPI JUMPDEST POP SWAP5 SWAP12 SWAP5 POP SWAP1 JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 LT ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x42 DUP6 LT PUSH2 0xA37 JUMPI ADDRESS JUMPDEST DUP6 PUSH1 0x2B GT PUSH2 0x4F3 JUMPI DUP13 SWAP1 PUSH1 0x17 DUP3 ADD CALLDATALOAD PUSH1 0x60 SHR SWAP3 PUSH3 0xFFFFFF DUP4 CALLDATALOAD SWAP6 DUP7 PUSH1 0x60 SHR SWAP7 PUSH2 0x771 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 SWAP3 PUSH1 0x48 SHR AND DUP9 DUP11 PUSH2 0x3314 JUMP JUMPDEST AND SWAP3 DUP7 DUP9 LT ISZERO PUSH2 0xA1B JUMPI DUP3 PUSH5 0x1000276A4 SWAP3 JUMPDEST PUSH1 0x2B PUSH1 0x40 MLOAD SWAP9 PUSH1 0x40 PUSH1 0x20 DUP12 ADD MSTORE DUP2 PUSH1 0x60 DUP12 ADD MSTORE PUSH1 0x80 DUP11 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0xAB DUP10 ADD MSTORE AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0xA0 DUP7 MSTORE DUP6 PUSH1 0xC0 DUP2 ADD LT PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xC0 DUP9 ADD GT OR PUSH2 0x9EC JUMPI DUP3 PUSH1 0x40 SWAP6 PUSH1 0xC0 DUP9 ADD DUP8 MSTORE PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 PUSH1 0xC0 DUP10 ADD MSTORE AND PUSH1 0xC4 DUP8 ADD MSTORE DUP7 DUP9 LT PUSH1 0xE4 DUP8 ADD MSTORE PUSH2 0x104 DUP7 ADD MSTORE AND PUSH2 0x124 DUP5 ADD MSTORE PUSH1 0xA0 PUSH2 0x144 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF40 DUP5 PUSH2 0x84E PUSH2 0x164 DUP3 ADD DUP3 PUSH2 0x529 JUMP JUMPDEST SUB ADD SWAP1 PUSH1 0x0 PUSH1 0xC0 DUP7 ADD SWAP2 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP2 DUP3 SWAP4 PUSH2 0x998 JUMPI JUMPDEST POP PUSH2 0x87C SWAP4 LT ISZERO PUSH2 0x991 JUMPI POP PUSH2 0x3164 JUMP JUMPDEST PUSH1 0x42 DUP5 LT PUSH2 0x8BE JUMPI ADDRESS SWAP11 DUP5 PUSH1 0x17 GT PUSH2 0x4F3 JUMPI PUSH1 0x17 ADD SWAP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 PUSH2 0x6FA JUMP JUMPDEST SWAP2 SWAP8 SWAP6 SWAP10 POP SWAP8 POP PUSH1 0x60 SWAP2 POP SWAP2 DUP6 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD GT PUSH2 0x967 JUMPI JUMPDEST ISZERO DUP1 PUSH2 0x93A JUMPI JUMPDEST PUSH2 0x8F3 JUMPI POP PUSH1 0x1 ADD SWAP3 SWAP1 SWAP3 PUSH2 0x59B JUMP JUMPDEST SWAP1 PUSH2 0x936 PUSH1 0x40 SWAP3 DUP4 MLOAD SWAP4 DUP5 SWAP4 PUSH32 0x2C4029E900000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x529 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 DUP7 ADD CALLDATALOAD AND ISZERO PUSH2 0x8E3 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x39D3549600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 POP PUSH2 0x3164 JUMP JUMPDEST SWAP3 POP SWAP1 PUSH1 0x40 DUP4 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x9D8 JUMPI JUMPDEST DUP2 PUSH2 0x9B7 PUSH1 0x40 SWAP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP3 ADD MLOAD SWAP2 SWAP1 PUSH2 0x87C PUSH2 0x86B JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x9A7 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP3 PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 SWAP3 PUSH2 0x784 JUMP JUMPDEST DUP11 PUSH2 0x72C JUMP JUMPDEST PUSH1 0x14 SWAP2 SWAP3 SWAP4 POP LT PUSH2 0xACD JUMPI PUSH1 0x20 PUSH1 0x24 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE ADDRESS PUSH1 0x4 DUP4 ADD MSTORE CALLDATALOAD PUSH1 0x60 SHR GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xA9B JUMPI JUMPDEST POP SWAP1 CODESIZE DUP1 PUSH2 0x6F3 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xAC5 JUMPI JUMPDEST DUP2 PUSH2 0xAB5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD CODESIZE PUSH2 0xA92 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xAA8 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x3B99B53D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST ADDRESS SWAP10 PUSH2 0x6B4 JUMP JUMPDEST SWAP3 SWAP7 SWAP5 SWAP3 PUSH1 0x1 DUP2 SUB PUSH2 0xC2B JUMPI POP DUP4 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 SWAP2 PUSH2 0xB2C DUP4 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3147 JUMP JUMPDEST SWAP1 SWAP2 DUP8 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP2 PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0x0 EQ PUSH2 0xC24 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP2 JUMPDEST PUSH1 0x60 PUSH2 0xB6F PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP5 ADD CALLDATALOAD PUSH1 0x0 SSTORE PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP6 LT ISZERO PUSH2 0x4F3 JUMPI PUSH2 0xBAA SWAP4 PUSH2 0x1D6 DUP7 PUSH2 0x3164 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 ISZERO PUSH2 0xC15 JUMPI POP PUSH2 0xBBC SWAP1 PUSH2 0x3164 JUMP JUMPDEST SUB PUSH2 0xBEC JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SSTORE JUMPDEST PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x4 SWAP1 MLOAD PUSH32 0xD4E0248E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH2 0xC1F SWAP2 POP PUSH2 0x3164 JUMP JUMPDEST PUSH2 0xBBC JUMP JUMPDEST ADDRESS SWAP2 PUSH2 0xB60 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xC7A JUMPI POP PUSH2 0xBE7 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP1 DUP6 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH2 0xC6A PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP4 ADD CALLDATALOAD PUSH2 0x29E5 JUMP JUMPDEST PUSH1 0x3 DUP2 SUB PUSH2 0xF85 JUMPI POP DUP4 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 DUP2 CALLDATALOAD DUP3 ADD SWAP1 PUSH1 0x40 DUP4 DUP4 SUB SLT PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH1 0x60 DUP2 DUP6 ADD DUP5 SUB SLT PUSH2 0x4F3 JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0xCCB DUP6 PUSH2 0x2678 JUMP JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI DUP3 DUP3 ADD ADD PUSH1 0x20 DUP6 ADD PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH2 0xD01 DUP2 PUSH2 0x270F JUMP JUMPDEST SWAP2 PUSH2 0xD0F PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2694 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH1 0x20 DUP9 ADD PUSH1 0x40 DUP5 PUSH1 0x7 SHL DUP4 ADD ADD GT PUSH2 0x4F3 JUMPI PUSH1 0x40 DUP2 ADD SWAP2 JUMPDEST PUSH1 0x40 DUP5 PUSH1 0x7 SHL DUP4 ADD ADD DUP4 LT PUSH2 0xF69 JUMPI POP POP POP POP SWAP1 PUSH1 0x60 SWAP3 SWAP2 DUP7 MSTORE PUSH2 0xD57 PUSH1 0x40 DUP4 DUP4 ADD ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE ADD ADD CALLDATALOAD PUSH1 0x40 DUP5 ADD MSTORE DUP6 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x4F3 JUMPI PUSH2 0xD94 SWAP3 PUSH1 0x20 DUP1 SWAP3 ADD SWAP3 ADD ADD PUSH2 0x27B3 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH32 0x2A2D80D100000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x24 DUP4 ADD MSTORE DUP2 PUSH1 0xC4 DUP2 ADD DUP3 MLOAD SWAP1 PUSH1 0x60 PUSH1 0x64 DUP5 ADD MSTORE DUP2 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x20 PUSH1 0xE4 DUP5 ADD SWAP3 ADD SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0xF02 JUMPI POP POP POP PUSH1 0x20 SWAP1 PUSH1 0x40 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 PUSH1 0x0 SWAP8 ADD MLOAD AND PUSH1 0x84 DUP7 ADD MSTORE ADD MLOAD PUSH1 0xA4 DUP5 ADD MSTORE DUP4 DUP4 DUP3 SUB SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC DUP4 ADD PUSH1 0x44 DUP7 ADD MSTORE MSTORE ADD DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x9E0 JUMPI PUSH2 0xEF3 JUMPI JUMPDEST POP PUSH2 0x8DC JUMP JUMPDEST PUSH2 0xEFC SWAP1 PUSH2 0x2664 JUMP JUMPDEST CODESIZE PUSH2 0xEED JUMP JUMPDEST SWAP2 SWAP5 SWAP4 POP SWAP2 PUSH1 0x20 PUSH1 0x80 DUP3 PUSH2 0xF5A PUSH1 0x1 SWAP5 DUP10 MLOAD PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 PUSH6 0xFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST ADD SWAP6 ADD SWAP3 ADD DUP6 SWAP4 SWAP5 SWAP3 SWAP2 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x80 SWAP2 PUSH2 0xF7A DUP3 DUP13 ADD DUP7 PUSH2 0x275B JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0xD2F JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP1 DUP3 DUP2 SUB PUSH2 0x10F1 JUMPI POP DUP5 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH1 0x60 DUP3 ADD CALLDATALOAD SWAP1 PUSH1 0x40 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 PUSH2 0xFC7 DUP4 DUP8 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP6 ADD CALLDATALOAD AND DUP1 PUSH2 0x101E JUMPI POP SELFBALANCE SWAP3 DUP4 LT PUSH2 0xFF8 JUMPI POP POP DUP1 PUSH2 0xFE8 JUMPI JUMPDEST POP POP PUSH2 0x8DC JUMP JUMPDEST PUSH2 0xFF1 SWAP2 PUSH2 0x3480 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0xFE1 JUMP JUMPDEST MLOAD PUSH32 0x6A12F10400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP4 SWAP2 SWAP1 DUP1 MLOAD SWAP4 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP6 MSTORE ADDRESS DUP4 DUP7 ADD MSTORE PUSH1 0x20 DUP6 PUSH1 0x24 DUP2 DUP10 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x0 SWAP6 PUSH2 0x10B2 JUMPI JUMPDEST POP DUP5 LT PUSH2 0x108C JUMPI POP POP DUP2 PUSH2 0x107B JUMPI JUMPDEST POP POP POP PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x1084 SWAP3 PUSH2 0x34EE JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x1073 JUMP JUMPDEST MLOAD PUSH32 0x675CAE3800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 SWAP5 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x10DE JUMPI JUMPDEST DUP2 PUSH2 0x10CD PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP4 CODESIZE PUSH2 0x1064 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x10C0 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 SUB PUSH2 0x1125 JUMPI POP PUSH2 0xBE7 SWAP2 POP DUP5 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH2 0x1116 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x60 DUP4 ADD CALLDATALOAD SWAP3 ADD CALLDATALOAD PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x6 DUP2 SUB PUSH2 0x1274 JUMPI POP DUP5 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x114D PUSH1 0x40 DUP1 SWAP3 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP3 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1269 JUMPI JUMPDEST PUSH2 0x1241 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP10 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD AND SWAP4 DUP5 ISZERO PUSH1 0x0 EQ PUSH2 0x11A5 JUMPI POP POP PUSH2 0xBE7 SWAP3 POP PUSH2 0x119E PUSH2 0x2710 SWAP2 SELFBALANCE PUSH2 0x2999 JUMP JUMPDEST DIV SWAP1 PUSH2 0x3480 JUMP JUMPDEST DUP2 MLOAD SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE ADDRESS SWAP1 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP9 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1237 JUMPI POP PUSH1 0x0 SWAP2 PUSH2 0x1203 JUMPI JUMPDEST POP PUSH2 0x11FC PUSH2 0xBE7 SWAP5 SWAP4 SWAP3 PUSH2 0x2710 SWAP3 PUSH2 0x2999 JUMP JUMPDEST DIV SWAP2 PUSH2 0x34EE JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x122F JUMPI JUMPDEST DUP2 PUSH2 0x121D PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD PUSH2 0x11FC PUSH2 0x11E9 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1210 JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP3 MLOAD PUSH32 0xDEAA01E600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP PUSH2 0x2710 DUP4 GT PUSH2 0x1157 JUMP JUMPDEST DUP3 PUSH1 0x24 SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH32 0xD76A1E9E00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST SWAP4 SWAP8 SWAP6 SWAP4 DUP2 SUB PUSH2 0x1586 JUMPI POP DUP4 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH1 0x40 SWAP1 PUSH2 0x12DD PUSH2 0x12D4 DUP4 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3147 JUMP JUMPDEST SWAP1 DUP2 ADD SWAP1 PUSH2 0x27FA JUMP JUMPDEST SWAP1 DUP7 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0x0 EQ PUSH2 0x157A JUMPI PUSH2 0x131D PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP4 JUMPDEST ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 PUSH2 0x13A0 PUSH2 0x1358 DUP6 PUSH2 0x1344 DUP9 PUSH2 0x2A8E JUMP JUMPDEST MLOAD AND DUP7 PUSH2 0x1350 DUP10 PUSH2 0x2A9B JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0x2C3E JUMP JUMPDEST SWAP1 PUSH32 0x0 PUSH32 0x0 PUSH2 0x2B36 JUMP JUMPDEST SWAP2 DUP3 DUP2 PUSH2 0x155D JUMPI JUMPDEST POP POP POP DUP4 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 GT PUSH2 0x152E JUMPI PUSH2 0x13E2 DUP5 SWAP2 DUP7 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND SWAP4 DUP6 MLOAD SWAP4 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 DUP7 MSTORE DUP9 AND SWAP3 PUSH1 0x4 SWAP9 DUP5 DUP11 DUP9 ADD MSTORE PUSH1 0x24 SWAP4 PUSH1 0x20 DUP9 DUP7 DUP2 DUP13 GAS STATICCALL SWAP8 DUP9 ISZERO PUSH2 0x1523 JUMPI PUSH1 0x0 SWAP9 PUSH2 0x14ED JUMPI JUMPDEST POP SWAP2 PUSH2 0x1443 SWAP2 PUSH1 0x20 SWAP7 SWAP6 SWAP5 SWAP4 PUSH2 0x2CB7 JUMP JUMPDEST DUP8 MLOAD SWAP7 DUP8 SWAP4 DUP5 SWAP3 DUP4 MSTORE DUP11 DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x14E2 JUMPI PUSH1 0x0 SWAP4 PUSH2 0x14AD JUMPI JUMPDEST POP SWAP1 PUSH1 0x60 PUSH2 0x147B SWAP3 DUP10 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD SWAP3 PUSH2 0x2ABF JUMP JUMPDEST LT PUSH2 0x1487 JUMPI POP POP PUSH2 0x8DC JUMP JUMPDEST MLOAD PUSH32 0x849EAF9800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 SWAP3 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x14DA JUMPI JUMPDEST DUP2 PUSH2 0x14C8 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP2 PUSH1 0x60 PUSH2 0x1461 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x14BB JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP8 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x151B JUMPI JUMPDEST DUP2 PUSH2 0x1508 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP7 PUSH2 0x1443 PUSH2 0x1432 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x14FB JUMP JUMPDEST DUP11 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1572 SWAP3 DUP7 PUSH2 0x156B DUP10 PUSH2 0x2A8E JUMP JUMPDEST MLOAD AND PUSH2 0x2ACC JUMP JUMPDEST CODESIZE DUP1 DUP3 PUSH2 0x13A8 JUMP JUMPDEST PUSH2 0x131D PUSH1 0x20 ADDRESS SWAP4 PUSH2 0x1316 JUMP JUMPDEST PUSH1 0x9 DUP2 SUB PUSH2 0x19A0 JUMPI POP PUSH2 0x15AB PUSH2 0x12D4 DUP6 PUSH1 0x5 SHL DUP4 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3147 JUMP JUMPDEST DUP5 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP1 PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0x0 EQ PUSH2 0x1994 JUMPI PUSH2 0x15E9 PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SLOAD AND SWAP4 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 PUSH1 0x2 DUP3 MLOAD LT PUSH2 0x196A JUMPI PUSH1 0x40 DUP9 PUSH1 0x5 SHL DUP7 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD SWAP5 DUP3 MLOAD DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD GT PUSH2 0x152E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 JUMPDEST PUSH2 0x16C5 JUMPI POP PUSH1 0x60 SWAP1 DUP10 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD DUP6 GT PUSH2 0x169B JUMPI PUSH2 0xBE7 SWAP5 DUP5 PUSH2 0x1696 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x156B DUP7 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x8AB0BC1600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP6 SWAP5 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 ADD DUP7 DUP2 GT PUSH2 0x152E JUMPI PUSH2 0x177B SWAP6 PUSH2 0x1718 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 SWAP2 DUP8 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND SWAP1 PUSH2 0x1731 DUP4 PUSH2 0x1729 DUP12 DUP10 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND DUP4 PUSH2 0x2C3E JUMP JUMPDEST DUP2 SWAP10 SWAP2 PUSH32 0x0 PUSH32 0x0 PUSH2 0x2B36 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x902F1AC00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 SWAP5 PUSH1 0x60 DUP4 DUP8 DUP2 DUP5 DUP10 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP1 DUP2 SWAP5 PUSH2 0x1936 JUMPI JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP4 AND SWAP11 AND EQ PUSH1 0x0 EQ PUSH2 0x1930 JUMPI SWAP8 SWAP2 JUMPDEST SWAP8 DUP1 ISZERO DUP1 ISZERO PUSH2 0x1928 JUMPI JUMPDEST PUSH2 0x18FF JUMPI DUP2 PUSH2 0x17FB SWAP2 PUSH2 0x2999 JUMP JUMPDEST SWAP2 PUSH2 0x3E8 SWAP3 DUP4 DUP2 MUL SWAP4 DUP2 DUP6 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x18D1 JUMPI SWAP1 PUSH2 0x181A SWAP2 PUSH2 0x2ABF JUMP JUMPDEST SWAP1 PUSH2 0x3E5 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x18A3 JUMPI SWAP1 PUSH2 0x1839 SWAP2 PUSH2 0x29AC JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1875 JUMPI POP SWAP6 DUP1 ISZERO PUSH2 0x152E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 PUSH2 0x1655 JUMP JUMPDEST PUSH1 0x11 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x11 DUP4 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x11 DUP5 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH32 0x7B9C891600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP3 ISZERO PUSH2 0x17ED JUMP JUMPDEST SWAP2 PUSH2 0x17E3 JUMP JUMPDEST SWAP1 POP PUSH2 0x195A SWAP2 SWAP4 POP PUSH1 0x60 RETURNDATASIZE DUP2 GT PUSH2 0x1963 JUMPI JUMPDEST PUSH2 0x1952 DUP2 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2C81 JUMP JUMPDEST POP SWAP3 SWAP1 CODESIZE PUSH2 0x17C1 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1948 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x20DB826700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH2 0x15E9 PUSH1 0x20 ADDRESS SWAP4 PUSH2 0x1316 JUMP JUMPDEST PUSH1 0xA DUP2 SUB PUSH2 0x1B5D JUMPI POP DUP4 PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD DUP1 CALLDATALOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP3 ADD SWAP2 SUB SWAP1 PUSH1 0xE0 SWAP2 DUP3 DUP2 SLT PUSH2 0x4F3 JUMPI PUSH1 0xC0 DUP1 SWAP2 SLT PUSH2 0x4F3 JUMPI PUSH1 0x40 SWAP3 DUP4 MLOAD SWAP3 PUSH2 0x19E2 DUP5 PUSH2 0x2678 JUMP JUMPDEST PUSH2 0x19F9 DUP2 PUSH1 0x20 DUP12 PUSH1 0x5 SHL DUP10 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD PUSH2 0x275B JUMP JUMPDEST DUP5 MSTORE PUSH2 0x1A10 PUSH1 0xA0 DUP11 PUSH1 0x5 SHL DUP9 ADD CALLDATALOAD DUP2 MLOAD ADD ADD PUSH2 0x2727 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD SWAP7 DUP8 MSTORE DUP6 DUP6 ADD SWAP4 DUP11 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD DUP5 MSTORE DUP10 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP2 DUP3 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x4F3 JUMPI PUSH2 0x1A56 SWAP3 ADD PUSH1 0x20 ADD PUSH2 0x27B3 JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 PUSH32 0x0 AND SWAP2 DUP5 PUSH1 0x1 SLOAD AND DUP4 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI PUSH2 0x1B47 PUSH2 0x1B27 SWAP6 PUSH1 0x0 SWAP8 SWAP4 DUP9 SWAP5 DUP11 MLOAD SWAP12 DUP13 SWAP10 DUP11 SWAP9 DUP10 SWAP8 PUSH32 0x2B67B57000000000000000000000000000000000000000000000000000000000 DUP10 MSTORE PUSH1 0x4 DUP10 ADD MSTORE PUSH1 0x24 DUP9 ADD SWAP1 MLOAD PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 PUSH6 0xFFFFFFFFFFFF SWAP2 DUP3 PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST MLOAD AND PUSH1 0xA4 DUP6 ADD MSTORE MLOAD PUSH1 0xC4 DUP5 ADD MSTORE PUSH2 0x100 PUSH1 0xE4 DUP5 ADD MSTORE PUSH2 0x104 DUP4 ADD SWAP1 PUSH2 0x529 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x1237 JUMPI POP PUSH2 0xEF3 JUMPI POP PUSH2 0x8DC JUMP JUMPDEST PUSH1 0xB DUP2 SUB PUSH2 0x1D24 JUMPI POP DUP4 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 PUSH2 0x1B83 PUSH1 0x20 DUP3 DUP5 ADD CALLDATALOAD SWAP4 ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP2 DUP1 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 SUB PUSH2 0x1CF1 JUMPI POP POP SELFBALANCE SWAP2 JUMPDEST DUP3 PUSH2 0x1BBE JUMPI POP POP POP PUSH2 0x8DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH32 0x0 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI DUP4 MLOAD SWAP3 PUSH32 0xD0E30DB000000000000000000000000000000000000000000000000000000000 DUP5 MSTORE PUSH1 0x4 SWAP4 PUSH1 0x0 DUP2 DUP7 DUP2 DUP11 DUP9 GAS CALL DUP1 ISZERO PUSH2 0x1CE6 JUMPI PUSH2 0x1CD7 JUMPI JUMPDEST POP AND SWAP1 ADDRESS DUP3 SUB PUSH2 0x1C4D JUMPI JUMPDEST POP POP PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x20 SWAP3 PUSH1 0x0 PUSH1 0x44 SWAP3 DUP7 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x1237 JUMPI POP PUSH2 0x1C9F JUMPI JUMPDEST DUP1 DUP1 DUP1 DUP1 PUSH2 0x1C46 JUMP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1CCF JUMPI JUMPDEST DUP2 PUSH2 0x1CB8 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4F3 JUMPI MLOAD DUP1 ISZERO ISZERO SUB PUSH2 0x4F3 JUMPI CODESIZE PUSH2 0x1C96 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1CAB JUMP JUMPDEST PUSH2 0x1CE0 SWAP1 PUSH2 0x2664 JUMP JUMPDEST CODESIZE PUSH2 0x1C3B JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP1 SWAP3 SELFBALANCE LT ISZERO PUSH2 0x1BB1 JUMPI PUSH1 0x4 DUP3 MLOAD PUSH32 0x6A12F10400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0xC DUP2 SUB PUSH2 0x1F2B JUMPI POP PUSH2 0x1D44 PUSH1 0x20 DUP6 PUSH1 0x5 SHL DUP4 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD PUSH2 0x287C JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE ADDRESS PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0x24 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1EF6 JUMPI JUMPDEST POP PUSH1 0x40 SWAP1 DUP7 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD DUP2 LT PUSH2 0x1ECC JUMPI DUP1 PUSH2 0x1DE2 JUMPI POP POP PUSH2 0x8DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 DUP2 PUSH1 0x24 DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x9E0 JUMPI PUSH2 0x1EBD JUMPI JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ADDRESS EQ PUSH2 0xFE1 JUMPI PUSH2 0xFF1 SWAP2 PUSH2 0x3480 JUMP JUMPDEST PUSH2 0x1EC6 SWAP1 PUSH2 0x2664 JUMP JUMPDEST CODESIZE PUSH2 0x1E96 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x6A12F10400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1F23 JUMPI JUMPDEST DUP2 PUSH2 0x1F11 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP1 PUSH1 0x40 PUSH2 0x1DC0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0xD DUP2 SUB PUSH2 0x218A JUMPI POP DUP4 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD DUP1 CALLDATALOAD DUP2 ADD PUSH1 0x20 DUP2 ADD SWAP2 PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x4F3 JUMPI ADD DUP3 PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0x1F81 DUP3 PUSH2 0x270F JUMP JUMPDEST SWAP4 PUSH1 0x40 SWAP4 PUSH2 0x1F91 DUP6 MLOAD SWAP7 DUP8 PUSH2 0x2694 JUMP JUMPDEST DUP4 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP3 DUP6 DUP5 SWAP6 PUSH1 0x7 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x4F3 JUMPI DUP6 ADD SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x2128 JUMPI POP POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 PUSH1 0x1 SLOAD AND DUP5 MLOAD SWAP1 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x20BC JUMPI POP POP POP DUP2 PUSH32 0x0 AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI DUP4 MLOAD PUSH32 0xD58B1DB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP5 MLOAD PUSH1 0x24 DUP7 ADD DUP2 SWAP1 MSTORE DUP6 SWAP3 PUSH1 0x44 DUP5 ADD SWAP3 SWAP1 SWAP2 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x2078 JUMPI POP POP POP POP SWAP2 DUP2 PUSH1 0x0 DUP2 DUP2 SWAP6 SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x1237 JUMPI POP PUSH2 0xEF3 JUMPI POP PUSH2 0x8DC JUMP JUMPDEST SWAP2 SWAP4 DUP4 SWAP6 POP PUSH1 0x80 PUSH1 0x20 SWAP2 DUP5 PUSH1 0x60 PUSH1 0x1 SWAP6 SWAP8 MLOAD DUP3 DUP2 MLOAD AND DUP5 MSTORE DUP3 DUP7 DUP3 ADD MLOAD AND DUP7 DUP6 ADD MSTORE DUP3 DUP14 DUP3 ADD MLOAD AND DUP14 DUP6 ADD MSTORE ADD MLOAD AND PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 SWAP2 DUP8 SWAP5 SWAP4 SWAP3 PUSH2 0x2050 JUMP JUMPDEST DUP2 DUP6 PUSH2 0x20C8 DUP4 DUP11 PUSH2 0x2AAB JUMP JUMPDEST MLOAD MLOAD AND SUB PUSH2 0x20FF JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x152E JUMPI PUSH1 0x1 ADD PUSH2 0x1FD9 JUMP JUMPDEST PUSH1 0x4 DUP7 MLOAD PUSH32 0xE700287700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x80 PUSH1 0x20 DUP6 DUP5 SUB ADD SLT PUSH2 0x4F3 JUMPI PUSH1 0x20 PUSH1 0x80 SWAP2 DUP8 MLOAD PUSH2 0x2145 DUP2 PUSH2 0x2648 JUMP JUMPDEST PUSH2 0x214E DUP8 PUSH2 0x2727 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x215B DUP4 DUP9 ADD PUSH2 0x2727 JUMP JUMPDEST DUP4 DUP3 ADD MSTORE PUSH2 0x216A DUP10 DUP9 ADD PUSH2 0x2727 JUMP JUMPDEST DUP10 DUP3 ADD MSTORE PUSH2 0x217A PUSH1 0x60 DUP9 ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x1FAD JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0xE DUP2 SUB PUSH2 0x22F6 JUMPI POP PUSH1 0x40 SWAP1 DUP2 MLOAD SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x20 DUP3 DUP5 DUP3 DUP11 PUSH1 0x5 SHL DUP6 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD AND SWAP5 PUSH1 0x4 SWAP6 DUP7 DUP4 ADD MSTORE PUSH1 0x24 SWAP7 DUP8 SWAP2 DUP10 DUP13 PUSH1 0x5 SHL DUP8 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x22EB JUMPI PUSH1 0x0 SWAP3 PUSH2 0x22B6 JUMPI JUMPDEST POP PUSH1 0x60 SWAP1 DUP8 PUSH1 0x5 SHL ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD ADD CALLDATALOAD GT SWAP3 DUP4 ISZERO SWAP4 PUSH2 0x2237 JUMPI POP POP POP PUSH2 0x8DC JUMP JUMPDEST DUP1 MLOAD PUSH32 0xA328167200000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 DUP2 ADD SWAP3 SWAP1 SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP6 DUP6 LT OR PUSH2 0x228A JUMPI POP POP MSTORE SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x41 SWAP1 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x22E3 JUMPI JUMPDEST DUP2 PUSH2 0x22D1 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP1 PUSH1 0x60 PUSH2 0x2216 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x22C4 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0xD76A1E9E00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP7 SWAP4 SWAP6 SWAP5 SWAP3 SWAP2 PUSH1 0x21 DUP2 SUB PUSH2 0x22F6 JUMPI POP PUSH2 0x2350 DUP7 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD PUSH2 0x3126 JUMP JUMPDEST PUSH2 0x2377 DUP9 PUSH1 0x5 SWAP10 SWAP4 SWAP10 SHL DUP5 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x20 DUP1 PUSH1 0x40 DUP4 ADD CALLDATALOAD DUP4 ADD SWAP3 DUP4 SUB ADD SWAP2 ADD CALLDATALOAD PUSH2 0x3119 JUMP JUMPDEST DUP3 PUSH1 0x5 SHL DUP5 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD CALLDATALOAD LT PUSH2 0xACD JUMPI PUSH2 0x23CA SWAP1 PUSH1 0x40 SWAP8 SWAP5 SWAP8 MLOAD SWAP9 PUSH32 0x24856BC300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP12 ADD MSTORE PUSH1 0x64 DUP11 ADD SWAP2 PUSH2 0x2609 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC DUP9 DUP3 SUB ADD PUSH1 0x44 DUP10 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 DUP2 ADD CALLDATALOAD ADD ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP7 DUP3 PUSH1 0x5 SHL DUP5 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD SWAP5 PUSH1 0x40 PUSH1 0x20 DUP1 DUP3 DUP10 ADD CALLDATALOAD DUP10 ADD ADD CALLDATALOAD PUSH1 0x5 SHL DUP6 ADD ADD SWAP7 DUP2 DUP2 ADD CALLDATALOAD ADD ADD SWAP1 PUSH1 0x0 SWAP7 JUMPDEST PUSH1 0x20 DUP7 PUSH1 0x5 SHL DUP9 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 DUP2 ADD CALLDATALOAD ADD ADD CALLDATALOAD DUP9 LT ISZERO PUSH2 0x24FD JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 DUP3 SUB ADD DUP12 MSTORE DUP6 PUSH1 0x5 SHL DUP8 ADD CALLDATALOAD PUSH1 0xA0 MLOAD ADD PUSH1 0x40 DUP2 ADD CALLDATALOAD ADD DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA1 DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x4F3 JUMPI ADD DUP10 DUP2 ADD SWAP2 SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI DUP1 CALLDATASIZE SUB DUP4 SGT PUSH2 0x4F3 JUMPI DUP15 SWAP3 PUSH1 0x20 SWAP3 DUP4 SWAP3 PUSH2 0x24EF SWAP3 PUSH2 0x2609 JUMP JUMPDEST SWAP5 ADD SWAP12 ADD SWAP8 ADD SWAP7 SWAP10 SWAP2 PUSH2 0x243B JUMP JUMPDEST SWAP2 POP SWAP10 SWAP4 SWAP8 SWAP9 POP DUP4 SWAP2 SWAP11 POP PUSH1 0x0 SWAP6 POP DUP6 SWAP5 POP PUSH2 0x2540 SWAP3 POP SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x2694 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP3 ADDRESS GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x257B JUMPI POP RETURNDATASIZE PUSH2 0x255C DUP2 PUSH2 0x26D5 JUMP JUMPDEST SWAP1 PUSH2 0x256A PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY JUMPDEST SWAP1 PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x2575 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xE68EC04C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP POP SWAP1 POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xFF633A3800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x1F DUP3 PUSH1 0x20 SWAP5 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP4 DUP2 DUP7 MSTORE DUP7 DUP7 ADD CALLDATACOPY PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9EC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9EC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9EC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9EC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9EC JUMPI PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9EC JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x4F3 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH6 0xFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x4F3 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x4F3 JUMPI PUSH1 0x40 MLOAD PUSH2 0x2773 DUP2 PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x27AE DUP2 DUP4 SWAP6 PUSH2 0x2784 DUP2 PUSH2 0x2727 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x2792 PUSH1 0x20 DUP3 ADD PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x27A3 PUSH1 0x40 DUP3 ADD PUSH2 0x2748 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE ADD PUSH2 0x2748 JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x4F3 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x27CA DUP3 PUSH2 0x26D5 JUMP JUMPDEST SWAP3 PUSH2 0x27D8 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x2694 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x4F3 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x4F3 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x4F3 JUMPI ADD SWAP2 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x4F3 JUMPI DUP3 CALLDATALOAD PUSH2 0x2830 DUP2 PUSH2 0x270F JUMP JUMPDEST SWAP4 PUSH2 0x283E PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x2694 JUMP JUMPDEST DUP2 DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x4F3 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2865 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 DUP1 SWAP2 PUSH2 0x2871 DUP5 PUSH2 0x2727 JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x2857 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP1 DUP3 AND PUSH1 0x1 DUP2 SUB PUSH2 0x28A6 JUMPI POP POP PUSH1 0x1 SLOAD AND SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x2 SUB PUSH2 0x28B5 JUMPI POP ADDRESS SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x28E4 JUMPI POP PUSH2 0x28E2 SWAP2 SWAP3 PUSH2 0x3480 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP3 EQ PUSH2 0x2917 JUMPI JUMPDEST SWAP3 PUSH2 0x28E2 SWAP3 SWAP4 PUSH2 0x34EE JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD SWAP3 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP5 MSTORE ADDRESS PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 DUP5 PUSH1 0x24 DUP2 DUP6 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x9E0 JUMPI PUSH1 0x0 SWAP5 PUSH2 0x2966 JUMPI JUMPDEST POP SWAP3 SWAP1 PUSH2 0x290C JUMP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x2991 JUMPI JUMPDEST DUP2 PUSH2 0x297E PUSH1 0x20 SWAP4 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1E1 JUMPI MLOAD SWAP4 POP PUSH2 0x28E2 PUSH2 0x295E JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2971 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x152E JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x29B6 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 PUSH32 0x0 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 SWAP5 DUP5 DUP7 SWAP3 DUP2 PUSH1 0x84 SWAP7 DUP2 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP11 DUP12 SWAP10 PUSH32 0x36C7851600000000000000000000000000000000000000000000000000000000 DUP12 MSTORE AND PUSH1 0x4 DUP11 ADD MSTORE AND PUSH1 0x24 DUP9 ADD MSTORE AND PUSH1 0x44 DUP7 ADD MSTORE AND PUSH1 0x64 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x9E0 JUMPI PUSH2 0x2A85 JUMPI POP JUMP JUMPDEST PUSH2 0x28E2 SWAP1 PUSH2 0x2664 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x25AA JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0x25AA JUMPI PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x25AA JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x152E JUMPI JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND ADDRESS SUB PUSH2 0x2AF8 JUMPI POP POP PUSH2 0x28E2 SWAP3 PUSH2 0x28B8 JUMP JUMPDEST DUP1 DUP5 SWAP6 SWAP5 GT PUSH2 0x2B0C JUMPI PUSH2 0x28E2 SWAP5 AND SWAP3 PUSH2 0x29E5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xC4BD89A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 PUSH2 0x2C37 SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP1 SWAP3 PUSH1 0x60 SHL AND DUP5 MSTORE PUSH1 0x60 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x28 DUP2 MSTORE PUSH2 0x2B99 DUP2 PUSH2 0x2678 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0x2C0B PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP7 DUP8 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x55 SWAP5 SWAP3 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x60 SHL AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x2694 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x2C62 JUMPI SWAP2 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST MLOAD SWAP1 PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x4F3 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x60 SWAP2 SUB SLT PUSH2 0x4F3 JUMPI PUSH2 0x2C95 DUP2 PUSH2 0x2C66 JUMP JUMPDEST SWAP2 PUSH1 0x40 PUSH2 0x2CA4 PUSH1 0x20 DUP5 ADD PUSH2 0x2C66 JUMP JUMPDEST SWAP3 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x4F3 JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x2 DUP2 MLOAD LT PUSH2 0x30EF JUMPI DUP1 MLOAD ISZERO PUSH2 0x25AA JUMPI SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 SWAP3 PUSH2 0x2CF6 DUP3 DUP6 DUP4 ADD MLOAD AND DUP4 PUSH2 0x1350 DUP5 PUSH2 0x2A9B JUMP JUMPDEST POP SWAP4 DUP2 MLOAD SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 ADD SWAP6 ADD SWAP2 PUSH1 0x0 SWAP7 JUMPDEST DUP7 DUP9 LT PUSH2 0x2D58 JUMPI POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP6 PUSH2 0x2D63 DUP10 DUP8 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND SWAP3 DUP7 DUP1 PUSH2 0x2D75 PUSH1 0x1 DUP13 ADD DUP10 PUSH2 0x2AAB JUMP JUMPDEST MLOAD AND SWAP2 AND SWAP2 PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP6 PUSH32 0x902F1AC00000000000000000000000000000000000000000000000000000000 DUP8 MSTORE PUSH1 0x60 SWAP3 PUSH1 0x4 SWAP4 DUP1 DUP10 DUP7 DUP2 DUP11 GAS STATICCALL SWAP9 DUP10 ISZERO PUSH2 0x1CE6 JUMPI SWAP1 DUP13 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP12 PUSH2 0x30C4 JUMPI JUMPDEST POP POP SWAP2 AND DUP3 EQ SWAP8 DUP8 SWAP5 SWAP4 SWAP3 SWAP2 PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP2 AND DUP10 ISZERO PUSH2 0x30BE JUMPI JUMPDEST DUP7 MLOAD SWAP6 DUP7 DUP1 SWAP5 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP11 DUP9 DUP4 ADD MSTORE PUSH1 0x24 SWAP9 DUP10 SWAP2 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x30B3 JUMPI PUSH1 0x0 SWAP4 PUSH2 0x3084 JUMPI JUMPDEST POP DUP1 DUP4 SUB SWAP2 DUP2 ISZERO SWAP4 DUP5 DUP1 ISZERO PUSH2 0x307C JUMPI JUMPDEST PUSH2 0x3054 JUMPI DUP3 PUSH2 0x3E5 DUP1 DUP7 MUL SWAP6 DUP7 DIV EQ SWAP2 EQ OR ISZERO PUSH2 0x3027 JUMPI PUSH2 0x2E60 SWAP1 DUP4 PUSH2 0x2999 JUMP JUMPDEST SWAP3 PUSH2 0x3E8 DUP1 DUP4 MUL SWAP3 DUP4 DIV EQ OR ISZERO PUSH2 0x2FFA JUMPI SWAP2 PUSH2 0x2E85 DUP16 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH2 0x2E8B SWAP4 PUSH2 0x3119 JUMP JUMPDEST SWAP1 PUSH2 0x29AC JUMP JUMPDEST SWAP8 ISZERO PUSH2 0x2FF0 JUMPI DUP11 DUP11 PUSH1 0x0 SWAP10 SWAP7 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0x2FE3 JUMPI SWAP2 PUSH2 0x1350 PUSH2 0x2F01 SWAP10 SWAP5 SWAP3 PUSH1 0x2 PUSH2 0x2EB7 SWAP6 ADD SWAP1 PUSH2 0x2AAB JUMP JUMPDEST DUP2 SWAP8 SWAP2 PUSH32 0x0 PUSH32 0x0 PUSH2 0x2B36 JUMP JUMPDEST SWAP6 JUMPDEST DUP5 MLOAD SWAP1 SWAP9 PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP10 DUP4 ADD DUP5 DUP2 GT DUP5 DUP3 LT OR PUSH2 0x2FB6 JUMPI DUP8 MSTORE PUSH1 0x0 DUP4 MSTORE DUP1 EXTCODESIZE ISZERO PUSH2 0x4F3 JUMPI DUP14 SWAP8 PUSH1 0x0 DUP11 SWAP4 PUSH2 0x2F82 DUP3 SWAP7 DUP12 MLOAD SWAP13 DUP14 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH32 0x22C0D9F00000000000000000000000000000000000000000000000000000000 DUP8 MSTORE DUP14 DUP8 ADD MSTORE DUP14 DUP7 ADD MSTORE AND PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x84 DUP4 ADD SWAP1 PUSH2 0x529 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x14E2 JUMPI PUSH2 0x2FA2 JUMPI JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 SWAP8 ADD SWAP7 SWAP2 PUSH2 0x2D46 JUMP JUMPDEST DUP5 GT PUSH2 0x228A JUMPI POP POP MSTORE PUSH1 0x1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x2F91 JUMP JUMPDEST DUP7 PUSH1 0x41 DUP8 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP13 SWAP5 PUSH1 0x0 PUSH2 0x2F03 JUMP JUMPDEST DUP11 DUP11 PUSH1 0x0 SWAP7 PUSH2 0x2E98 JUMP JUMPDEST DUP6 PUSH1 0x11 DUP7 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST DUP7 PUSH1 0x11 DUP8 PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST DUP7 DUP10 MLOAD PUSH32 0x7B9C891600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP DUP2 ISZERO PUSH2 0x2E3F JUMP JUMPDEST SWAP1 SWAP3 DUP10 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x30AC JUMPI JUMPDEST PUSH2 0x309B DUP2 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP MLOAD SWAP2 CODESIZE PUSH2 0x2E2F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3091 JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x2DEB JUMP JUMPDEST DUP11 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP12 POP PUSH2 0x30E2 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x1963 JUMPI PUSH2 0x1952 DUP2 DUP4 PUSH2 0x2694 JUMP JUMPDEST POP SWAP10 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 CODESIZE PUSH2 0x2DC4 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xAE52AD0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x152E JUMPI JUMP JUMPDEST SWAP2 DUP3 CALLDATALOAD DUP4 ADD SWAP2 PUSH2 0x3140 PUSH1 0x20 DUP5 CALLDATALOAD SWAP6 DUP2 DUP7 ADD SWAP6 SUB ADD DUP6 PUSH2 0x3119 JUMP JUMPDEST GT PUSH2 0xACD JUMPI JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP4 ADD SWAP2 PUSH2 0x3140 PUSH1 0x20 DUP5 CALLDATALOAD SWAP6 DUP2 DUP7 ADD SWAP6 SUB ADD DUP6 PUSH2 0x3119 JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 EQ PUSH2 0x152E JUMPI PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST SWAP4 SWAP2 SWAP4 PUSH1 0x2B DUP5 LT PUSH2 0xACD JUMPI DUP5 PUSH3 0xFFFFFF PUSH1 0x0 PUSH2 0x3216 SWAP5 PUSH2 0x329D PUSH2 0x3248 SWAP10 CALLDATALOAD SWAP9 DUP10 PUSH1 0x60 SHR SWAP11 DUP12 SWAP11 PUSH2 0x31EA PUSH1 0x17 DUP10 ADD CALLDATALOAD PUSH1 0x60 SHR SWAP14 DUP15 LT SWAP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP15 DUP16 SWAP10 DUP11 SWAP5 PUSH1 0x48 SHR AND SWAP2 PUSH2 0x3314 JUMP JUMPDEST AND SWAP7 DUP12 DUP7 EQ PUSH2 0x32F9 JUMPI PUSH5 0x1000276A4 SWAP11 JUMPDEST PUSH1 0x40 SWAP14 DUP15 SWAP12 DUP13 SWAP4 DUP5 MLOAD SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP2 PUSH2 0x2609 JUMP JUMPDEST SWAP2 AND DUP12 DUP4 ADD MSTORE SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x2694 JUMP JUMPDEST DUP5 DUP9 MLOAD SWAP10 DUP11 SWAP9 DUP10 SWAP8 DUP9 SWAP7 PUSH32 0x128ACB0800000000000000000000000000000000000000000000000000000000 DUP9 MSTORE AND PUSH1 0x4 DUP8 ADD MSTORE DUP13 PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE AND PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0xA4 DUP4 ADD SWAP1 PUSH2 0x529 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x32EE JUMPI PUSH1 0x0 SWAP4 DUP5 SWAP3 PUSH2 0x32B8 JUMPI JUMPDEST POP POP SWAP2 SWAP3 JUMP JUMPDEST SWAP1 DUP1 SWAP5 SWAP3 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x32E7 JUMPI JUMPDEST PUSH2 0x32D0 DUP2 DUP4 PUSH2 0x2694 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9D5 JUMPI POP PUSH1 0x20 DUP3 MLOAD SWAP3 ADD MLOAD CODESIZE DUP1 PUSH2 0x32B2 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x32C6 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFD8963EFD1FC6A506488495D951D5263988D25 SWAP11 PUSH2 0x31FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP4 AND DUP5 DUP4 AND GT PUSH2 0x3478 JUMPI JUMPDEST PUSH3 0xFFFFFF SWAP1 DUP5 PUSH1 0x40 MLOAD SWAP5 DUP2 PUSH1 0x20 DUP8 ADD SWAP6 AND DUP6 MSTORE AND PUSH1 0x40 DUP6 ADD MSTORE AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 DUP3 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x9EC JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 PUSH2 0x2C37 SWAP2 DUP4 PUSH1 0x40 MSTORE DUP5 MLOAD SWAP1 KECCAK256 SWAP4 PUSH2 0x344B PUSH1 0xA0 DUP3 ADD SWAP6 PUSH32 0x0 SWAP1 PUSH32 0x0 DUP9 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x55 SWAP5 SWAP3 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x60 SHL AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF60 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x2694 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 PUSH2 0x3336 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SWAP4 DUP2 SWAP4 GAS CALL ISZERO PUSH2 0x3490 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4554485F5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 PUSH1 0x44 SWAP3 PUSH1 0x20 SWAP6 PUSH1 0x40 MLOAD SWAP4 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE GAS CALL RETURNDATASIZE ISZERO PUSH1 0x1F RETURNDATASIZE GT PUSH1 0x1 PUSH1 0x0 MLOAD EQ AND OR AND ISZERO PUSH2 0x3541 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0xF4A60FDC5D1CC8F6B091352295 0xB3 0xEB MSIZE 0xAA PUSH18 0xC70869C4C7FC64B3C2CEB304AE64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "348:1654:0:-:0;;;;;;;;;;;-1:-1:-1;348:1654:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1931:17:14;;;;;;;;;:38;;;348:1654:0;1927:66:14;;2086:34;;;348:1654:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;1439:4:6;;;;;2998:28:12;;;:::i;:::-;1181:39;;;348:1654:0;1181:39:12;;1177:70;;1257:239;;;;;348:1654:0;1257:239:12;;;;2376:42:14;1257:239:12;;;348:1654:0;1257:239:12;;;;;2376:42:14;;;:::i;:::-;2422:10;348:1654:0;;2376:56:14;2372:86;;2524:108;;;2544:18;;;;2524:108;2643:778;;;2422:10;;;;2765:11;2422:10;;;2765:11;;:::i;:::-;348:1654:0;;2643:778:14;569:53:13;;;-1:-1:-1;569:53:13;;;;;348:1654:0;569:53:13;;348:1654:0;;;;;;1257:239:12;348:1654:0;;;1008:6:29;1004:10;;348:1654:0;;;;3035:62:14;348:1654:0;;2422:10:14;3041:23;2422:10;3041:23;;:::i;:::-;3035:62;:::i;:::-;2860:551;;;348:1654:0;;;;;;2860:551:14;348:1654:0;;;;;;;;;;3140:31:14;;3136:64;;2422:10;3384:11;2422:10;;;;3384:11;;:::i;3136:64::-;348:1654:0;;;3180:20:14;;;;2524:108;2590:18;;;;;2524:108;;2372:86;348:1654:0;;;2441:17:14;;;;1177:70:12;348:1654:0;;;1229:18:12;;;;1439:4:6;;;;1927:66:14;348:1654:0;;;1978:15:14;;;;1931:38;1952:17;;;;;1931:38;;348:1654:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;484:15;:26;480:66;;334:10:2;356:4;334:27;356:4;;348:1654:0;;;;;;;;;381:27:2;377:56;;231:10;;;;;;;482:1;231:10;;334;;;231;;;;;482:1;:::i;:::-;231:10;;;;;;348:1654:0;;377:56:2;348:1654:0;417:16:2;;;;330:236;554:1;;;;;;;;;:::i;480:66:0:-;348:1654;;;519:27;;;;348:1654;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;356:4:2;;;334:10;356:4;334:27;356:4;;381:8;348:1654:0;;;;;;;;381:27:2;377:56;;231:10;;;;;;;482:1;231:10;;334;;;231;;;;;482:1;:::i;348:1654:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;348:1654:0;;;;;;;;;;;-1:-1:-1;348:1654:0;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;917:846;;;;;;;;;1132:28;;1128:57;;1292:24;-1:-1:-1;1292:24:0;917:846;1318:26;;;;;;348:1654;;;;;;917:846;348:1654;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1378:22;1315:18:1;1310:54;;1460:4;;348:1654:0;;;1378:22;348:1654;313:4:6;;;348:1654:0;1479:37:1;;348:1654:0;;;1699:4:6;1536:37:1;;1699:4:6;;;1031;1639:36:1;;;1031:4:6;;;-1:-1:-1;1703:36:1;313:4:6;;348:1654:0;2998:28:12;348:1654:0;;;;;;917:846;348:1654;;;;;;;2998:28:12;:::i;:::-;2565:38:1;;348:1654:0;;;;;;917:846;348:1654;;2040:419:1;917:846:0;2040:419:1;;;2565:38;2040:419;;;348:1654:0;1460:4:1;348:1654:0;;2565:38:1;;1329:4;2646:14;348:1654:0;;;2040:419:1;2646:14;:::i;:::-;2040:419;;;2692:5;;;;4113:38:14;478:66:7;4113:38:14;;4109:174;;2565:38:1;-1:-1:-1;4293:17:14;;;-1:-1:-1;4293:17:14;4320:922;478:66:7;1004:10:29;;348:1654:0;;;;569:53:13;;348:1654:0;;4637:4:14;4610:44;348:1654:0;;;;;1257:239:12;;348:1654:0;1257:239:12;;;348:1654:0;1257:239:12;;;;;;;348:1654:0;1257:239:12;348:1654:0;6886:42:14;348:1654:0;1257:239:12;;;;;;6886:42:14;;;:::i;:::-;348:1654:0;;6790:18:14;;;348:1654:0;;;7016:52:14;1577:10;7016:52;;348:1654:0;1329:4:1;348:1654:0;7083:23:14;1329:4:1;348:1654:0;7083:23:14;;1577:10;;348:1654:0;1577:10:14;;348:1654:0;917:846;348:1654;;2565:4:6;-1:-1:-1;2565:4:6;;;;348:1654:0;1329:4:1;1577:10:14;;1439:4:6;917:846:0;7083:23:14;;2565:4:6;;;;;348:1654:0;2565:4:6;;;;;;;;1329::1;2565::6;;;;;;1439;2565;;;6871:245:14;348:1654:0;6871:245:14;;;1439:4:6;6790:18:14;;;1577:10;;;;;;;348:1654:0;;1577:10:14;;;1439:4:6;917:846:0;1577:10:14;;;;2565:4:6;;;1577:10:14;6871:245;1577:10;;;;;;;:::i;:::-;6871:245;;2565:4:6;-1:-1:-1;2565:4:6;;;6871:245:14;;;;;;;;-1:-1:-1;;;6871:245:14;;;7016:52;-1:-1:-1;4919:43:14;;6790:18;348:1654:0;;;4921:40:14;4919:43;:::i;:::-;348:1654:0;569:53:13;;348:1654:0;;5089:4:14;348:1654:0;;;;;;;1257:239:12;;348:1654:0;;;;;;5033:199:14;4320:922;;5033:199;5174:20;;;;;;;348:1654:0;5174:20:14;;5212:5;348:1654:0;;;;;917:846;348:1654;;2040:419:1;;-1:-1:-1;5252:62:14;;1699:5047:1;1536:8:0;:36;;;1475:10547:1;1532:144:0;;348:1654;1460:4:1;348:1654:0;1292:24;;;;;1532:144;1329:4:1;348:1654:0;1329:4:1;348:1654:0;;;1599:62;;;;;;;;;348:1654;;;;;;;;;;:::i;:::-;1599:62;;;1536:36;348:1654;;;;;1378:22;1856:36;:41;1536:36;;5252:62:14;6871:245;1329:4:1;348:1654:0;5293:21:14;;;;4921:40;;;4919:43;:::i;6871:245::-;;;;1329:4:1;6871:245:14;;1329:4:1;6871:245:14;;;;2565:4:6;6871:245:14;1329:4:1;2565::6;;;;6871:245:14;:::i;:::-;;;1577:10;;;;-1:-1:-1;2565:4:6;;;1577:10:14;;;;;;;;4919:43;6871:245;;1577:10;348:1654:0;;6871:245:14;;;-1:-1:-1;6871:245:14;;;1329:4:1;348:1654:0;1439:4:6;-1:-1:-1;1439:4:6;;;;;2565;;-1:-1:-1;2565:4:6;;6871:245:14;2565:4:6;1577:10:14;-1:-1:-1;2565:4:6;7016:52:14;;1758:49;7016:52;;;4610:44;;;;4109:174;1244:2:7;565:35:12;;;;;561:66;;348:1654:0;1439:4:6;348:1654:0;1329:4:1;348:1654:0;4233:39:14;;;;1439:4:6;4233:39:14;;4266:4;4233:39;;;1439:4:6;637:81:12;348:1654:0;637:81:12;4233:39:14;;;;;;;-1:-1:-1;4233:39:14;;;4109:174;4222:50;4109:174;;;;;4233:39;;348:1654:0;4233:39:14;;348:1654:0;4233:39:14;;;;;;348:1654:0;4233:39:14;;;:::i;:::-;;;1439:4:6;;;;;;4233:39:14;;;;;;-1:-1:-1;4233:39:14;;561:66:12;609:18;1329:4:1;348:1654:0;609:18:12;;;;2565:38:1;2598:4;2565:38;;;1699:5047;2731:37;;;;1460:4;2731:37;;1460:4;;348:1654:0;;;;;;;917:846;348:1654;;1329:4:1;3069:419;2998:28:12;3069:419:1;;;;348:1654:0;;;;;;2998:28:12;:::i;:::-;3594:38:1;;348:1654:0;;;;;917:846;348:1654;;3069:419:1;917:846:0;3069:419:1;;;3594:38;3069:419;;;348:1654:0;1460:4:1;348:1654:0;;3594:38:1;;348:1654:0;3676:14:1;348:1654:0;;;3069:419:1;3676:14;:::i;:::-;3069:419;;;-1:-1:-1;348:1654:0;1008:6:29;1004:10;;348:1654:0;;;6028:59:14;6034:21;;;;:::i;6028:59::-;6126:60;;;;;;6147:13;;;;:::i;:::-;6201:30;6197:63;;348:1654:0;1258:17:14;-1:-1:-1;348:1654:0;2727:4019:1;1699:5047;;6197:63:14;6240:20;348:1654:0;;6240:20:14;;;;6126:60;6172:13;;;;:::i;:::-;6126:60;;3594:38:1;3627:4;3594:38;;;2727:4019;608:4:6;3761:41:1;;608:4:6;;348:1654:0;4375:6:1;348:1654:0;;1460:4:1;348:1654:0;;;;;;;;917:846;348:1654;;4039:258:1;4359:14;1329:4;4039:258;;;4359:14;:::i;:::-;4039:258;348:1654:0;;4039:258:1;;;348:1654:0;;4039:258:1;4375:6;:::i;3757:2989::-;658:4:6;4415:40:1;;658:4:6;;348:1654:0;;;;;;;917:846;348:1654;;;;;4566:59:1;;772:4:6;1329::1;772::6;;;;;;348:1654:0;;;772:4:6;348:1654:0;772:4:6;;;;348:1654:0;772:4:6;;;;;;;;1329::1;348:1654:0;2565:4:6;;;;:::i;:::-;348:1654:0;772:4:6;;;;;348:1654:0;772:4:6;;;;;;;;348:1654:0;4566:59:1;;313:4:6;772;;;;;;348:1654:0;772:4:6;;;;;;:::i;:::-;348:1654:0;2565:4:6;1329::1;348:1654:0;2565:4:6;;;:::i;:::-;772;;;348:1654:0;772:4:6;;4566:59:1;348:1654:0;4566:59:1;;1329:4;772::6;;;;;;;;;1329::1;772::6;;;;1329::1;772::6;;;;;;;;;;;;;;;348:1654:0;772:4:6;;;;1439;1329::1;772::6;;;;1439;:::i;:::-;348:1654:0;772:4:6;;;;;348:1654:0;1329:4:1;772::6;;;348:1654:0;;;;;917:846;348:1654;;1329:4:1;772::6;;;;348:1654:0;772:4:6;;;;;4566:59:1;348:1654:0;4566:59:1;;;772:4:6;;;;:::i;:::-;;348:1654:0;1460:4:1;348:1654:0;;4651:7:1;348:1654:0;4651:7:1;348:1654:0;4651:41:1;;;;1329:4;348:1654:0;4651:41:1;1439:4:6;4651:41:1;;;;;1439:4:6;348:1654:0;772:4:6;;;;;;;;;;;348:1654:0;772:4:6;;;;348:1654:0;;;;;;;;;772:4:6;;;-1:-1:-1;772:4:6;;;;;;;;;;348:1654:0;772:4:6;1329::1;772::6;348:1654:0;772:4:6;-1:-1:-1;772:4:6;;;348:1654:0;772:4:6;;;1439;772;;;;;348:1654:0;772:4:6;;;;;;;;;;;;348:1654:0;4651:41:1;:7;;348:1654:0;4651:7:1;348:1654:0;4651:41:1;;;;;;;;772:4:6;4411:2335:1;1699:5047;;4651:41;;;;:::i;:::-;;;;772:4:6;;;;;;348:1654:0;917:846;772:4:6;;1460::1;772::6;;;1439;;348:1654:0;1439:4:6;;;348:1654:0;1439:4:6;;;;;;348:1654:0;1439:4:6;;;;;;;;;;;;;;;;;;;;;;;;772;;2565;;772;;;;;;;;;;348:1654:0;917:846;4566:59:1;772:4:6;4566:59:1;;;772:4:6;;:::i;:::-;;;;;;;;;4411:2335:1;693:4:6;;;4725:25:1;;;693:4:6;;348:1654:0;;;;;;917:846;348:1654;;4990:261:1;348:1654:0;4990:261:1;;;1329:4;;348:1654:0;;5298:14:1;4990:261;;;;5298:14;:::i;:::-;348:1654:0;;4990:261:1;348:1654:0;2737:22:8;348:1654:0;;2785:21:8;;2824:23;;;2820:53;;2891:11;;;2887:51;;2733:439;;;1699:5047:1;;2887:51:8;2930:7;;;:::i;:::-;2887:51;;;;2820:53;348:1654:0;2856:17:8;;;;2733:439;348:1654:0;;;;;2979:37:8;1439:4:6;2979:37:8;;3010:4;2979:37;;;1439:4:6;348:1654:0;2979:37:8;1439:4:6;2979:37:8;;;;;;;;;-1:-1:-1;2979:37:8;;;2733:439;3034:23;;;3030:55;;3103:11;;;3099:62;;2733:439;;;;1699:5047:1;;3099:62:8;3153:7;;;:::i;:::-;3099:62;;;;;3030:55;348:1654:0;3066:19:8;;;;2979:37;;;348:1654:0;2979:37:8;;348:1654:0;2979:37:8;;;;;;348:1654:0;2979:37:8;;;:::i;:::-;;;1439:4:6;;;;;;2979:37:8;;;;;;;-1:-1:-1;2979:37:8;;;348:1654:0;;1439:4:6;-1:-1:-1;1439:4:6;;;;;4721:2025:1;348:1654:0;5357:28:1;;348:1654:0;;;5939:5:1;348:1654:0;;;;;;;917:846;348:1654;;5923:14:1;1329:4;5621:257;;;5923:14;:::i;:::-;348:1654:0;;5621:257:1;;;348:1654:0;;5621:257:1;5939:5;:::i;5353:1393::-;772:4:6;5978:31:1;;772:4:6;;348:1654:0;;;;;;;917:846;348:1654;;;6244:256:1;;;1329:4;6552:14;1329:4;6244:256;;;;6552:14;:::i;:::-;1867:9:8;;;:33;;;;5974:772:1;1863:59:8;;348:1654:0;;;;;;;;917:846;348:1654;;;6244:256:1;348:1654:0;1936:22:8;;;1932:409;348:1654:0;;;1992:21:8;;2116:6;1992:21;;2045:14;781:6;1992:21;;2045:14;:::i;:::-;781:6;2116;;:::i;1932:409::-;348:1654:0;;2172:37:8;1439:4:6;2172:37:8;;2203:4;2172:37;;;1439:4:6;348:1654:0;2172:37:8;1439:4:6;2172:37:8;;;;;;;;;;-1:-1:-1;2172:37:8;;;1932:409;2241:14;;2323:6;2241:14;;;781:6;2241:14;;:::i;:::-;781:6;2323;;:::i;2172:37::-;;348:1654:0;2172:37:8;;348:1654:0;2172:37:8;;;;;;348:1654:0;2172:37:8;;;:::i;:::-;;;1439:4:6;;;;-1:-1:-1;1439:4:6;2241:14:8;2172:37;;;;;-1:-1:-1;2172:37:8;;;348:1654:0;1439:4:6;-1:-1:-1;1439:4:6;;;;;1863:59:8;348:1654:0;;;1909:13:8;;;;1867:33;1880:20;781:6;1880:20;;1867:33;;5974:772:1;348:1654:0;2565:4:6;348:1654:0;1329:4:1;348:1654:0;6696:27:1;;;;;;348:1654:0;6696:27:1;1635:9783;6855:36;;;;;;1031:4:6;;348:1654:0;;;;;;;917:846;348:1654;;1329:4:1;;7196:349;7594:42;2998:28:12;7196:349:1;;;;348:1654:0;;;;;;2998:28:12;:::i;:::-;7594:42:1;;;;;:::i;:::-;7678:38;348:1654:0;;;;;;917:846;348:1654;;7196:349:1;917:846:0;7196:349:1;;;7678:38;7196:349;;;7759:14;348:1654:0;;1460:4:1;348:1654:0;;7678:38:1;;348:1654:0;7196:349:1;7759:14;:::i;:::-;348:1654:0;;3008:7:11;935:55:10;892:26;3008:7:11;;;;:::i;:::-;348:1654:0;;3017:7:11;;;;:::i;:::-;348:1654:0;;892:26:10;;:::i;:::-;2976:30:11;;2956:18;935:55:10;:::i;:::-;3052:34:11;;;3035:208;;7678:38:1;348:1654:0;;;;;681:1:7;;;;;;;;3276:21:11;;;;;:::i;:::-;348:1654:0;;;;;1439:4:6;;3332:29:11;;;;348:1654:0;;3332:29:11;;;;;;;1439:4:6;;3332:29:11;348:1654:0;3332:29:11;;;;;;;;;;;-1:-1:-1;3332:29:11;;;7678:38:1;3397:9:11;;;;348:1654:0;3397:9:11;;;;;:::i;:::-;348:1654:0;;3438:29:11;;;;;;;;;;1439:4:6;3438:29:11;;;;;;;-1:-1:-1;3438:29:11;;;7678:38:1;348:1654:0;;;3438:45:11;348:1654:0;;;;;;917:846;348:1654;;7196:349:1;;3438:45:11;;:::i;:::-;3497:28;3493:62;;6851:4549:1;;1635:9783;;3493:62:11;348:1654:0;3534:21:11;;;;3438:29;;;348:1654:0;3438:29:11;;348:1654:0;3438:29:11;;;;;;348:1654:0;3438:29:11;;;:::i;:::-;;;1439:4:6;;;;-1:-1:-1;1439:4:6;;348:1654:0;3438:29:11;;;;;-1:-1:-1;3438:29:11;;;348:1654:0;;1439:4:6;-1:-1:-1;1439:4:6;;;;;3332:29:11;;;348:1654:0;3332:29:11;;348:1654:0;3332:29:11;;;;;;348:1654:0;3332:29:11;;;:::i;:::-;;;1439:4:6;;;;-1:-1:-1;1439:4:6;;3397:9:11;3332:29;;;;;-1:-1:-1;3332:29:11;;;348:1654:0;;1439:4:6;-1:-1:-1;1439:4:6;;;;;681:1:7;781:6:8;-1:-1:-1;781:6:8;;;;;-1:-1:-1;781:6:8;3035:208:11;3223:8;3196:7;;;;;:::i;:::-;348:1654:0;;3223:8:11;:::i;:::-;3035:208;;;;;7678:38:1;7759:14;348:1654:0;7711:4:1;7678:38;;;6851:4549;1210:4:6;7844:37:1;;1210:4:6;;348:1654:0;8584:42:1;2998:28:12;348:1654:0;;;;;;917:846;348:1654;;;;;;;2998:28:12;:::i;8584:42:1:-;348:1654:0;;;;;;917:846;348:1654;;8186:349:1;917:846:0;8186:349:1;;;8668:38;8186:349;;;8750:14;348:1654:0;;1460:4:1;348:1654:0;;8668:38:1;348:1654:0;8186:349:1;8750:14;:::i;:::-;4217:105:11;-1:-1:-1;348:1654:0;5680:1:10;348:1654:0;;5666:15:10;5662:41;;1329:4:1;348:1654:0;;;;;;917:846;348:1654;;8186:349:1;;348:1654:0;;;681:1:7;;;;;;;;;5741:295:10;5775:5;;;348:1654:0;;;;;;;;917:846;348:1654;;8186:349:1;;4336:26:11;;4332:59;;4494:9;4423:7;;4450:8;4423:7;348:1654:0;4423:7:11;;;:::i;4450:8::-;4494:9;:::i;4332:59::-;3352:34:10;1329:4:1;348:1654:0;4371:20:11;;;;5782:3:10;681:1:7;;;;;;;;;;;1680:55:10;348:1654:0;5939:11:10;348:1654:0;;5939:11:10;;;;;:::i;:::-;348:1654:0;;5952:7:10;1637:26;5952:7;;;;;:::i;:::-;348:1654:0;;1637:26:10;;:::i;:::-;4274:30:11;;;;4254:18;1680:55:10;:::i;:::-;348:1654:0;1329:4:1;348:1654:0;3352:34:10;1439:4:6;3352:34:10;;;348:1654:0;;;;;;;;3352:34:10;;;;;;;-1:-1:-1;;;3352:34:10;;;5782:3;348:1654:0;;;;;;;3419:62:10;348:1654:0;3419:16:10;:62;348:1654:0;;;3419:62:10;;;4800:14;;;:33;;;;3419:62;4796:63;;4889:21;;;;:::i;:::-;4913:4;;781:6:8;;;;;;;;;;;;;;;4950:22:10;;;;:::i;:::-;4976:3;;781:6:8;;;;;;;;;;;;;;;5001:23:10;;;;:::i;:::-;348:1654:0;1460:4:1;348:1654:0;;;;;;;5974:51:10;5782:3;348:1654:0;;;;681:1:7;348:1654:0;5746:27:10;;;348:1654:0;781:6:8;;;-1:-1:-1;781:6:8;;;-1:-1:-1;781:6:8;;;;;-1:-1:-1;781:6:8;;;-1:-1:-1;781:6:8;;;;;-1:-1:-1;781:6:8;;;-1:-1:-1;781:6:8;4796:63:10;348:1654:0;1329:4:1;348:1654:0;4842:17:10;;;;4800:33;4818:15;;;4800:33;;3419:62;;;;3352:34;;;;;;;348:1654:0;3352:34:10;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;5662:41;5690:13;1329:4:1;348:1654:0;5690:13:10;;;;8668:38:1;8750:14;348:1654:0;8701:4:1;8668:38;;;7840:3560;1254:4:6;8835:34:1;;1254:4:6;;348:1654:0;;;;;;;917:846;348:1654;;;;9000:60:1;;;348:1654:0;9000:60:1;;1439:4:6;;;;;;;;;;;;;;;;1329::1;348:1654:0;;;2565:4:6;;;;:::i;:::-;1439;348:1654:0;;;;;;;;917:846;348:1654;;;1439:4:6;:::i;:::-;;;;917:846:0;348:1654;;;;;;;;;1439:4:6;;:::i;:::-;;348:1654:0;1439:4:6;;;;;;;;348:1654:0;;;;;;;917:846;348:1654;;1439:4:6;348:1654:0;1439:4:6;;348:1654:0;;;;;917:846;348:1654;;1439:4:6;;;;;348:1654:0;1439:4:6;;;;;;;348:1654:0;1439:4:6;;:::i;:::-;348:1654:0;;9086:7:1;;;348:1654:0;;;1460:4:1;348:1654:0;;9086:44:1;;;;;1439:4:6;;348:1654:0;-1:-1:-1;348:1654:0;;;;;;9086:44:1;;;;;;;1439:4:6;9086:44:1;;;;;1439:4:6;;;;;;;;348:1654:0;1439:4:6;;;348:1654:0;1439:4:6;;;;;;348:1654:0;1439:4:6;;;;;;;;;;;;;;;;;;;;;;;;;;348:1654:0;1439:4:6;;;;;;;;348:1654:0;1439:4:6;;;;;;;;;;:::i;:::-;9086:44:1;;;;;;;;;;;;8831:2569;1699:5047;;8831:2569;1292:4:6;9163:28:1;;1292:4:6;;348:1654:0;;;;;;917:846;348:1654;;1329:4:1;9610:14;348:1654:0;9383:185:1;;;;348:1654:0;;9383:185:1;9610:14;:::i;:::-;9626:9;;478:66:7;3491:36:8;;478:66:7;;3552:21:8;;;3487:188;;3688:10;3684:182;;9159:2241:1;;;1699:5047;;3684:182:8;348:1654:0;3714:5:8;;348:1654:0;3714:30:8;;;;;;348:1654:0;;3714:30:8;1439:4:6;3714:30:8;;;;-1:-1:-1;3714:30:8;;;;;;;;;;;;;3684:182;348:1654:0;;3783:4:8;;3762:26;;3758:98;;3684:182;;;;;3758:98;348:1654:0;;-1:-1:-1;348:1654:0;;;;3808:33:8;;;;;1439:4:6;3808:33:8;;;;1439:4:6;348:1654:0;;;;3808:33:8;;;;;;;;;;3758:98;;;;;;;3808:33;348:1654:0;3808:33:8;;348:1654:0;3808:33:8;;;;;;348:1654:0;3808:33:8;;;:::i;:::-;;;348:1654:0;;;;;;;;;;;3808:33:8;;;;;;-1:-1:-1;3808:33:8;;3714:30;;;;:::i;:::-;;;;;348:1654:0;;1439:4:6;-1:-1:-1;1439:4:6;;;;;3487:188:8;3603:21;;;;-1:-1:-1;3590:85:8;3487:188;3590:85;3647:17;348:1654:0;;3647:17:8;;;;9159:2241:1;1333:4:6;9669:31:1;;1333:4:6;;348:1654:0;10123:14:1;348:1654:0;;;;;;;917:846;348:1654;;;9892:185:1;10123:14;:::i;:::-;348:1654:0;1329:4:1;348:1654:0;4149:30:8;1439:4:6;4149:30:8;;4173:4;4149:30;;;1439:4:6;348:1654:0;4149:5:8;1439:4:6;4149:5:8;348:1654:0;4149:5:8;348:1654:0;4149:30:8;;;;;;;-1:-1:-1;4149:30:8;;;9665:1735:1;348:1654:0;1329:4:1;348:1654:0;;;;;;917:846;348:1654;;9892:185:1;;4193:21:8;;4189:76;;4278:9;4274:171;;9665:1735:1;;1699:5047;;4274:171:8;348:1654:0;4149:5:8;348:1654:0;4303:21:8;;;;1329:4:1;348:1654:0;1439:4:6;4303:21:8;;;4149:30;4303:21;;348:1654:0;-1:-1:-1;4149:5:8;1439:4:6;4149:5:8;;348:1654:0;4149:5:8;348:1654:0;4303:21:8;;;;;;;;4274:171;-1:-1:-1;348:1654:0;;;4173:4:8;4338:97;4274:171;4338:97;4414:5;;;:::i;4303:21::-;;;;:::i;:::-;;;;4189:76;4149:30;1329:4:1;348:1654:0;4237:17:8;;;;4149:30;;;348:1654:0;4149:30:8;;348:1654:0;4149:30:8;;;;;;348:1654:0;4149:30:8;;;:::i;:::-;;;1439:4:6;;;;-1:-1:-1;1439:4:6;;1329::1;4149:30:8;;;;;-1:-1:-1;4149:30:8;;9665:1735:1;1390:4:6;10182:47:1;;1390:4:6;;348:1654:0;;;;;;917:846;348:1654;;;;10355:67:1;;348:1654:0;10355:67:1;;1439:4:6;348:1654:0;1439:4:6;;;;;;348:1654:0;;;1439:4:6;;348:1654:0;1439:4:6;;;;;;313;1439;;;;;;348:1654:0;1439:4:6;;;;;;;:::i;:::-;1329::1;;348:1654:0;2565:4:6;348:1654:0;;2565:4:6;;;:::i;:::-;1439;;;348:1654:0;1439:4:6;;;;;;;;;;;;;;;;;;;;;;;;;348:1654:0;;;;;;;1460:4:1;348:1654:0;;;;1309:13:9;-1:-1:-1;1324:15:9;;;;;;1445:7;;;;;348:1654:0;1445:34:9;;;;;;348:1654:0;;1439:4:6;1445:34:9;;348:1654:0;1445:34:9;;;348:1654:0;;;;;;;;;;;;;;;;;-1:-1:-1;;348:1654:0;;;;;;1445:34:9;;;;;;-1:-1:-1;1445:34:9;;;;;;;;;;;;;;;10178:1222:1;1699:5047;;348:1654:0;;;;;;917:846;348:1654;;;;1460:4:1;348:1654:0;;;;;;;1439:4:6;;348:1654:0;;;;;;;;;1439:4:6;348:1654:0;;;;;;;;;1439:4:6;348:1654:0;;;;;;1439:4:6;348:1654:0;2565:4:6;;348:1654:0;;;;;;;;;;1341:3:9;1364:15;;;;;;:::i;:::-;;348:1654:0;;1364:29:9;1360:65;;348:1654:0;;;;;1460:4:1;348:1654:0;1309:13:9;;1360:65;1402:23;348:1654:0;;1402:23:9;;;;1439:4:6;917:846:0;348:1654;1439:4:6;;;;;;;348:1654:0;917:846;348:1654;;;2565:4:6;;;:::i;:::-;1439;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;348:1654:0;1439:4:6;;;:::i;:::-;348:1654:0;1439:4:6;;;;;;;;;;;10178:1222:1;10524:39;;-1:-1:-1;1439:4:6;10524:39:1;;1439:4:6;;1329::1;;348:1654:0;;;11094:29:1;1439:4:6;11094:29:1;;348:1654:0;;;;;;;;;;;;;917:846;348:1654;;;10800:258:1;348:1654:0;11094:29:1;;;;;;1439:4:6;;348:1654:0;;;;;;;;;;917:846;348:1654;;10800:258:1;;348:1654:0;11094:29:1;;;;;;;-1:-1:-1;11094:29:1;;;10520:880;348:1654:0;;;;;;;;917:846;348:1654;;10800:258:1;;-1:-1:-1;11094:43:1;;;11164:63;;;10520:880;;;1699:5047;;11164:63;348:1654:0;;11204:22:1;348:1654:0;11187:40:1;;1439:4:6;11187:40:1;;;348:1654:0;;-1:-1:-1;2565:4:6;;;;348:1654:0;;;2565:4:6;;;;;;;;;;;11164:63:1;;;;;;2565:4:6;;;;-1:-1:-1;2565:4:6;;-1:-1:-1;2565:4:6;11094:29:1;;;348:1654:0;11094:29:1;;348:1654:0;11094:29:1;;;;;;348:1654:0;11094:29:1;;;:::i;:::-;;;1439:4:6;;;;-1:-1:-1;1439:4:6;;348:1654:0;11094:29:1;;;;;-1:-1:-1;11094:29:1;;;348:1654:0;;1439:4:6;-1:-1:-1;1439:4:6;;;;;10520:880:1;2565:4:6;348:1654:0;1329:4:1;348:1654:0;11350:27:1;;;;;;;348:1654:0;11350:27:1;1475:10547;11606:36;;;;;;;2565:4:6;11606:36:1;;2565:4:6;;348:1654:0;2998:28:12;348:1654:0;;;;;;917:846;348:1654;;;;;;;2998:28:12;:::i;:::-;2592:23;348:1654:0;;;;;;;;;917:846;348:1654;;;2135:428:12;;;;;;;;;;;;;;2592:23;:::i;:::-;348:1654:0;;;;;;917:846;348:1654;;;2576:39:12;2572:70;;2565:4:6;348:1654:0;2135:428:12;348:1654:0;;;;11852:71:1;11875:27;348:1654:0;11852:71:1;;;2135:428:12;11852:71:1;;;2565:4:6;;;;;;:::i;:::-;;;;;;;;;;348:1654:0;;;;;;;917:846;348:1654;;2135:428:12;;;;;;;348:1654:0;;;;;;;;;;;;917:846;348:1654;;2135:428:12;;348:1654:0;2135:428:12;;;;;;;;;348:1654:0;2565:4:6;;;;2135:428:12;;;;;;;2565:4:6;-1:-1:-1;2565:4:6;;348:1654:0;;;;;;;917:846;348:1654;;2135:428:12;;;;;;;2565:4:6;;;;;2135:428:12;2565:4:6;;;;;;348:1654:0;;;;;;917:846;348:1654;;2135:428:12;;;;;2565:4:6;;;348:1654:0;;2565:4:6;;;;;;;;;;;;;2135:428:12;2565:4:6;;348:1654:0;2565:4:6;;;;348:1654:0;;2565:4:6;;;;;;;348:1654:0;;;;2565:4:6;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;11852:71:1;-1:-1:-1;;11852:71:1;2135:428:12;11852:71:1;;;;;;:::i;:::-;348:1654:0;11831:93:1;;11852:71;;11840:4;;11831:93;;;2565:4:6;;;;;;;;;:::i;:::-;348:1654:0;2565:4:6;2135:428:12;348:1654:0;2565:4:6;;;:::i;:::-;;;;-1:-1:-1;348:1654:0;2565:4:6;;;;11791:133:1;1475:10547;;2565:4:6;;;1310:54:1;1348:16;1329:4;348:1654:0;1348:16:1;;;;348:1654:0;;-1:-1:-1;348:1654:0;;;;;-1:-1:-1;348:1654:0;1318:26;-1:-1:-1;;;;917:846:0:o;1128:57::-;1169:16;348:1654;;1169:16;;;;2565:4:6;348:1654:0;2565:4:6;348:1654:0;2565:4:6;;348:1654:0;2565:4:6;348:1654:0;;;;;;2565:4:6;-1:-1:-1;2565:4:6;;;;;;348:1654:0;;2565:4:6;;;:::o;:::-;1439;2565;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;348:1654:0;2565:4:6;;;;;;;;;;;;;:::o;:::-;;348:1654:0;;2565:4:6;348:1654:0;;2565:4:6;;;;;;;;;;;;;:::o;:::-;;;;;;348:1654:0;;;;2565:4:6;;;:::o;1439:::-;;;;;;;;;;;:::o;:::-;;348:1654:0;;;;1439:4:6;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;348:1654:0;;2565:4:6;;;:::i;:::-;1439;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;348:1654:0;1439:4:6;;;:::i;:::-;348:1654:0;1439:4:6;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;348:1654:0;2565:4:6;348:1654:0;;2565:4:6;;;:::i;:::-;1439;;;;;;;;;;;;-1:-1:-1;1439:4:6;;;;;;;;2565;;;;;1439;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;348:1654:0;2565:4:6;348:1654:0;;2565:4:6;;;:::i;:::-;1439;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;777:298:2;348:1654:0;;;;;239:1:2;855:33;;239:1;;348:1654:0;;239:1:2;348:1654:0;;904:15:2;:::o;851:218::-;940:35;;-1:-1:-1;1144:1:7;940:35:2;1144:1:7;;1006:4:2;;991:20;:::o;936:133::-;1042:16;:::o;1033:379:8:-;;;;;348:1654:0;;1118:22:8;348:1654:0;;1182:5:8;;;;;:::i;:::-;1033:379::o;1114:292::-;478:66:7;1223:35:8;;1219:119;;1114:292;1389:5;;;;;:::i;1219:119::-;348:1654:0;;;;1286:37:8;1439:4:6;1286:37:8;;1317:4;1286:37;;;1439:4:6;1286:37:8;;1439:4:6;1286:37:8;;;;;;;;;812:1:7;1286:37:8;;;1219:119;-1:-1:-1;1219:119:8;1278:45;1219:119;;1286:37;;;;;;;;;;;;;;;:::i;:::-;;;1439:4:6;;;;;;-1:-1:-1;1389:5:8;1286:37;;;;;-1:-1:-1;1286:37:8;;781:6;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;804:157:9;;;348:1654:0;909:7:9;;;348:1654:0;909:45:9;;;;;;;348:1654:0;;;;;;;;;;909:45:9;;;;;1439:4:6;909:45:9;;348:1654:0;909:45:9;;;1439:4:6;348:1654:0;;;;1439:4:6;348:1654:0;;;;1439:4:6;348:1654:0;;;;1439:4:6;909:45:9;;;;;;;;804:157;:::o;909:45::-;;;;:::i;348:1654:0:-;;;;;;;;;:::o;:::-;;;1460:4:1;348:1654:0;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;681:1:7:-;;;;;;;;;;:::o;1801:257:9:-;;;;348:1654:0;;;;1936:4:9;1919:22;1936:4;;1965:6;;;;;:::i;1915:136::-;368:25:16;;;;;364:50;;2032:18:9;348:1654:0;;2032:18:9;;:::i;364:50:16:-;402:12;348:1654:0;;402:12:16;;;;2084:452:10;;348:1654:0;2084:452:10;2372:93;2084:452;348:1654:0;;2417:32:10;;;;348:1654:0;;;;;;;;;;;;;;;;2417:32:10;;;;;;:::i;:::-;348:1654:0;2407:43:10;;2372:93;348:1654:0;;2372:93:10;;;2417:32;2372:93;;;;348:1654:0;;;;;;;;;;;;;;;;;;;;;;;;;;2372:93:10;;2417:32;2372:93;;;;;;:::i;:::-;348:1654:0;2337:150:10;;348:1654:0;2084:452:10;:::o;6316:196::-;348:1654:0;;;;;;;6452:15:10;348:1654:0;;;6316:196:10;:::o;6452:53::-;6433:72;6316:196;:::o;348:1654:0:-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;710:1599:11:-;;;;843:1;348:1654:0;;829:15:11;825:43;;348:1654:0;;;;;;;;;957:45:11;348:1654:0;;;;;;994:7:11;;;;:::i;957:45::-;937:65;348:1654:0;;;;;;;;;;1138:9:11;-1:-1:-1;1133:1160:11;1149:18;;;;;;710:1599;;;;;;;;;:::o;1169:3::-;1227:7;;;;;:::i;:::-;348:1654:0;;;;;1236:11:11;999:1;348:1654:0;;1236:11:11;;:::i;:::-;348:1654:0;;;;;;;;;1306:34:11;1439:4:6;1306:34:11;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1306:34:11;;;1169:3;-1:-1:-1;;348:1654:0;;1426:15:11;;;348:1654:0;;;;;;;;;;;1426:61:11;;;;;348:1654:0;;1527:28:11;;;;1439:4:6;1527:28:11;;;;;;1439:4:6;;1527:28:11;;;;;;;;;;-1:-1:-1;1527:28:11;;;1426:61;348:1654:0;;;;4001:14:10;;;:33;;;;;;1426:61:11;3997:63:10;;4107:3;;781:6:8;;;;;;;;;;;;;4140:28:10;;;;:::i;:::-;4212:4;;781:6:8;;;;;;;;;;;4200:34:10;;;;;;;;;4256:23;4200:34;;:::i;:::-;4256:23;;:::i;:::-;1763:73:11;;;;;;-1:-1:-1;1763:73:11;;;1909:24;;;;;;348:1654:0;2075:11:11;1680:55:10;348:1654:0;;;843:1:11;1637:26:10;348:1654:0;;2075:11:11;;:::i;1637:26:10:-;2035:30:11;;;;2015:18;1680:55:10;:::i;:::-;1909:245:11;;348:1654:0;;;;2565:4:6;;;;;;;;;;;;;;;;-1:-1:-1;2565:4:6;;2172:73:11;;;;;348:1654:0;;-1:-1:-1;348:1654:0;;;;;;;2172:73:11;;;;;;;1439:4:6;2172:73:11;;;;;348:1654:0;;;;;;;;;1439:4:6;348:1654:0;;;;;;;;;;:::i;:::-;2172:73:11;;;;;;;;;;1909:245;2263:15;;;;;999:1;2263:15;1169:3;348:1654:0;1138:9:11;;;;2172:73;2565:4:6;;;;-1:-1:-1;;2565:4:6;999:1:11;2172:73;;;;;;2565:4:6;;;;;-1:-1:-1;2565:4:6;;-1:-1:-1;2565:4:6;1909:245:11;;;;;;;-1:-1:-1;1909:245:11;;1763:73;;;-1:-1:-1;1763:73:11;;;781:6:8;;;;;-1:-1:-1;781:6:8;;-1:-1:-1;781:6:8;;;;;;-1:-1:-1;781:6:8;;-1:-1:-1;781:6:8;3997:63:10;348:1654:0;;;4043:17:10;;;;4001:33;4019:15;;;4001:33;;1527:28:11;;;;;;;;;;;;;;;;:::i;:::-;;;1439:4:6;;;;;;1527:28:11;;;;;;;;;;348:1654:0;;1439:4:6;-1:-1:-1;1439:4:6;;;;;1426:61:11;;;;1306:34;;;;;;;;;;;;;;-1:-1:-1;1306:34:11;;;;;;:::i;:::-;;;;;;;;;;;825:43;853:15;348:1654:0;;853:15:11;;;;348:1654:0;;;;;;;;;;:::o;1949:700:12:-;;2135:428;;;;;2592:23;2135:428;;;;;;;;;;2592:23;;:::i;:::-;-1:-1:-1;2572:70:12;;1949:700::o;:::-;;2135:428;;;;;;;2592:23;2135:428;;;;;;;;;;2592:23;;:::i;348:1654:0:-;;;;;;;;;:::o;6475:648:14:-;;;;348:1654:0;1181:39:12;;1177:70;;1257:239;;6778:51:14;1577:10;1257:239:12;1577:10:14;7083:23;1257:239:12;;;;;;;;;6886:42:14;1257:239:12;;;;;;6811:18:14;;;348:1654:0;;1257:239:12;;;;;;;;6886:42:14;;:::i;:::-;348:1654:0;7016:52:14;;;;;;1577:10;7016:52;;348:1654:0;;;;;;;;7083:23:14;;;;;;1577:10;1257:239:12;1577:10:14;;;;:::i;:::-;348:1654:0;;1577:10:14;;;1439:4:6;7083:23:14;;;;;;;;:::i;:::-;348:1654:0;;;6871:245:14;;;;;;;1439:4:6;6871:245:14;;348:1654:0;6871:245:14;;;1439:4:6;1577:10:14;;;;;;;;348:1654:0;;1577:10:14;;;1439:4:6;1577:10:14;;;;;;;;;;:::i;:::-;6871:245;;;;;;;;;6778:51;;;6871:245;;;7016:52;6840:276;;;6475:648;:::o;6871:245::-;;;;;;;;;;;;;;;;;:::i;:::-;;;1577:10;;;;;7083:23;1577:10;;;;;6871:245;;;;;;;;;;348:1654:0;;1439:4:6;6778:51:14;1439:4:6;;;;;7016:52:14;1758:49;7016:52;;;7129:631;348:1654:0;;;;;;;;7251:15:14;7247:56;;7129:631;348:1654:0;;;;;7571:31:14;;;;;348:1654:0;;1439:4:6;;348:1654:0;;;;1439:4:6;348:1654:0;;;;;;7571:31:14;;348:1654:0;2565:4:6;;;;;;;;;;;;7430:259:14;;2565:4:6;;348:1654:0;2565:4:6;348:1654:0;;7561:42:14;;7430:259;;;;;7633:30;;7513:18;;7430:259;348:1654:0;;;;;;;;;;;;;;;;;;;;;;;;;;7430:259:14;;;;;;;;;;:::i;7247:56::-;7287:16;;;7247:56;;799:339:18;-1:-1:-1;799:339:18;;;;;937:145;;348:1654:0;;;799:339:18:o;348:1654:0:-;;;;;;;;;;;;;;;;;;;;;;;2950:1499:18;-1:-1:-1;2950:1499:18;;3128:1269;2950:1499;3128:1269;2950:1499;3128:1269;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3128:1269:18;;;;;348:1654:0;;;2950:1499:18:o;348:1654:0:-;;3128:1269:18;348:1654:0;;;;3128:1269:18;;348:1654:0;;;;3128:1269:18;348:1654:0;;;;3128:1269:18;348:1654:0;;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"permit2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v3Factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pairInitCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolInitCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct RouterParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHNotAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commandIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FromAddressIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBips\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commandType\",\"type\":\"uint256\"}],\"name\":\"InvalidCommandType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReserves\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRouterParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReservedBitSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionDeadlinePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeCast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2TooMuchRequested\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3TooMuchRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"inputs\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"inputs\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute(bytes,bytes[])\":{\"params\":{\"commands\":\"A set of concatenated commands, each 1 byte in length\",\"inputs\":\"An array of byte strings containing abi encoded inputs for each command\"}},\"execute(bytes,bytes[],uint256)\":{\"params\":{\"commands\":\"A set of concatenated commands, each 1 byte in length\",\"deadline\":\"The deadline by which the transaction must be executed\",\"inputs\":\"An array of byte strings containing abi encoded inputs for each command\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ETHNotAccepted()\":[{\"notice\":\"Thrown when attempting to send ETH directly to the contract\"}],\"ExecutionFailed(uint256,bytes)\":[{\"notice\":\"Thrown when a required command has failed\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when attempting to execute commands and an incorrect number of inputs are provided\"}],\"TransactionDeadlinePassed()\":[{\"notice\":\"Thrown when executing commands with an expired deadline\"}],\"UnsafeCast()\":[{\"notice\":\"Thrown when a valude greater than type(uint160).max is cast to uint160\"}]},\"kind\":\"user\",\"methods\":{\"execute(bytes,bytes[])\":{\"notice\":\"Executes encoded commands along with provided inputs.\"},\"execute(bytes,bytes[],uint256)\":{\"notice\":\"Executes encoded commands along with provided inputs. Reverts if deadline has expired.\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniversalRouter.sol\":\"UniversalRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/UniversalRouter.sol\":{\"keccak256\":\"0x68f689e704d1917d0c75aa5b2b75eb71b80879ec18673295e7f8fd498484048d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://db2b85c9c8e98b00acfe365ad498e6e7d6e5c2928191184e2b38728ab316e5fc\",\"dweb:/ipfs/QmRwqBfTqnbNrNsn79QVo5BLXzMJjt6krCnaNDikwmBTr8\"]},\"contracts/base/Dispatcher.sol\":{\"keccak256\":\"0x0711c59ac85bd732849c97627d965a113c864458617235657bc971865890fe26\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5697eeb7553db95f794b519ca697ff7c6a999a18f56c408f61ccaf335579d707\",\"dweb:/ipfs/QmPCP7guzBoVa8ndwZ9Zya7XfEzEKuShpAEFnsHNmtAxTb\"]},\"contracts/base/LockAndMsgSender.sol\":{\"keccak256\":\"0x6f816683f08585270627953efeb3a30e59c1353b9012430975e992e7132a9446\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e3b9cbd8e0757a046722fdb22c59727b974410943b51027b070e79640628efe4\",\"dweb:/ipfs/QmXNTi5j5au1UQQzfWUqmejFPEsrxcmyS24dS8KJWzaJfX\"]},\"contracts/base/RouterImmutables.sol\":{\"keccak256\":\"0x4589c74a2dc26510fd08829600f05b5dfe66eee31e510d48d8de084ef91d1181\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c30c65e52c73ed8addbdddde3ce7a5949839ba9c2821b2db005e235334b388db\",\"dweb:/ipfs/QmXYn2yRHcooDao7pMKNoT6ChPg3XLADxtC9ojHZT96uqV\"]},\"contracts/interfaces/IUniversalRouter.sol\":{\"keccak256\":\"0x4252c8bda3e2d57b1e7f8c4538f4595a954d8e36fe2dea160fdf6f9853c0798c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7c95edb7119e23c0ae86fca90a1847b606713da5d1159ed9a1bca24ee9b60f82\",\"dweb:/ipfs/QmaVxX4HDDwkbSoCdYMEt61FJ2fA4xjNko2e4ce5b8gHQm\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Commands.sol\":{\"keccak256\":\"0x598de260a2a139f3b398a5d58b4a7fdb9e09a5812817efa2611cc872c4f90583\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c573d5b791dd3e7afd13a07274c882681773ac9fdc9c4f1181e050edf926457c\",\"dweb:/ipfs/Qma1Sy54fU6aiGmzn8ECMGYiYsc7NEcbWAy5Lbs3meTVgK\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"contracts/modules/Payments.sol\":{\"keccak256\":\"0x285335ca1029455364741cd08ac3bc6d9565a0996ea4a167dfa6e49f7c7b05fa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f9b0f44bc95178800435a7ba55b739216dce8b422ea0c2fb5f1ae0f874c31fcb\",\"dweb:/ipfs/QmYVYbeNDGh9ieC6wSYhHiiWvcwnzzB3ecq2ZYAjr9wbMh\"]},\"contracts/modules/Permit2Payments.sol\":{\"keccak256\":\"0x92e2adaa06456f7753608dd60435e13183e927d7a5aa47ed00bb2cf974e88697\",\"urls\":[\"bzz-raw://11cd58adc2e0f0a52c7bc02bc541ca6ef0b521f169a086d6638a1d2c9fa364bd\",\"dweb:/ipfs/QmYXQc8HeE6gYVXVp8gmscy5ZS8SbTq3HfjeGRmsvpSW1W\"]},\"contracts/modules/uniswap/v2/UniswapV2Library.sol\":{\"keccak256\":\"0x58474fb5c405c6c1451ed34255a6b2e4c3f1fe7c9aa3fec6acf5c2ca31f45e56\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://dea1775dbf82e16d79ef8dd4b2c738435d9cd6460d1c77bf4e4ffe375cc28324\",\"dweb:/ipfs/Qmeg9WRi5CnCBNYvmeait5ga7ykKQGtXxUCzG2dp3YTN6G\"]},\"contracts/modules/uniswap/v2/V2SwapRouter.sol\":{\"keccak256\":\"0xfc4cc4074f432dfefb2c5090d5b3d8aa59a5bb21f9348a3e2154ac106c34f472\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ff06a43786b0a6b49b6194a6535309de36f4b7f4008a34b108a11552308f46cc\",\"dweb:/ipfs/QmcJuLUAiKwvea6UJQmpWS9pZCmDUN8AWBaPrLFN99mXKX\"]},\"contracts/modules/uniswap/v3/BytesLib.sol\":{\"keccak256\":\"0x279376a70c42f5720d23ceb28339d7f10dcce745a73173b9762a2803223ff448\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://80e2e21c8a428cee7b818a22343a99a03b5fcc3862ee5b5c95c428dab46bb27d\",\"dweb:/ipfs/QmZrwRFg2ZJ6dqejyqYJyMtFS1cYuMYose1dhgRisBmK9s\"]},\"contracts/modules/uniswap/v3/V3Path.sol\":{\"keccak256\":\"0xf6abbf4c7cd0975ddabb0ddb641ea9ae3b0cc1dd9a1cabf5e7cc271a974eabc2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1e0987fc9b81c65eada64cb65f981680c2054e489a6049d397b5ecbbf4c9a0a9\",\"dweb:/ipfs/QmW7mbbHsfc2GLy2GkCUv3VwXV93y6UFtKDD7E9QEtzFH7\"]},\"contracts/modules/uniswap/v3/V3SwapRouter.sol\":{\"keccak256\":\"0xbc0b220d89735e9a802fe47cd47cca3dd986f2e1301d5467acdfb2a7a24143f4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7c9ddfe0f15e2d2ab4b6c7eb238d8af28d4be297c0f49c48497ea6915a3c2e25\",\"dweb:/ipfs/QmYZcJPxWdxA31FgLexwBaLAfufxqVvA3bZCe82GkEVTYS\"]},\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x14cf8839107a3b30fbd02e92b1506d8ee25a002b6d1dd37ff2745b2adbaf4f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb1a740ae82ee2f704135927e817780971356b41288e6b044c43ac9e3cb8e97d\",\"dweb:/ipfs/Qmbi1ZZREFLnNyAfpvPpgRYYdxCTemqTr5krfX6ufVA7D2\"]},\"lib/permit2/src/libraries/SafeCast160.sol\":{\"keccak256\":\"0x8a34e2beac108d74f89510c949983212b5f09307a93ee9e17a9d50e93f6bc8e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://828697f9567ce617c5c1c8f76b6bcd250e93aea2c4f3ee188be6dff8443c19e7\",\"dweb:/ipfs/QmafxeSPhUc9gGtNDLAw26oZooC5XNLhDMxHxYhJxL5Nwi\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4\",\"dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\",\"urls\":[\"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf\",\"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]}},\"version\":1}",
					"userdoc": {
						"errors": {
							"ETHNotAccepted()": [
								{
									"notice": "Thrown when attempting to send ETH directly to the contract"
								}
							],
							"ExecutionFailed(uint256,bytes)": [
								{
									"notice": "Thrown when a required command has failed"
								}
							],
							"LengthMismatch()": [
								{
									"notice": "Thrown when attempting to execute commands and an incorrect number of inputs are provided"
								}
							],
							"TransactionDeadlinePassed()": [
								{
									"notice": "Thrown when executing commands with an expired deadline"
								}
							],
							"UnsafeCast()": [
								{
									"notice": "Thrown when a valude greater than type(uint160).max is cast to uint160"
								}
							]
						},
						"kind": "user",
						"methods": {
							"execute(bytes,bytes[])": {
								"notice": "Executes encoded commands along with provided inputs."
							},
							"execute(bytes,bytes[],uint256)": {
								"notice": "Executes encoded commands along with provided inputs. Reverts if deadline has expired."
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/base/Dispatcher.sol": {
				"Dispatcher": {
					"abi": [
						{
							"inputs": [],
							"name": "BalanceTooLow",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ContractLocked",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FromAddressIsNotOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientETH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidBips",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "commandType",
									"type": "uint256"
								}
							],
							"name": "InvalidCommandType",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidRouterParameters",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReservedBitSet",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SliceOutOfBounds",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UnsafeCast",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2InvalidPath",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2TooLittleReceived",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2TooMuchRequested",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidAmountOut",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidSwap",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3TooLittleReceived",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3TooMuchRequested",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "commands",
									"type": "bytes"
								},
								{
									"internalType": "bytes[]",
									"name": "inputs",
									"type": "bytes[]"
								}
							],
							"name": "execute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"execute(bytes,bytes[])": {
								"params": {
									"commands": "A set of concatenated commands, each 1 byte in length",
									"inputs": "An array of byte strings containing abi encoded inputs for each command"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Decodes and Executes Commands (ERC20-only)",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FromAddressIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBips\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commandType\",\"type\":\"uint256\"}],\"name\":\"InvalidCommandType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRouterParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReservedBitSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeCast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2TooMuchRequested\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3TooMuchRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"inputs\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute(bytes,bytes[])\":{\"params\":{\"commands\":\"A set of concatenated commands, each 1 byte in length\",\"inputs\":\"An array of byte strings containing abi encoded inputs for each command\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Decodes and Executes Commands (ERC20-only)\",\"version\":1},\"userdoc\":{\"errors\":{\"UnsafeCast()\":[{\"notice\":\"Thrown when a valude greater than type(uint160).max is cast to uint160\"}]},\"kind\":\"user\",\"methods\":{\"execute(bytes,bytes[])\":{\"notice\":\"Executes encoded commands along with provided inputs.\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Called by the UniversalRouter to efficiently decode and execute a single command\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/Dispatcher.sol\":\"Dispatcher\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/base/Dispatcher.sol\":{\"keccak256\":\"0x0711c59ac85bd732849c97627d965a113c864458617235657bc971865890fe26\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5697eeb7553db95f794b519ca697ff7c6a999a18f56c408f61ccaf335579d707\",\"dweb:/ipfs/QmPCP7guzBoVa8ndwZ9Zya7XfEzEKuShpAEFnsHNmtAxTb\"]},\"contracts/base/LockAndMsgSender.sol\":{\"keccak256\":\"0x6f816683f08585270627953efeb3a30e59c1353b9012430975e992e7132a9446\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e3b9cbd8e0757a046722fdb22c59727b974410943b51027b070e79640628efe4\",\"dweb:/ipfs/QmXNTi5j5au1UQQzfWUqmejFPEsrxcmyS24dS8KJWzaJfX\"]},\"contracts/base/RouterImmutables.sol\":{\"keccak256\":\"0x4589c74a2dc26510fd08829600f05b5dfe66eee31e510d48d8de084ef91d1181\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c30c65e52c73ed8addbdddde3ce7a5949839ba9c2821b2db005e235334b388db\",\"dweb:/ipfs/QmXYn2yRHcooDao7pMKNoT6ChPg3XLADxtC9ojHZT96uqV\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Commands.sol\":{\"keccak256\":\"0x598de260a2a139f3b398a5d58b4a7fdb9e09a5812817efa2611cc872c4f90583\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c573d5b791dd3e7afd13a07274c882681773ac9fdc9c4f1181e050edf926457c\",\"dweb:/ipfs/Qma1Sy54fU6aiGmzn8ECMGYiYsc7NEcbWAy5Lbs3meTVgK\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"contracts/modules/Payments.sol\":{\"keccak256\":\"0x285335ca1029455364741cd08ac3bc6d9565a0996ea4a167dfa6e49f7c7b05fa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f9b0f44bc95178800435a7ba55b739216dce8b422ea0c2fb5f1ae0f874c31fcb\",\"dweb:/ipfs/QmYVYbeNDGh9ieC6wSYhHiiWvcwnzzB3ecq2ZYAjr9wbMh\"]},\"contracts/modules/Permit2Payments.sol\":{\"keccak256\":\"0x92e2adaa06456f7753608dd60435e13183e927d7a5aa47ed00bb2cf974e88697\",\"urls\":[\"bzz-raw://11cd58adc2e0f0a52c7bc02bc541ca6ef0b521f169a086d6638a1d2c9fa364bd\",\"dweb:/ipfs/QmYXQc8HeE6gYVXVp8gmscy5ZS8SbTq3HfjeGRmsvpSW1W\"]},\"contracts/modules/uniswap/v2/UniswapV2Library.sol\":{\"keccak256\":\"0x58474fb5c405c6c1451ed34255a6b2e4c3f1fe7c9aa3fec6acf5c2ca31f45e56\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://dea1775dbf82e16d79ef8dd4b2c738435d9cd6460d1c77bf4e4ffe375cc28324\",\"dweb:/ipfs/Qmeg9WRi5CnCBNYvmeait5ga7ykKQGtXxUCzG2dp3YTN6G\"]},\"contracts/modules/uniswap/v2/V2SwapRouter.sol\":{\"keccak256\":\"0xfc4cc4074f432dfefb2c5090d5b3d8aa59a5bb21f9348a3e2154ac106c34f472\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ff06a43786b0a6b49b6194a6535309de36f4b7f4008a34b108a11552308f46cc\",\"dweb:/ipfs/QmcJuLUAiKwvea6UJQmpWS9pZCmDUN8AWBaPrLFN99mXKX\"]},\"contracts/modules/uniswap/v3/BytesLib.sol\":{\"keccak256\":\"0x279376a70c42f5720d23ceb28339d7f10dcce745a73173b9762a2803223ff448\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://80e2e21c8a428cee7b818a22343a99a03b5fcc3862ee5b5c95c428dab46bb27d\",\"dweb:/ipfs/QmZrwRFg2ZJ6dqejyqYJyMtFS1cYuMYose1dhgRisBmK9s\"]},\"contracts/modules/uniswap/v3/V3Path.sol\":{\"keccak256\":\"0xf6abbf4c7cd0975ddabb0ddb641ea9ae3b0cc1dd9a1cabf5e7cc271a974eabc2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1e0987fc9b81c65eada64cb65f981680c2054e489a6049d397b5ecbbf4c9a0a9\",\"dweb:/ipfs/QmW7mbbHsfc2GLy2GkCUv3VwXV93y6UFtKDD7E9QEtzFH7\"]},\"contracts/modules/uniswap/v3/V3SwapRouter.sol\":{\"keccak256\":\"0xbc0b220d89735e9a802fe47cd47cca3dd986f2e1301d5467acdfb2a7a24143f4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7c9ddfe0f15e2d2ab4b6c7eb238d8af28d4be297c0f49c48497ea6915a3c2e25\",\"dweb:/ipfs/QmYZcJPxWdxA31FgLexwBaLAfufxqVvA3bZCe82GkEVTYS\"]},\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x14cf8839107a3b30fbd02e92b1506d8ee25a002b6d1dd37ff2745b2adbaf4f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb1a740ae82ee2f704135927e817780971356b41288e6b044c43ac9e3cb8e97d\",\"dweb:/ipfs/Qmbi1ZZREFLnNyAfpvPpgRYYdxCTemqTr5krfX6ufVA7D2\"]},\"lib/permit2/src/libraries/SafeCast160.sol\":{\"keccak256\":\"0x8a34e2beac108d74f89510c949983212b5f09307a93ee9e17a9d50e93f6bc8e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://828697f9567ce617c5c1c8f76b6bcd250e93aea2c4f3ee188be6dff8443c19e7\",\"dweb:/ipfs/QmafxeSPhUc9gGtNDLAw26oZooC5XNLhDMxHxYhJxL5Nwi\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4\",\"dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\",\"urls\":[\"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf\",\"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]}},\"version\":1}",
					"userdoc": {
						"errors": {
							"UnsafeCast()": [
								{
									"notice": "Thrown when a valude greater than type(uint160).max is cast to uint160"
								}
							]
						},
						"kind": "user",
						"methods": {
							"execute(bytes,bytes[])": {
								"notice": "Executes encoded commands along with provided inputs."
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Called by the UniversalRouter to efficiently decode and execute a single command",
						"version": 1
					}
				}
			},
			"contracts/base/LockAndMsgSender.sol": {
				"LockAndMsgSender": {
					"abi": [
						{
							"inputs": [],
							"name": "ContractLocked",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234602657600080546001600160a01b0319166001179055603a9081602c8239f35b600080fdfe600080fdfea2646970667358221220f35823d188b73182f9bb84fd7fbb68b8efbc9d3431d45bc24f20e5403217179d64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x26 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x3A SWAP1 DUP2 PUSH1 0x2C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN PC 0x23 0xD1 DUP9 0xB7 BALANCE DUP3 0xF9 0xBB DUP5 REVERT PUSH32 0xBB68B8EFBC9D3431D45BC24F20E5403217179D64736F6C634300081100330000 ",
							"sourceMap": "126:951:2:-:0;;;;;;;275:15;231:10;;-1:-1:-1;;;;;;231:10:2;239:1;231:10;;;126:951;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220f35823d188b73182f9bb84fd7fbb68b8efbc9d3431d45bc24f20e5403217179d64736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN PC 0x23 0xD1 DUP9 0xB7 BALANCE DUP3 0xF9 0xBB DUP5 REVERT PUSH32 0xBB68B8EFBC9D3431D45BC24F20E5403217179D64736F6C634300081100330000 ",
							"sourceMap": "126:951:2:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ContractLocked\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/LockAndMsgSender.sol\":\"LockAndMsgSender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/base/LockAndMsgSender.sol\":{\"keccak256\":\"0x6f816683f08585270627953efeb3a30e59c1353b9012430975e992e7132a9446\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e3b9cbd8e0757a046722fdb22c59727b974410943b51027b070e79640628efe4\",\"dweb:/ipfs/QmXNTi5j5au1UQQzfWUqmejFPEsrxcmyS24dS8KJWzaJfX\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/base/RouterImmutables.sol": {
				"RouterImmutables": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "permit2",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "weth9",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "v2Factory",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "v3Factory",
											"type": "address"
										},
										{
											"internalType": "bytes32",
											"name": "pairInitCodeHash",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "poolInitCodeHash",
											"type": "bytes32"
										}
									],
									"internalType": "struct RouterParameters",
									"name": "params",
									"type": "tuple"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "InvalidRouterParameters",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"PERMIT2": {
								"details": "Permit2 address"
							},
							"UNISWAP_V2_FACTORY": {
								"details": "The address of UniswapV2Factory"
							},
							"UNISWAP_V2_PAIR_INIT_CODE_HASH": {
								"details": "The UniswapV2Pair initcodehash"
							},
							"UNISWAP_V3_FACTORY": {
								"details": "The address of UniswapV3Factory"
							},
							"UNISWAP_V3_POOL_INIT_CODE_HASH": {
								"details": "The UniswapV3Pool initcodehash"
							},
							"WETH9": {
								"details": "WETH9 address"
							}
						},
						"title": "Router Immutable Storage (ERC20-only)",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {
								"abi_decode_address_fromMemory": {
									"entryPoint": 443,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "610140346101b657601f61020a38819003918201601f19168301916001600160401b0391828411858510176101a0578160c092869260409687528339810103126101b65781519060c08201908111828210176101a0578252610060836101bb565b80825261006f602085016101bb565b9360208301928584526100838583016101bb565b9385820191858352610097606085016101bb565b97606082019589875260a06080870151966080850197885201519960a084019a8b5260018060a01b03988980931615938415610195575b50831561018a575b50821561017f575b5050610159578351158015610176575b61015957858151163b15801561016a575b6101595751851660a05251841660805251831660c0525160e052511661010090815291516101209081529051603a92909190836101d0843960805183505060a05183505060c05183505060e0518350505182505051815050f35b865163af68366360e01b8152600490fd5b50858251163b156100ff565b508751156100ee565b1615905086386100de565b8216159250386100d6565b8316159350386100ce565b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b03821682036101b65756fe600080fdfea2646970667358221220ab7c072b009c4de5c2aa748666f5b1323079ed59d212901012d59be39b01ae6464736f6c63430008110033",
							"opcodes": "PUSH2 0x140 CALLVALUE PUSH2 0x1B6 JUMPI PUSH1 0x1F PUSH2 0x20A CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 DUP5 GT DUP6 DUP6 LT OR PUSH2 0x1A0 JUMPI DUP2 PUSH1 0xC0 SWAP3 DUP7 SWAP3 PUSH1 0x40 SWAP7 DUP8 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x1B6 JUMPI DUP2 MLOAD SWAP1 PUSH1 0xC0 DUP3 ADD SWAP1 DUP2 GT DUP3 DUP3 LT OR PUSH2 0x1A0 JUMPI DUP3 MSTORE PUSH2 0x60 DUP4 PUSH2 0x1BB JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH2 0x6F PUSH1 0x20 DUP6 ADD PUSH2 0x1BB JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP4 ADD SWAP3 DUP6 DUP5 MSTORE PUSH2 0x83 DUP6 DUP4 ADD PUSH2 0x1BB JUMP JUMPDEST SWAP4 DUP6 DUP3 ADD SWAP2 DUP6 DUP4 MSTORE PUSH2 0x97 PUSH1 0x60 DUP6 ADD PUSH2 0x1BB JUMP JUMPDEST SWAP8 PUSH1 0x60 DUP3 ADD SWAP6 DUP10 DUP8 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP8 ADD MLOAD SWAP7 PUSH1 0x80 DUP6 ADD SWAP8 DUP9 MSTORE ADD MLOAD SWAP10 PUSH1 0xA0 DUP5 ADD SWAP11 DUP12 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 DUP1 SWAP4 AND ISZERO SWAP4 DUP5 ISZERO PUSH2 0x195 JUMPI JUMPDEST POP DUP4 ISZERO PUSH2 0x18A JUMPI JUMPDEST POP DUP3 ISZERO PUSH2 0x17F JUMPI JUMPDEST POP POP PUSH2 0x159 JUMPI DUP4 MLOAD ISZERO DUP1 ISZERO PUSH2 0x176 JUMPI JUMPDEST PUSH2 0x159 JUMPI DUP6 DUP2 MLOAD AND EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16A JUMPI JUMPDEST PUSH2 0x159 JUMPI MLOAD DUP6 AND PUSH1 0xA0 MSTORE MLOAD DUP5 AND PUSH1 0x80 MSTORE MLOAD DUP4 AND PUSH1 0xC0 MSTORE MLOAD PUSH1 0xE0 MSTORE MLOAD AND PUSH2 0x100 SWAP1 DUP2 MSTORE SWAP2 MLOAD PUSH2 0x120 SWAP1 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x3A SWAP3 SWAP1 SWAP2 SWAP1 DUP4 PUSH2 0x1D0 DUP5 CODECOPY PUSH1 0x80 MLOAD DUP4 POP POP PUSH1 0xA0 MLOAD DUP4 POP POP PUSH1 0xC0 MLOAD DUP4 POP POP PUSH1 0xE0 MLOAD DUP4 POP POP MLOAD DUP3 POP POP MLOAD DUP2 POP POP RETURN JUMPDEST DUP7 MLOAD PUSH4 0xAF683663 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP6 DUP3 MLOAD AND EXTCODESIZE ISZERO PUSH2 0xFF JUMP JUMPDEST POP DUP8 MLOAD ISZERO PUSH2 0xEE JUMP JUMPDEST AND ISZERO SWAP1 POP DUP7 CODESIZE PUSH2 0xDE JUMP JUMPDEST DUP3 AND ISZERO SWAP3 POP CODESIZE PUSH2 0xD6 JUMP JUMPDEST DUP4 AND ISZERO SWAP4 POP CODESIZE PUSH2 0xCE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1B6 JUMPI JUMP INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB PUSH29 0x72B009C4DE5C2AA748666F5B1323079ED59D212901012D59BE39B01AE PUSH5 0x64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "440:1555:3:-:0;;;;;;;;;;;;;-1:-1:-1;;440:1555:3;;;;-1:-1:-1;;;;;440:1555:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1181:28;:58;;;;;-1:-1:-1;1181:92:3;;;;;-1:-1:-1;1181:138:3;;;;;-1:-1:-1;1177:176:3;;;;440:1555;;1368:37;:78;;;;-1:-1:-1;1364:141:3;;440:1555;;;;1569:26;:31;:64;;;;-1:-1:-1;1565:102:3;;440:1555;;;;1678:44;440:1555;;;;1732:28;440:1555;;;;1770:37;440:1555;1817:56;;440:1555;;1883:37;;;;440:1555;;1930:56;;;;440:1555;;;;;;1930:56;440:1555;;;;;;;;;;;;;;;;;;;1817:56;440:1555;;;;;;;;;;;;;1565:102;440:1555;;-1:-1:-1;;;1642:25:3;;;;;1569:64;440:1555;;;;;1604:24;:29;1569:64;;1368:78;440:1555;;;1409:37;1368:78;;1181:138;440:1555;1289:30;;-1:-1:-1;1181:138:3;;;;:92;440:1555;;1243:30;;-1:-1:-1;1181:92:3;;;:58;440:1555;;1213:26;;-1:-1:-1;1181:58:3;;;440:1555;;;;-1:-1:-1;440:1555:3;;;;;-1:-1:-1;440:1555:3;;-1:-1:-1;440:1555:3;;;;;-1:-1:-1;;;;;440:1555:3;;;;;;:::o"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220ab7c072b009c4de5c2aa748666f5b1323079ed59d212901012d59be39b01ae6464736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB PUSH29 0x72B009C4DE5C2AA748666F5B1323079ED59D212901012D59BE39B01AE PUSH5 0x64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "440:1555:3:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"permit2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth9\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v3Factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pairInitCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolInitCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct RouterParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidRouterParameters\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"PERMIT2\":{\"details\":\"Permit2 address\"},\"UNISWAP_V2_FACTORY\":{\"details\":\"The address of UniswapV2Factory\"},\"UNISWAP_V2_PAIR_INIT_CODE_HASH\":{\"details\":\"The UniswapV2Pair initcodehash\"},\"UNISWAP_V3_FACTORY\":{\"details\":\"The address of UniswapV3Factory\"},\"UNISWAP_V3_POOL_INIT_CODE_HASH\":{\"details\":\"The UniswapV3Pool initcodehash\"},\"WETH9\":{\"details\":\"WETH9 address\"}},\"title\":\"Router Immutable Storage (ERC20-only)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/RouterImmutables.sol\":\"RouterImmutables\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/base/RouterImmutables.sol\":{\"keccak256\":\"0x4589c74a2dc26510fd08829600f05b5dfe66eee31e510d48d8de084ef91d1181\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c30c65e52c73ed8addbdddde3ce7a5949839ba9c2821b2db005e235334b388db\",\"dweb:/ipfs/QmXYn2yRHcooDao7pMKNoT6ChPg3XLADxtC9ojHZT96uqV\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x14cf8839107a3b30fbd02e92b1506d8ee25a002b6d1dd37ff2745b2adbaf4f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb1a740ae82ee2f704135927e817780971356b41288e6b044c43ac9e3cb8e97d\",\"dweb:/ipfs/Qmbi1ZZREFLnNyAfpvPpgRYYdxCTemqTr5krfX6ufVA7D2\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IUniversalRouter.sol": {
				"IUniversalRouter": {
					"abi": [
						{
							"inputs": [],
							"name": "ETHNotAccepted",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "commandIndex",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "message",
									"type": "bytes"
								}
							],
							"name": "ExecutionFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "LengthMismatch",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransactionDeadlinePassed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "commands",
									"type": "bytes"
								},
								{
									"internalType": "bytes[]",
									"name": "inputs",
									"type": "bytes[]"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "execute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"execute(bytes,bytes[],uint256)": {
								"params": {
									"commands": "A set of concatenated commands, each 1 byte in length",
									"deadline": "The deadline by which the transaction must be executed",
									"inputs": "An array of byte strings containing abi encoded inputs for each command"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ETHNotAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commandIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionDeadlinePassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"inputs\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute(bytes,bytes[],uint256)\":{\"params\":{\"commands\":\"A set of concatenated commands, each 1 byte in length\",\"deadline\":\"The deadline by which the transaction must be executed\",\"inputs\":\"An array of byte strings containing abi encoded inputs for each command\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ETHNotAccepted()\":[{\"notice\":\"Thrown when attempting to send ETH directly to the contract\"}],\"ExecutionFailed(uint256,bytes)\":[{\"notice\":\"Thrown when a required command has failed\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when attempting to execute commands and an incorrect number of inputs are provided\"}],\"TransactionDeadlinePassed()\":[{\"notice\":\"Thrown when executing commands with an expired deadline\"}]},\"kind\":\"user\",\"methods\":{\"execute(bytes,bytes[],uint256)\":{\"notice\":\"Executes encoded commands along with provided inputs. Reverts if deadline has expired.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IUniversalRouter.sol\":\"IUniversalRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IUniversalRouter.sol\":{\"keccak256\":\"0x4252c8bda3e2d57b1e7f8c4538f4595a954d8e36fe2dea160fdf6f9853c0798c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7c95edb7119e23c0ae86fca90a1847b606713da5d1159ed9a1bca24ee9b60f82\",\"dweb:/ipfs/QmaVxX4HDDwkbSoCdYMEt61FJ2fA4xjNko2e4ce5b8gHQm\"]}},\"version\":1}",
					"userdoc": {
						"errors": {
							"ETHNotAccepted()": [
								{
									"notice": "Thrown when attempting to send ETH directly to the contract"
								}
							],
							"ExecutionFailed(uint256,bytes)": [
								{
									"notice": "Thrown when a required command has failed"
								}
							],
							"LengthMismatch()": [
								{
									"notice": "Thrown when attempting to execute commands and an incorrect number of inputs are provided"
								}
							],
							"TransactionDeadlinePassed()": [
								{
									"notice": "Thrown when executing commands with an expired deadline"
								}
							]
						},
						"kind": "user",
						"methods": {
							"execute(bytes,bytes[],uint256)": {
								"notice": "Executes encoded commands along with provided inputs. Reverts if deadline has expired."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"IWETH9": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"title": "Interface for WETH9",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"Interface for WETH9\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit ether to get wrapped ether\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw wrapped ether to get ether\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/external/IWETH9.sol\":\"IWETH9\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"deposit()": {
								"notice": "Deposit ether to get wrapped ether"
							},
							"withdraw(uint256)": {
								"notice": "Withdraw wrapped ether to get ether"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/libraries/Commands.sol": {
				"Commands": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Commands",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220dc3c4a371aed4c04ba23df2ab777c062a94a7daacb7d3d7a7f44851c0f95524764736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC EXTCODECOPY 0x4A CALLDATACOPY BYTE 0xED 0x4C DIV 0xBA 0x23 0xDF 0x2A 0xB7 PUSH24 0xC062A94A7DAACB7D3D7A7F44851C0F95524764736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "141:2490:6:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220dc3c4a371aed4c04ba23df2ab777c062a94a7daacb7d3d7a7f44851c0f95524764736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC EXTCODECOPY 0x4A CALLDATACOPY BYTE 0xED 0x4C DIV 0xBA 0x23 0xDF 0x2A 0xB7 PUSH24 0xC062A94A7DAACB7D3D7A7F44851C0F95524764736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "141:2490:6:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Commands\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Command Flags used to decode commands\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Commands.sol\":\"Commands\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/libraries/Commands.sol\":{\"keccak256\":\"0x598de260a2a139f3b398a5d58b4a7fdb9e09a5812817efa2611cc872c4f90583\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c573d5b791dd3e7afd13a07274c882681773ac9fdc9c4f1181e050edf926457c\",\"dweb:/ipfs/Qma1Sy54fU6aiGmzn8ECMGYiYsc7NEcbWAy5Lbs3meTVgK\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Command Flags used to decode commands",
						"version": 1
					}
				}
			},
			"contracts/libraries/Constants.sol": {
				"Constants": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"ADDRESS_THIS": {
								"details": "Used as a flag for identifying address(this) should be used, saves gas by sending more 0 bytes"
							},
							"ADDR_SIZE": {
								"details": "The length of the bytes encoded address"
							},
							"ALREADY_PAID": {
								"details": "Used for identifying cases when a v2 pair has already received input tokens"
							},
							"CONTRACT_BALANCE": {
								"details": "Used for identifying cases when this contract's balance of a token is to be used as an input This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit."
							},
							"ETH": {
								"details": "Used as a flag for identifying the transfer of ETH instead of a token"
							},
							"MSG_SENDER": {
								"details": "Used as a flag for identifying that msg.sender should be used, saves gas by sending more 0 bytes"
							},
							"MULTIPLE_V3_POOLS_MIN_LENGTH": {
								"details": "The minimum length of an encoding that contains 2 or more pools"
							},
							"NEXT_V3_POOL_OFFSET": {
								"details": "The offset of a single token address (20) and pool fee (3)"
							},
							"V3_FEE_SIZE": {
								"details": "The length of the bytes encoded fee"
							},
							"V3_POP_OFFSET": {
								"details": "The offset of an encoded pool key Token (20) + Fee (3) + Token (20) = 43"
							}
						},
						"title": "Constant state",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122061794b20479e4d2c72a528799f45ca82a7f7b1cbd3426d98eefc6134a58b566764736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x794B KECCAK256 SELFBALANCE SWAP15 0x4D 0x2C PUSH19 0xA528799F45CA82A7F7B1CBD3426D98EEFC6134 0xA5 DUP12 JUMP PUSH8 0x64736F6C63430008 GT STOP CALLER ",
							"sourceMap": "212:1634:7:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea264697066735822122061794b20479e4d2c72a528799f45ca82a7f7b1cbd3426d98eefc6134a58b566764736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x794B KECCAK256 SELFBALANCE SWAP15 0x4D 0x2C PUSH19 0xA528799F45CA82A7F7B1CBD3426D98EEFC6134 0xA5 DUP12 JUMP PUSH8 0x64736F6C63430008 GT STOP CALLER ",
							"sourceMap": "212:1634:7:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADDRESS_THIS\":{\"details\":\"Used as a flag for identifying address(this) should be used, saves gas by sending more 0 bytes\"},\"ADDR_SIZE\":{\"details\":\"The length of the bytes encoded address\"},\"ALREADY_PAID\":{\"details\":\"Used for identifying cases when a v2 pair has already received input tokens\"},\"CONTRACT_BALANCE\":{\"details\":\"Used for identifying cases when this contract's balance of a token is to be used as an input This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit.\"},\"ETH\":{\"details\":\"Used as a flag for identifying the transfer of ETH instead of a token\"},\"MSG_SENDER\":{\"details\":\"Used as a flag for identifying that msg.sender should be used, saves gas by sending more 0 bytes\"},\"MULTIPLE_V3_POOLS_MIN_LENGTH\":{\"details\":\"The minimum length of an encoding that contains 2 or more pools\"},\"NEXT_V3_POOL_OFFSET\":{\"details\":\"The offset of a single token address (20) and pool fee (3)\"},\"V3_FEE_SIZE\":{\"details\":\"The length of the bytes encoded fee\"},\"V3_POP_OFFSET\":{\"details\":\"The offset of an encoded pool key Token (20) + Fee (3) + Token (20) = 43\"}},\"title\":\"Constant state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Constant state used by the Universal Router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Constants.sol\":\"Constants\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Constant state used by the Universal Router",
						"version": 1
					}
				}
			},
			"contracts/modules/Payments.sol": {
				"Payments": {
					"abi": [
						{
							"inputs": [],
							"name": "InsufficientETH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidBips",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidRouterParameters",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Payments contract",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBips\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRouterParameters\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Payments contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Performs various operations around the payment of ETH and tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Payments.sol\":\"Payments\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/base/RouterImmutables.sol\":{\"keccak256\":\"0x4589c74a2dc26510fd08829600f05b5dfe66eee31e510d48d8de084ef91d1181\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c30c65e52c73ed8addbdddde3ce7a5949839ba9c2821b2db005e235334b388db\",\"dweb:/ipfs/QmXYn2yRHcooDao7pMKNoT6ChPg3XLADxtC9ojHZT96uqV\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"contracts/modules/Payments.sol\":{\"keccak256\":\"0x285335ca1029455364741cd08ac3bc6d9565a0996ea4a167dfa6e49f7c7b05fa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f9b0f44bc95178800435a7ba55b739216dce8b422ea0c2fb5f1ae0f874c31fcb\",\"dweb:/ipfs/QmYVYbeNDGh9ieC6wSYhHiiWvcwnzzB3ecq2ZYAjr9wbMh\"]},\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x14cf8839107a3b30fbd02e92b1506d8ee25a002b6d1dd37ff2745b2adbaf4f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb1a740ae82ee2f704135927e817780971356b41288e6b044c43ac9e3cb8e97d\",\"dweb:/ipfs/Qmbi1ZZREFLnNyAfpvPpgRYYdxCTemqTr5krfX6ufVA7D2\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4\",\"dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Performs various operations around the payment of ETH and tokens",
						"version": 1
					}
				}
			},
			"contracts/modules/Permit2Payments.sol": {
				"Permit2Payments": {
					"abi": [
						{
							"inputs": [],
							"name": "FromAddressIsNotOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientETH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidBips",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidRouterParameters",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Payments through Permit2",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FromAddressIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBips\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRouterParameters\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Payments through Permit2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Performs interactions with Permit2 to transfer tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Permit2Payments.sol\":\"Permit2Payments\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/base/RouterImmutables.sol\":{\"keccak256\":\"0x4589c74a2dc26510fd08829600f05b5dfe66eee31e510d48d8de084ef91d1181\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c30c65e52c73ed8addbdddde3ce7a5949839ba9c2821b2db005e235334b388db\",\"dweb:/ipfs/QmXYn2yRHcooDao7pMKNoT6ChPg3XLADxtC9ojHZT96uqV\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"contracts/modules/Payments.sol\":{\"keccak256\":\"0x285335ca1029455364741cd08ac3bc6d9565a0996ea4a167dfa6e49f7c7b05fa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f9b0f44bc95178800435a7ba55b739216dce8b422ea0c2fb5f1ae0f874c31fcb\",\"dweb:/ipfs/QmYVYbeNDGh9ieC6wSYhHiiWvcwnzzB3ecq2ZYAjr9wbMh\"]},\"contracts/modules/Permit2Payments.sol\":{\"keccak256\":\"0x92e2adaa06456f7753608dd60435e13183e927d7a5aa47ed00bb2cf974e88697\",\"urls\":[\"bzz-raw://11cd58adc2e0f0a52c7bc02bc541ca6ef0b521f169a086d6638a1d2c9fa364bd\",\"dweb:/ipfs/QmYXQc8HeE6gYVXVp8gmscy5ZS8SbTq3HfjeGRmsvpSW1W\"]},\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x14cf8839107a3b30fbd02e92b1506d8ee25a002b6d1dd37ff2745b2adbaf4f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb1a740ae82ee2f704135927e817780971356b41288e6b044c43ac9e3cb8e97d\",\"dweb:/ipfs/Qmbi1ZZREFLnNyAfpvPpgRYYdxCTemqTr5krfX6ufVA7D2\"]},\"lib/permit2/src/libraries/SafeCast160.sol\":{\"keccak256\":\"0x8a34e2beac108d74f89510c949983212b5f09307a93ee9e17a9d50e93f6bc8e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://828697f9567ce617c5c1c8f76b6bcd250e93aea2c4f3ee188be6dff8443c19e7\",\"dweb:/ipfs/QmafxeSPhUc9gGtNDLAw26oZooC5XNLhDMxHxYhJxL5Nwi\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4\",\"dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Performs interactions with Permit2 to transfer tokens",
						"version": 1
					}
				}
			},
			"contracts/modules/uniswap/v2/UniswapV2Library.sol": {
				"UniswapV2Library": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidPath",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidReserves",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Uniswap v2 Helper Library",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220262dfca6ec15f1c5d28f05b63cafddffc59bc9592eeb4e7d7f17eee60f1fbc6664736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 0x2D 0xFC 0xA6 0xEC ISZERO CALL 0xC5 0xD2 DUP16 SDIV 0xB6 EXTCODECOPY 0xAF 0xDD SELFDESTRUCT 0xC5 SWAP12 0xC9 MSIZE 0x2E 0xEB 0x4E PUSH30 0x7F17EEE60F1FBC6664736F6C634300081100330000000000000000000000 ",
							"sourceMap": "257:6257:10:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220262dfca6ec15f1c5d28f05b63cafddffc59bc9592eeb4e7d7f17eee60f1fbc6664736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 0x2D 0xFC 0xA6 0xEC ISZERO CALL 0xC5 0xD2 DUP16 SDIV 0xB6 EXTCODECOPY 0xAF 0xDD SELFDESTRUCT 0xC5 SWAP12 0xC9 MSIZE 0x2E 0xEB 0x4E PUSH30 0x7F17EEE60F1FBC6664736F6C634300081100330000000000000000000000 ",
							"sourceMap": "257:6257:10:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReserves\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Uniswap v2 Helper Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Calculates the recipient address for a command\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/uniswap/v2/UniswapV2Library.sol\":\"UniswapV2Library\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/modules/uniswap/v2/UniswapV2Library.sol\":{\"keccak256\":\"0x58474fb5c405c6c1451ed34255a6b2e4c3f1fe7c9aa3fec6acf5c2ca31f45e56\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://dea1775dbf82e16d79ef8dd4b2c738435d9cd6460d1c77bf4e4ffe375cc28324\",\"dweb:/ipfs/Qmeg9WRi5CnCBNYvmeait5ga7ykKQGtXxUCzG2dp3YTN6G\"]},\"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\",\"urls\":[\"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf\",\"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Calculates the recipient address for a command",
						"version": 1
					}
				}
			},
			"contracts/modules/uniswap/v2/V2SwapRouter.sol": {
				"V2SwapRouter": {
					"abi": [
						{
							"inputs": [],
							"name": "FromAddressIsNotOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientETH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidBips",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidRouterParameters",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2InvalidPath",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2TooLittleReceived",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V2TooMuchRequested",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Router for Uniswap v2 Trades",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FromAddressIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBips\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRouterParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V2TooMuchRequested\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Router for Uniswap v2 Trades\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/uniswap/v2/V2SwapRouter.sol\":\"V2SwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/base/RouterImmutables.sol\":{\"keccak256\":\"0x4589c74a2dc26510fd08829600f05b5dfe66eee31e510d48d8de084ef91d1181\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c30c65e52c73ed8addbdddde3ce7a5949839ba9c2821b2db005e235334b388db\",\"dweb:/ipfs/QmXYn2yRHcooDao7pMKNoT6ChPg3XLADxtC9ojHZT96uqV\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"contracts/modules/Payments.sol\":{\"keccak256\":\"0x285335ca1029455364741cd08ac3bc6d9565a0996ea4a167dfa6e49f7c7b05fa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f9b0f44bc95178800435a7ba55b739216dce8b422ea0c2fb5f1ae0f874c31fcb\",\"dweb:/ipfs/QmYVYbeNDGh9ieC6wSYhHiiWvcwnzzB3ecq2ZYAjr9wbMh\"]},\"contracts/modules/Permit2Payments.sol\":{\"keccak256\":\"0x92e2adaa06456f7753608dd60435e13183e927d7a5aa47ed00bb2cf974e88697\",\"urls\":[\"bzz-raw://11cd58adc2e0f0a52c7bc02bc541ca6ef0b521f169a086d6638a1d2c9fa364bd\",\"dweb:/ipfs/QmYXQc8HeE6gYVXVp8gmscy5ZS8SbTq3HfjeGRmsvpSW1W\"]},\"contracts/modules/uniswap/v2/UniswapV2Library.sol\":{\"keccak256\":\"0x58474fb5c405c6c1451ed34255a6b2e4c3f1fe7c9aa3fec6acf5c2ca31f45e56\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://dea1775dbf82e16d79ef8dd4b2c738435d9cd6460d1c77bf4e4ffe375cc28324\",\"dweb:/ipfs/Qmeg9WRi5CnCBNYvmeait5ga7ykKQGtXxUCzG2dp3YTN6G\"]},\"contracts/modules/uniswap/v2/V2SwapRouter.sol\":{\"keccak256\":\"0xfc4cc4074f432dfefb2c5090d5b3d8aa59a5bb21f9348a3e2154ac106c34f472\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ff06a43786b0a6b49b6194a6535309de36f4b7f4008a34b108a11552308f46cc\",\"dweb:/ipfs/QmcJuLUAiKwvea6UJQmpWS9pZCmDUN8AWBaPrLFN99mXKX\"]},\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x14cf8839107a3b30fbd02e92b1506d8ee25a002b6d1dd37ff2745b2adbaf4f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb1a740ae82ee2f704135927e817780971356b41288e6b044c43ac9e3cb8e97d\",\"dweb:/ipfs/Qmbi1ZZREFLnNyAfpvPpgRYYdxCTemqTr5krfX6ufVA7D2\"]},\"lib/permit2/src/libraries/SafeCast160.sol\":{\"keccak256\":\"0x8a34e2beac108d74f89510c949983212b5f09307a93ee9e17a9d50e93f6bc8e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://828697f9567ce617c5c1c8f76b6bcd250e93aea2c4f3ee188be6dff8443c19e7\",\"dweb:/ipfs/QmafxeSPhUc9gGtNDLAw26oZooC5XNLhDMxHxYhJxL5Nwi\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4\",\"dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\",\"urls\":[\"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf\",\"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/modules/uniswap/v3/BytesLib.sol": {
				"BytesLib": {
					"abi": [
						{
							"inputs": [],
							"name": "SliceOutOfBounds",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220885f320503bfd8cd2109419559de69bbea66daefc3754675aee28b61a5a228e264736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 0x5F ORIGIN SDIV SUB 0xBF 0xD8 0xCD 0x21 MULMOD COINBASE SWAP6 MSIZE 0xDE PUSH10 0xBBEA66DAEFC3754675AE 0xE2 DUP12 PUSH2 0xA5A2 0x28 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "174:3939:12:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220885f320503bfd8cd2109419559de69bbea66daefc3754675aee28b61a5a228e264736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 0x5F ORIGIN SDIV SUB 0xBF 0xD8 0xCD 0x21 MULMOD COINBASE SWAP6 MSIZE 0xDE PUSH10 0xBBEA66DAEFC3754675AE 0xE2 DUP12 PUSH2 0xA5A2 0x28 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "174:3939:12:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/uniswap/v3/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"contracts/modules/uniswap/v3/BytesLib.sol\":{\"keccak256\":\"0x279376a70c42f5720d23ceb28339d7f10dcce745a73173b9762a2803223ff448\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://80e2e21c8a428cee7b818a22343a99a03b5fcc3862ee5b5c95c428dab46bb27d\",\"dweb:/ipfs/QmZrwRFg2ZJ6dqejyqYJyMtFS1cYuMYose1dhgRisBmK9s\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/modules/uniswap/v3/V3Path.sol": {
				"V3Path": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Functions for manipulating path data for multihop swaps",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220e33c31adb057a6e2b958fc6aa129b39d0f53dd676508ef40167757b9acf3a8cf64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 EXTCODECOPY BALANCE 0xAD 0xB0 JUMPI 0xA6 0xE2 0xB9 PC 0xFC PUSH11 0xA129B39D0F53DD676508EF BLOCKHASH AND PUSH24 0x57B9ACF3A8CF64736F6C6343000811003300000000000000 ",
							"sourceMap": "240:1504:13:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220e33c31adb057a6e2b958fc6aa129b39d0f53dd676508ef40167757b9acf3a8cf64736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 EXTCODECOPY BALANCE 0xAD 0xB0 JUMPI 0xA6 0xE2 0xB9 PC 0xFC PUSH11 0xA129B39D0F53DD676508EF BLOCKHASH AND PUSH24 0x57B9ACF3A8CF64736F6C6343000811003300000000000000 ",
							"sourceMap": "240:1504:13:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Functions for manipulating path data for multihop swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/uniswap/v3/V3Path.sol\":\"V3Path\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"contracts/modules/uniswap/v3/BytesLib.sol\":{\"keccak256\":\"0x279376a70c42f5720d23ceb28339d7f10dcce745a73173b9762a2803223ff448\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://80e2e21c8a428cee7b818a22343a99a03b5fcc3862ee5b5c95c428dab46bb27d\",\"dweb:/ipfs/QmZrwRFg2ZJ6dqejyqYJyMtFS1cYuMYose1dhgRisBmK9s\"]},\"contracts/modules/uniswap/v3/V3Path.sol\":{\"keccak256\":\"0xf6abbf4c7cd0975ddabb0ddb641ea9ae3b0cc1dd9a1cabf5e7cc271a974eabc2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1e0987fc9b81c65eada64cb65f981680c2054e489a6049d397b5ecbbf4c9a0a9\",\"dweb:/ipfs/QmW7mbbHsfc2GLy2GkCUv3VwXV93y6UFtKDD7E9QEtzFH7\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/modules/uniswap/v3/V3SwapRouter.sol": {
				"V3SwapRouter": {
					"abi": [
						{
							"inputs": [],
							"name": "FromAddressIsNotOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientETH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidBips",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidRouterParameters",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SliceOutOfBounds",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UnsafeCast",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidAmountOut",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3InvalidSwap",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3TooLittleReceived",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "V3TooMuchRequested",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"stateVariables": {
							"DEFAULT_MAX_AMOUNT_IN": {
								"details": "Used as the placeholder value for maxAmountIn, because the computed amount in for an exact output swap can never actually be this value"
							},
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"maxAmountInCached": {
								"details": "Transient storage variable used for checking slippage"
							}
						},
						"title": "Router for Uniswap v3 Trades",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FromAddressIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBips\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRouterParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeCast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3InvalidSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V3TooMuchRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"stateVariables\":{\"DEFAULT_MAX_AMOUNT_IN\":{\"details\":\"Used as the placeholder value for maxAmountIn, because the computed amount in for an exact output swap can never actually be this value\"},\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"maxAmountInCached\":{\"details\":\"Transient storage variable used for checking slippage\"}},\"title\":\"Router for Uniswap v3 Trades\",\"version\":1},\"userdoc\":{\"errors\":{\"UnsafeCast()\":[{\"notice\":\"Thrown when a valude greater than type(uint160).max is cast to uint160\"}]},\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/uniswap/v3/V3SwapRouter.sol\":\"V3SwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"contracts/base/RouterImmutables.sol\":{\"keccak256\":\"0x4589c74a2dc26510fd08829600f05b5dfe66eee31e510d48d8de084ef91d1181\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c30c65e52c73ed8addbdddde3ce7a5949839ba9c2821b2db005e235334b388db\",\"dweb:/ipfs/QmXYn2yRHcooDao7pMKNoT6ChPg3XLADxtC9ojHZT96uqV\"]},\"contracts/interfaces/external/IWETH9.sol\":{\"keccak256\":\"0xb059e143d7d3864bfc53708d54bb2a35c9115d807de3ed75a6a033be24b33b6c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a5b7afc743e6fecbf23563b43482218a6bdd58e3cdd1ef3e36a9d07fd4ff4c26\",\"dweb:/ipfs/QmTN8CozJtaS8GAgDUMmWnnfc6Er9HRU9X8RSQJx5oZmJT\"]},\"contracts/libraries/Constants.sol\":{\"keccak256\":\"0x08ce0ce1d2d1491ae4350724ef0448a601db8a729c79748b00014500608bd897\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b5db0b643832df35eef6ee56f3be72bd36bf29c8ced3603ea3e07d8939b4b4e0\",\"dweb:/ipfs/QmdUkmDoQiEzt7pj29JpfT7dQJDWzBCn6bCc6ajLi46EFY\"]},\"contracts/modules/Payments.sol\":{\"keccak256\":\"0x285335ca1029455364741cd08ac3bc6d9565a0996ea4a167dfa6e49f7c7b05fa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f9b0f44bc95178800435a7ba55b739216dce8b422ea0c2fb5f1ae0f874c31fcb\",\"dweb:/ipfs/QmYVYbeNDGh9ieC6wSYhHiiWvcwnzzB3ecq2ZYAjr9wbMh\"]},\"contracts/modules/Permit2Payments.sol\":{\"keccak256\":\"0x92e2adaa06456f7753608dd60435e13183e927d7a5aa47ed00bb2cf974e88697\",\"urls\":[\"bzz-raw://11cd58adc2e0f0a52c7bc02bc541ca6ef0b521f169a086d6638a1d2c9fa364bd\",\"dweb:/ipfs/QmYXQc8HeE6gYVXVp8gmscy5ZS8SbTq3HfjeGRmsvpSW1W\"]},\"contracts/modules/uniswap/v3/BytesLib.sol\":{\"keccak256\":\"0x279376a70c42f5720d23ceb28339d7f10dcce745a73173b9762a2803223ff448\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://80e2e21c8a428cee7b818a22343a99a03b5fcc3862ee5b5c95c428dab46bb27d\",\"dweb:/ipfs/QmZrwRFg2ZJ6dqejyqYJyMtFS1cYuMYose1dhgRisBmK9s\"]},\"contracts/modules/uniswap/v3/V3Path.sol\":{\"keccak256\":\"0xf6abbf4c7cd0975ddabb0ddb641ea9ae3b0cc1dd9a1cabf5e7cc271a974eabc2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1e0987fc9b81c65eada64cb65f981680c2054e489a6049d397b5ecbbf4c9a0a9\",\"dweb:/ipfs/QmW7mbbHsfc2GLy2GkCUv3VwXV93y6UFtKDD7E9QEtzFH7\"]},\"contracts/modules/uniswap/v3/V3SwapRouter.sol\":{\"keccak256\":\"0xbc0b220d89735e9a802fe47cd47cca3dd986f2e1301d5467acdfb2a7a24143f4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7c9ddfe0f15e2d2ab4b6c7eb238d8af28d4be297c0f49c48497ea6915a3c2e25\",\"dweb:/ipfs/QmYZcJPxWdxA31FgLexwBaLAfufxqVvA3bZCe82GkEVTYS\"]},\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x14cf8839107a3b30fbd02e92b1506d8ee25a002b6d1dd37ff2745b2adbaf4f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb1a740ae82ee2f704135927e817780971356b41288e6b044c43ac9e3cb8e97d\",\"dweb:/ipfs/Qmbi1ZZREFLnNyAfpvPpgRYYdxCTemqTr5krfX6ufVA7D2\"]},\"lib/permit2/src/libraries/SafeCast160.sol\":{\"keccak256\":\"0x8a34e2beac108d74f89510c949983212b5f09307a93ee9e17a9d50e93f6bc8e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://828697f9567ce617c5c1c8f76b6bcd250e93aea2c4f3ee188be6dff8443c19e7\",\"dweb:/ipfs/QmafxeSPhUc9gGtNDLAw26oZooC5XNLhDMxHxYhJxL5Nwi\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4\",\"dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]}},\"version\":1}",
					"userdoc": {
						"errors": {
							"UnsafeCast()": [
								{
									"notice": "Thrown when a valude greater than type(uint160).max is cast to uint160"
								}
							]
						},
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"version": 1
					}
				}
			},
			"lib/permit2/src/interfaces/IAllowanceTransfer.sol": {
				"IAllowanceTransfer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "AllowanceExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExcessiveInvalidation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "InsufficientAllowance",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "Lockdown",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "oldNonce",
									"type": "uint48"
								}
							],
							"name": "NonceInvalidation",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"name": "Permit",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "",
									"type": "uint48"
								},
								{
									"internalType": "uint48",
									"name": "",
									"type": "uint48"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								}
							],
							"name": "invalidateNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
									"name": "approvals",
									"type": "tuple[]"
								}
							],
							"name": "lockdown",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails[]",
											"name": "details",
											"type": "tuple[]"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitBatch",
									"name": "permitBatch",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails",
											"name": "details",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitSingle",
									"name": "permitSingle",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint160",
											"name": "amount",
											"type": "uint160"
										},
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Requires user's token approval on the Permit2 contract",
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"params": {
										"deadline": "The timestamp at which the allowed amount is no longer valid"
									}
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"params": {
										"amount": "The maximum amount allowed"
									}
								}
							]
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address,address)": {
								"details": "The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
							},
							"approve(address,address,uint160,uint48)": {
								"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
								"params": {
									"amount": "The approved amount of the token",
									"expiration": "The timestamp at which the approval is no longer valid",
									"spender": "The spender address to approve",
									"token": "The token to approve"
								}
							},
							"invalidateNonces(address,address,uint48)": {
								"details": "Can't invalidate more than 2**16 nonces per transaction.",
								"params": {
									"newNonce": "The new nonce to set. Invalidates all nonces less than it.",
									"spender": "The spender to invalidate nonces for",
									"token": "The token to invalidate nonces for"
								}
							},
							"lockdown((address,address)[])": {
								"params": {
									"approvals": "Array of approvals to revoke."
								}
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitSingle": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitBatch": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"transferFrom((address,address,uint160,address)[])": {
								"details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
								}
							},
							"transferFrom(address,address,uint160,address)": {
								"details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"amount": "The amount of the token to transfer",
									"from": "The address to transfer from",
									"to": "The address of the recipient",
									"token": "The token address to transfer"
								}
							}
						},
						"title": "AllowanceTransfer",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"AllowanceExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveInvalidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Lockdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"oldNonce\",\"type\":\"uint48\"}],\"name\":\"NonceInvalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"name\":\"Permit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"}],\"name\":\"invalidateNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.TokenSpenderPair[]\",\"name\":\"approvals\",\"type\":\"tuple[]\"}],\"name\":\"lockdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitBatch\",\"name\":\"permitBatch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.AllowanceTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Requires user's token approval on the Permit2 contract\",\"errors\":{\"AllowanceExpired(uint256)\":[{\"params\":{\"deadline\":\"The timestamp at which the allowed amount is no longer valid\"}}],\"InsufficientAllowance(uint256)\":[{\"params\":{\"amount\":\"The maximum amount allowed\"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"details\":\"The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\"},\"approve(address,address,uint160,uint48)\":{\"details\":\"The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval\",\"params\":{\"amount\":\"The approved amount of the token\",\"expiration\":\"The timestamp at which the approval is no longer valid\",\"spender\":\"The spender address to approve\",\"token\":\"The token to approve\"}},\"invalidateNonces(address,address,uint48)\":{\"details\":\"Can't invalidate more than 2**16 nonces per transaction.\",\"params\":{\"newNonce\":\"The new nonce to set. Invalidates all nonces less than it.\",\"spender\":\"The spender to invalidate nonces for\",\"token\":\"The token to invalidate nonces for\"}},\"lockdown((address,address)[])\":{\"params\":{\"approvals\":\"Array of approvals to revoke.\"}},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitSingle\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitBatch\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"transferFrom((address,address,uint160,address)[])\":{\"details\":\"Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"transferDetails\":\"Array of owners, recipients, amounts, and tokens for the transfers\"}},\"transferFrom(address,address,uint160,address)\":{\"details\":\"Requires the from address to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"amount\":\"The amount of the token to transfer\",\"from\":\"The address to transfer from\",\"to\":\"The address of the recipient\",\"token\":\"The token address to transfer\"}}},\"title\":\"AllowanceTransfer\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceExpired(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has expired.\"}],\"ExcessiveInvalidation()\":[{\"notice\":\"Thrown when too many nonces are invalidated.\"}],\"InsufficientAllowance(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has been depleted.\"}]},\"events\":{\"Approval(address,address,address,uint160,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions on a token for the spender.\"},\"Lockdown(address,address,address)\":{\"notice\":\"Emits an event when the owner sets the allowance back to 0 with the lockdown function.\"},\"NonceInvalidation(address,address,address,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully invalidates an ordered nonce.\"},\"Permit(address,address,address,uint160,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\"},\"approve(address,address,uint160,uint48)\":{\"notice\":\"Approves the spender to use up to amount of the specified token up until the expiration\"},\"invalidateNonces(address,address,uint48)\":{\"notice\":\"Invalidate nonces for a given (token, spender) pair\"},\"lockdown((address,address)[])\":{\"notice\":\"Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity by batch revoking approvals\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"notice\":\"Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\"},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"notice\":\"Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\"},\"transferFrom((address,address,uint160,address)[])\":{\"notice\":\"Transfer approved tokens in a batch\"},\"transferFrom(address,address,uint160,address)\":{\"notice\":\"Transfer approved tokens from one address to another\"}},\"notice\":\"Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":\"IAllowanceTransfer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"lib/permit2/src/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x14cf8839107a3b30fbd02e92b1506d8ee25a002b6d1dd37ff2745b2adbaf4f2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb1a740ae82ee2f704135927e817780971356b41288e6b044c43ac9e3cb8e97d\",\"dweb:/ipfs/Qmbi1ZZREFLnNyAfpvPpgRYYdxCTemqTr5krfX6ufVA7D2\"]}},\"version\":1}",
					"userdoc": {
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has expired."
								}
							],
							"ExcessiveInvalidation()": [
								{
									"notice": "Thrown when too many nonces are invalidated."
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has been depleted."
								}
							]
						},
						"events": {
							"Approval(address,address,address,uint160,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
							},
							"Lockdown(address,address,address)": {
								"notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
							},
							"NonceInvalidation(address,address,address,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully invalidates an ordered nonce."
							},
							"Permit(address,address,address,uint160,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
							}
						},
						"kind": "user",
						"methods": {
							"allowance(address,address,address)": {
								"notice": "A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]"
							},
							"approve(address,address,uint160,uint48)": {
								"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
							},
							"invalidateNonces(address,address,uint48)": {
								"notice": "Invalidate nonces for a given (token, spender) pair"
							},
							"lockdown((address,address)[])": {
								"notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
							},
							"transferFrom((address,address,uint160,address)[])": {
								"notice": "Transfer approved tokens in a batch"
							},
							"transferFrom(address,address,uint160,address)": {
								"notice": "Transfer approved tokens from one address to another"
							}
						},
						"notice": "Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts",
						"version": 1
					}
				}
			},
			"lib/permit2/src/libraries/SafeCast160.sol": {
				"SafeCast160": {
					"abi": [
						{
							"inputs": [],
							"name": "UnsafeCast",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220cb3ae14e5e7ad2fe7a9480314f9a3a211c76ed50f875de25aefb94db4dfc84b764736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB GASPRICE 0xE1 0x4E 0x5E PUSH27 0xD2FE7A9480314F9A3A211C76ED50F875DE25AEFB94DB4DFC84B764 PUSH20 0x6F6C634300081100330000000000000000000000 ",
							"sourceMap": "58:396:16:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220cb3ae14e5e7ad2fe7a9480314f9a3a211c76ed50f875de25aefb94db4dfc84b764736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB GASPRICE 0xE1 0x4E 0x5E PUSH27 0xD2FE7A9480314F9A3A211C76ED50F875DE25AEFB94DB4DFC84B764 PUSH20 0x6F6C634300081100330000000000000000000000 ",
							"sourceMap": "58:396:16:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"UnsafeCast\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"UnsafeCast()\":[{\"notice\":\"Thrown when a valude greater than type(uint160).max is cast to uint160\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/permit2/src/libraries/SafeCast160.sol\":\"SafeCast160\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"lib/permit2/src/libraries/SafeCast160.sol\":{\"keccak256\":\"0x8a34e2beac108d74f89510c949983212b5f09307a93ee9e17a9d50e93f6bc8e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://828697f9567ce617c5c1c8f76b6bcd250e93aea2c4f3ee188be6dff8443c19e7\",\"dweb:/ipfs/QmafxeSPhUc9gGtNDLAw26oZooC5XNLhDMxHxYhJxL5Nwi\"]}},\"version\":1}",
					"userdoc": {
						"errors": {
							"UnsafeCast()": [
								{
									"notice": "Thrown when a valude greater than type(uint160).max is cast to uint160"
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/solmate/src/tokens/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)",
						"details": "Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\",\"details\":\"Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Modern and gas efficient ERC20 + EIP-2612 implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solmate/src/tokens/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Modern and gas efficient ERC20 + EIP-2612 implementation.",
						"version": 1
					}
				}
			},
			"lib/solmate/src/utils/SafeTransferLib.sol": {
				"SafeTransferLib": {
					"abi": [],
					"devdoc": {
						"author": "Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)",
						"details": "Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220e15eccf1bc4193b5f1737e89e7c9413c55802195c0d4e882558c760fa74b9fe564736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0x5E 0xCC CALL 0xBC COINBASE SWAP4 0xB5 CALL PUSH20 0x7E89E7C9413C55802195C0D4E882558C760FA74B SWAP16 0xE5 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "586:5368:18:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea2646970667358221220e15eccf1bc4193b5f1737e89e7c9413c55802195c0d4e882558c760fa74b9fe564736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0x5E 0xCC CALL 0xBC COINBASE SWAP4 0xB5 CALL PUSH20 0x7E89E7C9413C55802195C0D4E882558C760FA74B SWAP16 0xE5 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "586:5368:18:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\",\"details\":\"Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Safe ETH and ERC20 transfer library that gracefully handles missing return values.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solmate/src/utils/SafeTransferLib.sol\":\"SafeTransferLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35\",\"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xbadf3d708cf532b12f75f78a1d423135954b63774a6d4ba15914a551d348db8a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://88ac8256bd520d1b8e6f9c4ac9e8777bffdc4a6c8afb1a848f596665779a55b4\",\"dweb:/ipfs/QmXx7X1dxe6f5VM91vgQ5BA4r2eF97GWDcQDrgHytcvfjU\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Safe ETH and ERC20 transfer library that gracefully handles missing return values.",
						"version": 1
					}
				}
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
				"IUniswapV2Pair": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0In",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1In",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0Out",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1Out",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint112",
									"name": "reserve0",
									"type": "uint112"
								},
								{
									"indexed": false,
									"internalType": "uint112",
									"name": "reserve1",
									"type": "uint112"
								}
							],
							"name": "Sync",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "MINIMUM_LIQUIDITY",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getReserves",
							"outputs": [
								{
									"internalType": "uint112",
									"name": "reserve0",
									"type": "uint112"
								},
								{
									"internalType": "uint112",
									"name": "reserve1",
									"type": "uint112"
								},
								{
									"internalType": "uint32",
									"name": "blockTimestampLast",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "kLast",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "price0CumulativeLast",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "price1CumulativeLast",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "skim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount0Out",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1Out",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sync",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":\"IUniswapV2Pair\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\",\"urls\":[\"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf\",\"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
				"SafeCast": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Safe casting methods",
						"version": 1
					},
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212209ecdbfe00451e461831fc23412f49fc336f58c7742b823ecd6e7fb3ec2e4c9fa64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0xCD 0xBF 0xE0 DIV MLOAD 0xE4 PUSH2 0x831F 0xC2 CALLVALUE SLT DELEGATECALL SWAP16 0xC3 CALLDATASIZE CREATE2 DUP13 PUSH24 0x42B823ECD6E7FB3EC2E4C9FA64736F6C6343000811003300 ",
							"sourceMap": "165:882:29:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "600080fdfea26469706673582212209ecdbfe00451e461831fc23412f49fc336f58c7742b823ecd6e7fb3ec2e4c9fa64736f6c63430008110033",
							"opcodes": "PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0xCD 0xBF 0xE0 DIV MLOAD 0xE4 PUSH2 0x831F 0xC2 CALLVALUE SLT DELEGATECALL SWAP16 0xC3 CALLDATASIZE CREATE2 DUP13 PUSH24 0x42B823ECD6E7FB3EC2E4C9FA64736F6C6343000811003300 ",
							"sourceMap": "165:882:29:-:0;;"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Safe casting methods\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains methods for safely casting between types\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/permit2/lib/openzeppelin-contracts/\",\":permit2/=lib/permit2/\",\":solmate/=lib/solmate/\"],\"viaIR\":true},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://fed11489e218e55d087d42b4f350a30e10cd2aedec8f432bd3cc712f648d5869\",\"dweb:/ipfs/QmWfRnRxyXwHUDcTQPazxYYk5jxErGeQqdvnYtyg5nBPbU\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Contains methods for safely casting between types",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/Permit2Payments.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/modules/Permit2Payments.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/UniversalRouter.sol": {
				"id": 0
			},
			"contracts/base/Dispatcher.sol": {
				"id": 1
			},
			"contracts/base/LockAndMsgSender.sol": {
				"id": 2
			},
			"contracts/base/RouterImmutables.sol": {
				"id": 3
			},
			"contracts/interfaces/IUniversalRouter.sol": {
				"id": 4
			},
			"contracts/interfaces/external/IWETH9.sol": {
				"id": 5
			},
			"contracts/libraries/Commands.sol": {
				"id": 6
			},
			"contracts/libraries/Constants.sol": {
				"id": 7
			},
			"contracts/modules/Payments.sol": {
				"id": 8
			},
			"contracts/modules/Permit2Payments.sol": {
				"id": 9
			},
			"contracts/modules/uniswap/v2/UniswapV2Library.sol": {
				"id": 10
			},
			"contracts/modules/uniswap/v2/V2SwapRouter.sol": {
				"id": 11
			},
			"contracts/modules/uniswap/v3/BytesLib.sol": {
				"id": 12
			},
			"contracts/modules/uniswap/v3/V3Path.sol": {
				"id": 13
			},
			"contracts/modules/uniswap/v3/V3SwapRouter.sol": {
				"id": 14
			},
			"lib/permit2/src/interfaces/IAllowanceTransfer.sol": {
				"id": 15
			},
			"lib/permit2/src/libraries/SafeCast160.sol": {
				"id": 16
			},
			"lib/solmate/src/tokens/ERC20.sol": {
				"id": 17
			},
			"lib/solmate/src/utils/SafeTransferLib.sol": {
				"id": 18
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"id": 19
			},
			"node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
				"id": 20
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
				"id": 21
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"id": 22
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"id": 23
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"id": 24
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"id": 25
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"id": 26
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"id": 27
			},
			"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"id": 28
			},
			"node_modules/@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
				"id": 29
			}
		}
	}
}